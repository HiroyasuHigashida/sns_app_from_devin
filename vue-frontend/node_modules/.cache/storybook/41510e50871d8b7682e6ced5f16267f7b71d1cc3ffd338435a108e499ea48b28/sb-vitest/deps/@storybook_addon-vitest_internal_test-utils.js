import {
  Vr,
  bi,
  se
} from "./chunk-YHGJ2EU7.js";
import "./chunk-2ROGQ7VS.js";
import "./chunk-D5GBAIJV.js";
import "./chunk-O46TZV6B.js";
import "./chunk-CD6FLOGV.js";
import "./chunk-2MX6Z6FM.js";
import "./chunk-KOPRMXR6.js";

// node_modules/.pnpm/@storybook+addon-vitest@9.0.16_@vitest+browser@3.2.4_@vitest+runner@3.2.4_react-dom@19.1.0_re_pqcc6wiuqd4nntbqlouyuyfs5q/node_modules/@storybook/addon-vitest/dist/vitest-plugin/test-utils.mjs
import { server } from "@vitest/browser/context";

// node_modules/.pnpm/storybook@9.0.16_@testing-library+dom@10.4.0_prettier@3.6.2/node_modules/storybook/dist/viewport/index.js
var e = "storybook/viewport";
var t = "viewport";
var o = `${e}/panel`;
var h = `${e}/tool`;
var l = {
  mobile1: {
    name: "Small mobile",
    styles: {
      height: "568px",
      width: "320px"
    },
    type: "mobile"
  },
  mobile2: {
    name: "Large mobile",
    styles: {
      height: "896px",
      width: "414px"
    },
    type: "mobile"
  },
  tablet: {
    name: "Tablet",
    styles: {
      height: "1112px",
      width: "834px"
    },
    type: "tablet"
  },
  desktop: {
    name: "Desktop",
    styles: {
      height: "1024px",
      width: "1280px"
    },
    type: "desktop"
  }
};
var w = {
  [t]: { value: void 0, isRotated: false }
};

// node_modules/.pnpm/@storybook+addon-vitest@9.0.16_@vitest+browser@3.2.4_@vitest+runner@3.2.4_react-dom@19.1.0_re_pqcc6wiuqd4nntbqlouyuyfs5q/node_modules/@storybook/addon-vitest/dist/vitest-plugin/test-utils.mjs
var DEFAULT_VIEWPORT_DIMENSIONS = { width: 1200, height: 900 };
var validPixelOrNumber = /^\d+(px)?$/;
var percentagePattern = /^(\d+(\.\d+)?%)$/;
var vwPattern = /^(\d+(\.\d+)?vw)$/;
var vhPattern = /^(\d+(\.\d+)?vh)$/;
var emRemPattern = /^(\d+)(em|rem)$/;
var parseDimension = (value, dimension) => {
  if (validPixelOrNumber.test(value)) return Number.parseInt(value, 10);
  if (percentagePattern.test(value)) {
    let percentageValue = parseFloat(value) / 100;
    return Math.round(DEFAULT_VIEWPORT_DIMENSIONS[dimension] * percentageValue);
  } else if (vwPattern.test(value)) {
    let vwValue = parseFloat(value) / 100;
    return Math.round(DEFAULT_VIEWPORT_DIMENSIONS.width * vwValue);
  } else if (vhPattern.test(value)) {
    let vhValue = parseFloat(value) / 100;
    return Math.round(DEFAULT_VIEWPORT_DIMENSIONS.height * vhValue);
  } else {
    if (emRemPattern.test(value)) return Number.parseInt(value, 10) * 16;
    throw new se({ dimension, value });
  }
};
var setViewport = async (parameters = {}, globals = {}) => {
  let defaultViewport, viewportsParam = parameters.viewport ?? {}, viewportsGlobal = globals.viewport ?? {}, isDisabled = viewportsParam.disable || viewportsParam.disabled;
  viewportsGlobal.value && !isDisabled ? defaultViewport = viewportsGlobal.value : isDisabled || (defaultViewport = viewportsParam.defaultViewport);
  let { page } = await import("@vitest/browser/context").catch(() => ({ page: null }));
  if (!page || !globalThis.__vitest_browser__) return;
  let viewports = { ...l, ...viewportsParam.viewports, ...viewportsParam.options }, viewportWidth = DEFAULT_VIEWPORT_DIMENSIONS.width, viewportHeight = DEFAULT_VIEWPORT_DIMENSIONS.height;
  if (defaultViewport && defaultViewport in viewports) {
    let styles = viewports[defaultViewport].styles;
    if (styles?.width && styles?.height) {
      let { width, height } = styles;
      viewportWidth = parseDimension(width, "width"), viewportHeight = parseDimension(height, "height");
    }
  }
  await page.viewport(viewportWidth, viewportHeight);
};
var { getInitialGlobals } = server.commands;
var convertToFilePath = (url) => url.replace(/^file:\/\//, "").replace(/^\/+([a-zA-Z]:)/, "$1").replace(/%20/g, " ");
var testStory = (exportName, story, meta, skipTags) => async (context) => {
  let annotations = Vr(story, meta), composedStory = bi(annotations.story, annotations.meta, { initialGlobals: await getInitialGlobals?.() ?? {} }, annotations.preview ?? globalThis.globalProjectAnnotations, exportName);
  (composedStory === void 0 || skipTags?.some((tag) => composedStory.tags.includes(tag))) && context.skip(), context.story = composedStory;
  let _task = context.task;
  _task.meta.storyId = composedStory.id, await setViewport(composedStory.parameters, composedStory.globals), await composedStory.run(), _task.meta.reports = composedStory.reporting.reports;
};
export {
  convertToFilePath,
  testStory
};
//# sourceMappingURL=@storybook_addon-vitest_internal_test-utils.js.map
