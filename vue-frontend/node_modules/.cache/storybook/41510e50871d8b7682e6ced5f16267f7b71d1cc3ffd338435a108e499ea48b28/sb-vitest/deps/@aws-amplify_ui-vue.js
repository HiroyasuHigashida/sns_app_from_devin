import {
  Fragment,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createTextVNode,
  createVNode,
  defineComponent,
  effectScope,
  getCurrentScope,
  guardReactiveProps,
  h,
  isRef,
  mergeProps,
  normalizeClass,
  normalizeProps,
  onBeforeMount,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  reactive,
  ref,
  renderList,
  renderSlot,
  shallowRef,
  toDisplayString,
  toRefs,
  unref,
  useSlots,
  watch,
  watchEffect,
  withCtx,
  withModifiers
} from "./chunk-KK4HXL52.js";
import "./chunk-KOPRMXR6.js";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/constants.mjs
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var USER_AGENT_HEADER = "x-amz-user-agent";
var NO_HUBCALLBACK_PROVIDED_EXCEPTION = "NoHubcallbackProvidedException";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Logger/types.mjs
var LogType;
(function(LogType2) {
  LogType2["DEBUG"] = "DEBUG";
  LogType2["ERROR"] = "ERROR";
  LogType2["INFO"] = "INFO";
  LogType2["WARN"] = "WARN";
  LogType2["VERBOSE"] = "VERBOSE";
  LogType2["NONE"] = "NONE";
})(LogType || (LogType = {}));

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Logger/ConsoleLogger.mjs
var LOG_LEVELS = {
  VERBOSE: 1,
  DEBUG: 2,
  INFO: 3,
  WARN: 4,
  ERROR: 5,
  NONE: 6
};
var ConsoleLogger = class _ConsoleLogger {
  /**
   * @constructor
   * @param {string} name - Name of the logger
   */
  constructor(name2, level = LogType.WARN) {
    this.name = name2;
    this.level = level;
    this._pluggables = [];
  }
  _padding(n) {
    return n < 10 ? "0" + n : "" + n;
  }
  _ts() {
    const dt2 = /* @__PURE__ */ new Date();
    return [this._padding(dt2.getMinutes()), this._padding(dt2.getSeconds())].join(":") + "." + dt2.getMilliseconds();
  }
  configure(config2) {
    if (!config2)
      return this._config;
    this._config = config2;
    return this._config;
  }
  /**
   * Write log
   * @method
   * @memeberof Logger
   * @param {LogType|string} type - log type, default INFO
   * @param {string|object} msg - Logging message or object
   */
  _log(type, ...msg) {
    let loggerLevelName = this.level;
    if (_ConsoleLogger.LOG_LEVEL) {
      loggerLevelName = _ConsoleLogger.LOG_LEVEL;
    }
    if (typeof window !== "undefined" && window.LOG_LEVEL) {
      loggerLevelName = window.LOG_LEVEL;
    }
    const loggerLevel = LOG_LEVELS[loggerLevelName];
    const typeLevel = LOG_LEVELS[type];
    if (!(typeLevel >= loggerLevel)) {
      return;
    }
    let log = console.log.bind(console);
    if (type === LogType.ERROR && console.error) {
      log = console.error.bind(console);
    }
    if (type === LogType.WARN && console.warn) {
      log = console.warn.bind(console);
    }
    if (_ConsoleLogger.BIND_ALL_LOG_LEVELS) {
      if (type === LogType.INFO && console.info) {
        log = console.info.bind(console);
      }
      if (type === LogType.DEBUG && console.debug) {
        log = console.debug.bind(console);
      }
    }
    const prefix = `[${type}] ${this._ts()} ${this.name}`;
    let message = "";
    if (msg.length === 1 && typeof msg[0] === "string") {
      message = `${prefix} - ${msg[0]}`;
      log(message);
    } else if (msg.length === 1) {
      message = `${prefix} ${msg[0]}`;
      log(prefix, msg[0]);
    } else if (typeof msg[0] === "string") {
      let obj = msg.slice(1);
      if (obj.length === 1) {
        obj = obj[0];
      }
      message = `${prefix} - ${msg[0]} ${obj}`;
      log(`${prefix} - ${msg[0]}`, obj);
    } else {
      message = `${prefix} ${msg}`;
      log(prefix, msg);
    }
    for (const plugin of this._pluggables) {
      const logEvent = { message, timestamp: Date.now() };
      plugin.pushLogs([logEvent]);
    }
  }
  /**
   * Write General log. Default to INFO
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  log(...msg) {
    this._log(LogType.INFO, ...msg);
  }
  /**
   * Write INFO log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  info(...msg) {
    this._log(LogType.INFO, ...msg);
  }
  /**
   * Write WARN log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  warn(...msg) {
    this._log(LogType.WARN, ...msg);
  }
  /**
   * Write ERROR log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  error(...msg) {
    this._log(LogType.ERROR, ...msg);
  }
  /**
   * Write DEBUG log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  debug(...msg) {
    this._log(LogType.DEBUG, ...msg);
  }
  /**
   * Write VERBOSE log
   * @method
   * @memeberof Logger
   * @param {string|object} msg - Logging message or object
   */
  verbose(...msg) {
    this._log(LogType.VERBOSE, ...msg);
  }
  addPluggable(pluggable) {
    if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {
      this._pluggables.push(pluggable);
      pluggable.configure(this._config);
    }
  }
  listPluggables() {
    return this._pluggables;
  }
};
ConsoleLogger.LOG_LEVEL = null;
ConsoleLogger.BIND_ALL_LOG_LEVELS = false;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/errors/AmplifyError.mjs
var AmplifyError = class _AmplifyError extends Error {
  /**
   *  Constructs an AmplifyError.
   *
   * @param message text that describes the main problem.
   * @param underlyingError the underlying cause of the error.
   * @param recoverySuggestion suggestion to recover from the error.
   *
   */
  constructor({ message, name: name2, recoverySuggestion, underlyingError, metadata }) {
    super(message);
    this.name = name2;
    this.underlyingError = underlyingError;
    this.recoverySuggestion = recoverySuggestion;
    if (metadata) {
      const { extendedRequestId, httpStatusCode, requestId } = metadata;
      this.metadata = { extendedRequestId, httpStatusCode, requestId };
    }
    this.constructor = _AmplifyError;
    Object.setPrototypeOf(this, _AmplifyError.prototype);
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/types/errors.mjs
var AmplifyErrorCode;
(function(AmplifyErrorCode2) {
  AmplifyErrorCode2["NoEndpointId"] = "NoEndpointId";
  AmplifyErrorCode2["PlatformNotSupported"] = "PlatformNotSupported";
  AmplifyErrorCode2["Unknown"] = "Unknown";
  AmplifyErrorCode2["NetworkError"] = "NetworkError";
})(AmplifyErrorCode || (AmplifyErrorCode = {}));

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/errors/createAssertionFunction.mjs
var createAssertionFunction = (errorMap, AssertionError = AmplifyError) => (assertion, name2, additionalContext) => {
  const { message, recoverySuggestion } = errorMap[name2];
  if (!assertion) {
    throw new AssertionError({
      name: name2,
      message: additionalContext ? `${message} ${additionalContext}` : message,
      recoverySuggestion
    });
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/errors/errorHelpers.mjs
var amplifyErrorMap = {
  [AmplifyErrorCode.NoEndpointId]: {
    message: "Endpoint ID was not found and was unable to be created."
  },
  [AmplifyErrorCode.PlatformNotSupported]: {
    message: "Function not supported on current platform."
  },
  [AmplifyErrorCode.Unknown]: {
    message: "An unknown error occurred."
  },
  [AmplifyErrorCode.NetworkError]: {
    message: "A network error has occurred."
  }
};
var assert = createAssertionFunction(amplifyErrorMap);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Hub/index.mjs
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" ? Symbol("amplify_default") : "@@amplify_default";
var logger = new ConsoleLogger("Hub");
var HubClass = class {
  constructor(name2) {
    this.listeners = /* @__PURE__ */ new Map();
    this.protectedChannels = [
      "core",
      "auth",
      "api",
      "analytics",
      "interactions",
      "pubsub",
      "storage",
      "ui",
      "xr"
    ];
    this.name = name2;
  }
  /**
   * Used internally to remove a Hub listener.
   *
   * @remarks
   * This private method is for internal use only. Instead of calling Hub.remove, call the result of Hub.listen.
   */
  _remove(channel, listener) {
    const holder = this.listeners.get(channel);
    if (!holder) {
      logger.warn(`No listeners for ${channel}`);
      return;
    }
    this.listeners.set(channel, [
      ...holder.filter(({ callback }) => callback !== listener)
    ]);
  }
  dispatch(channel, payload, source, ampSymbol) {
    if (typeof channel === "string" && this.protectedChannels.indexOf(channel) > -1) {
      const hasAccess = ampSymbol === AMPLIFY_SYMBOL;
      if (!hasAccess) {
        logger.warn(`WARNING: ${channel} is protected and dispatching on it can have unintended consequences`);
      }
    }
    const capsule = {
      channel,
      payload: { ...payload },
      source,
      patternInfo: []
    };
    try {
      this._toListeners(capsule);
    } catch (e) {
      logger.error(e);
    }
  }
  listen(channel, callback, listenerName = "noname") {
    let cb2;
    if (typeof callback !== "function") {
      throw new AmplifyError({
        name: NO_HUBCALLBACK_PROVIDED_EXCEPTION,
        message: "No callback supplied to Hub"
      });
    } else {
      cb2 = callback;
    }
    let holder = this.listeners.get(channel);
    if (!holder) {
      holder = [];
      this.listeners.set(channel, holder);
    }
    holder.push({
      name: listenerName,
      callback: cb2
    });
    return () => {
      this._remove(channel, cb2);
    };
  }
  _toListeners(capsule) {
    const { channel, payload } = capsule;
    const holder = this.listeners.get(channel);
    if (holder) {
      holder.forEach((listener) => {
        logger.debug(`Dispatching to ${channel} with `, payload);
        try {
          listener.callback(capsule);
        } catch (e) {
          logger.error(e);
        }
      });
    }
  }
};
var Hub = new HubClass("__default__");
var HubInternal = new HubClass("internal-hub");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/globalHelpers/index.mjs
var getCrypto = () => {
  if (typeof window === "object" && typeof window.crypto === "object") {
    return window.crypto;
  }
  if (typeof crypto === "object") {
    return crypto;
  }
  throw new AmplifyError({
    name: "MissingPolyfill",
    message: "Cannot resolve the `crypto` function from the environment."
  });
};
var getBtoa = () => {
  if (typeof window !== "undefined" && typeof window.btoa === "function") {
    return window.btoa;
  }
  if (typeof btoa === "function") {
    return btoa;
  }
  throw new AmplifyError({
    name: "Base64EncoderError",
    message: "Cannot resolve the `btoa` function from the environment."
  });
};
var getAtob = () => {
  if (typeof window !== "undefined" && typeof window.atob === "function") {
    return window.atob;
  }
  if (typeof atob === "function") {
    return atob;
  }
  throw new AmplifyError({
    name: "Base64EncoderError",
    message: "Cannot resolve the `atob` function from the environment."
  });
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/convert/base64/base64Decoder.mjs
var base64Decoder = {
  convert(input, options) {
    let inputStr = input;
    if (options?.urlSafe) {
      inputStr = inputStr.replace(/-/g, "+").replace(/_/g, "/");
    }
    return getAtob()(inputStr);
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/Auth/utils/errorHelpers.mjs
var AuthConfigurationErrorCode;
(function(AuthConfigurationErrorCode2) {
  AuthConfigurationErrorCode2["AuthTokenConfigException"] = "AuthTokenConfigException";
  AuthConfigurationErrorCode2["AuthUserPoolAndIdentityPoolException"] = "AuthUserPoolAndIdentityPoolException";
  AuthConfigurationErrorCode2["AuthUserPoolException"] = "AuthUserPoolException";
  AuthConfigurationErrorCode2["InvalidIdentityPoolIdException"] = "InvalidIdentityPoolIdException";
  AuthConfigurationErrorCode2["OAuthNotConfigureException"] = "OAuthNotConfigureException";
})(AuthConfigurationErrorCode || (AuthConfigurationErrorCode = {}));
var authConfigurationErrorMap = {
  [AuthConfigurationErrorCode.AuthTokenConfigException]: {
    message: "Auth Token Provider not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure in your app."
  },
  [AuthConfigurationErrorCode.AuthUserPoolAndIdentityPoolException]: {
    message: "Auth UserPool or IdentityPool not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure in your app with UserPoolId and IdentityPoolId."
  },
  [AuthConfigurationErrorCode.AuthUserPoolException]: {
    message: "Auth UserPool not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure in your app with userPoolId and userPoolClientId."
  },
  [AuthConfigurationErrorCode.InvalidIdentityPoolIdException]: {
    message: "Invalid identity pool id provided.",
    recoverySuggestion: "Make sure a valid identityPoolId is given in the config."
  },
  [AuthConfigurationErrorCode.OAuthNotConfigureException]: {
    message: "oauth param not configured.",
    recoverySuggestion: "Make sure to call Amplify.configure with oauth parameter in your app."
  }
};
var assert2 = createAssertionFunction(authConfigurationErrorMap);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/Auth/utils/index.mjs
function assertTokenProviderConfig(cognitoConfig) {
  let assertionValid = true;
  if (!cognitoConfig) {
    assertionValid = false;
  } else {
    assertionValid = !!cognitoConfig.userPoolId && !!cognitoConfig.userPoolClientId;
  }
  assert2(assertionValid, AuthConfigurationErrorCode.AuthUserPoolException);
}
function assertOAuthConfig(cognitoConfig) {
  const validOAuthConfig = !!cognitoConfig?.loginWith?.oauth?.domain && !!cognitoConfig?.loginWith?.oauth?.redirectSignOut && !!cognitoConfig?.loginWith?.oauth?.redirectSignIn && !!cognitoConfig?.loginWith?.oauth?.responseType;
  assert2(validOAuthConfig, AuthConfigurationErrorCode.OAuthNotConfigureException);
}
function assertIdentityPoolIdConfig(cognitoConfig) {
  const validConfig = !!cognitoConfig?.identityPoolId;
  assert2(validConfig, AuthConfigurationErrorCode.InvalidIdentityPoolIdException);
}
function decodeJWT(token) {
  const tokenParts = token.split(".");
  if (tokenParts.length !== 3) {
    throw new Error("Invalid token");
  }
  try {
    const base64WithUrlSafe = tokenParts[1];
    const base64 = base64WithUrlSafe.replace(/-/g, "+").replace(/_/g, "/");
    const jsonStr = decodeURIComponent(base64Decoder.convert(base64).split("").map((char) => `%${`00${char.charCodeAt(0).toString(16)}`.slice(-2)}`).join(""));
    const payload = JSON.parse(jsonStr);
    return {
      toString: () => token,
      payload
    };
  } catch (err) {
    throw new Error("Invalid token payload");
  }
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/getClientInfo/getClientInfo.mjs
var logger2 = new ConsoleLogger("getClientInfo");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/retry/retry.mjs
var logger3 = new ConsoleLogger("retryUtil");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/deepFreeze.mjs
var deepFreeze = (object) => {
  const propNames = Reflect.ownKeys(object);
  for (const name2 of propNames) {
    const value = object[name2];
    if (value && typeof value === "object" || typeof value === "function") {
      deepFreeze(value);
    }
  }
  return Object.freeze(object);
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/parseAWSExports.mjs
var logger4 = new ConsoleLogger("parseAWSExports");
var authTypeMapping = {
  API_KEY: "apiKey",
  AWS_IAM: "iam",
  AMAZON_COGNITO_USER_POOLS: "userPool",
  OPENID_CONNECT: "oidc",
  NONE: "none",
  AWS_LAMBDA: "lambda",
  // `LAMBDA` is an incorrect value that was added during the v6 rewrite.
  // Keeping it as a valid value until v7 to prevent breaking customers who might
  // be relying on it as a workaround.
  // ref: https://github.com/aws-amplify/amplify-js/pull/12922
  // TODO: @v7 remove next line
  LAMBDA: "lambda"
};
var parseAWSExports = (config2 = {}) => {
  if (!Object.prototype.hasOwnProperty.call(config2, "aws_project_region")) {
    throw new AmplifyError({
      name: "InvalidParameterException",
      message: "Invalid config parameter.",
      recoverySuggestion: "Ensure passing the config object imported from  `amplifyconfiguration.json`."
    });
  }
  const { aws_appsync_apiKey, aws_appsync_authenticationType, aws_appsync_graphqlEndpoint, aws_appsync_region, aws_bots_config, aws_cognito_identity_pool_id, aws_cognito_sign_up_verification_method, aws_cognito_mfa_configuration, aws_cognito_mfa_types, aws_cognito_password_protection_settings, aws_cognito_verification_mechanisms, aws_cognito_signup_attributes, aws_cognito_social_providers, aws_cognito_username_attributes, aws_mandatory_sign_in, aws_mobile_analytics_app_id, aws_mobile_analytics_app_region, aws_user_files_s3_bucket, aws_user_files_s3_bucket_region, aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing, aws_user_pools_id, aws_user_pools_web_client_id, geo, oauth, predictions, aws_cloud_logic_custom, Notifications, modelIntrospection } = config2;
  const amplifyConfig = {};
  if (aws_mobile_analytics_app_id) {
    amplifyConfig.Analytics = {
      Pinpoint: {
        appId: aws_mobile_analytics_app_id,
        region: aws_mobile_analytics_app_region
      }
    };
  }
  const { InAppMessaging, Push } = Notifications ?? {};
  if (InAppMessaging?.AWSPinpoint || Push?.AWSPinpoint) {
    if (InAppMessaging?.AWSPinpoint) {
      const { appId, region } = InAppMessaging.AWSPinpoint;
      amplifyConfig.Notifications = {
        InAppMessaging: {
          Pinpoint: {
            appId,
            region
          }
        }
      };
    }
    if (Push?.AWSPinpoint) {
      const { appId, region } = Push.AWSPinpoint;
      amplifyConfig.Notifications = {
        ...amplifyConfig.Notifications,
        PushNotification: {
          Pinpoint: {
            appId,
            region
          }
        }
      };
    }
  }
  if (Array.isArray(aws_bots_config)) {
    amplifyConfig.Interactions = {
      LexV1: Object.fromEntries(aws_bots_config.map((bot) => [bot.name, bot]))
    };
  }
  if (aws_appsync_graphqlEndpoint) {
    const defaultAuthMode = authTypeMapping[aws_appsync_authenticationType];
    if (!defaultAuthMode) {
      logger4.debug(`Invalid authentication type ${aws_appsync_authenticationType}. Falling back to IAM.`);
    }
    amplifyConfig.API = {
      GraphQL: {
        endpoint: aws_appsync_graphqlEndpoint,
        apiKey: aws_appsync_apiKey,
        region: aws_appsync_region,
        defaultAuthMode: defaultAuthMode ?? "iam"
      }
    };
    if (modelIntrospection) {
      amplifyConfig.API.GraphQL.modelIntrospection = modelIntrospection;
    }
  }
  const mfaConfig = aws_cognito_mfa_configuration ? {
    status: aws_cognito_mfa_configuration && aws_cognito_mfa_configuration.toLowerCase(),
    totpEnabled: aws_cognito_mfa_types?.includes("TOTP") ?? false,
    smsEnabled: aws_cognito_mfa_types?.includes("SMS") ?? false
  } : void 0;
  const passwordFormatConfig = aws_cognito_password_protection_settings ? {
    minLength: aws_cognito_password_protection_settings.passwordPolicyMinLength,
    requireLowercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes("REQUIRES_LOWERCASE") ?? false,
    requireUppercase: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes("REQUIRES_UPPERCASE") ?? false,
    requireNumbers: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes("REQUIRES_NUMBERS") ?? false,
    requireSpecialCharacters: aws_cognito_password_protection_settings.passwordPolicyCharacters?.includes("REQUIRES_SYMBOLS") ?? false
  } : void 0;
  const mergedUserAttributes = Array.from(/* @__PURE__ */ new Set([
    ...aws_cognito_verification_mechanisms ?? [],
    ...aws_cognito_signup_attributes ?? []
  ]));
  const userAttributes = mergedUserAttributes.reduce((attributes, key) => ({
    ...attributes,
    // All user attributes generated by the CLI are required
    [key.toLowerCase()]: { required: true }
  }), {});
  const loginWithEmailEnabled = aws_cognito_username_attributes?.includes("EMAIL") ?? false;
  const loginWithPhoneEnabled = aws_cognito_username_attributes?.includes("PHONE_NUMBER") ?? false;
  if (aws_cognito_identity_pool_id || aws_user_pools_id) {
    amplifyConfig.Auth = {
      Cognito: {
        identityPoolId: aws_cognito_identity_pool_id,
        allowGuestAccess: aws_mandatory_sign_in !== "enable",
        signUpVerificationMethod: aws_cognito_sign_up_verification_method,
        userAttributes,
        userPoolClientId: aws_user_pools_web_client_id,
        userPoolId: aws_user_pools_id,
        mfa: mfaConfig,
        passwordFormat: passwordFormatConfig,
        loginWith: {
          username: !(loginWithEmailEnabled || loginWithPhoneEnabled),
          email: loginWithEmailEnabled,
          phone: loginWithPhoneEnabled
        }
      }
    };
  }
  const hasOAuthConfig = oauth ? Object.keys(oauth).length > 0 : false;
  const hasSocialProviderConfig = aws_cognito_social_providers ? aws_cognito_social_providers.length > 0 : false;
  if (amplifyConfig.Auth && hasOAuthConfig) {
    amplifyConfig.Auth.Cognito.loginWith = {
      ...amplifyConfig.Auth.Cognito.loginWith,
      oauth: {
        ...getOAuthConfig(oauth),
        ...hasSocialProviderConfig && {
          providers: parseSocialProviders(aws_cognito_social_providers)
        }
      }
    };
  }
  if (aws_user_files_s3_bucket) {
    amplifyConfig.Storage = {
      S3: {
        bucket: aws_user_files_s3_bucket,
        region: aws_user_files_s3_bucket_region,
        dangerouslyConnectToHttpEndpointForTesting: aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing
      }
    };
  }
  if (geo) {
    const { amazon_location_service } = geo;
    amplifyConfig.Geo = {
      LocationService: {
        maps: amazon_location_service.maps,
        geofenceCollections: amazon_location_service.geofenceCollections,
        searchIndices: amazon_location_service.search_indices,
        region: amazon_location_service.region
      }
    };
  }
  if (aws_cloud_logic_custom) {
    amplifyConfig.API = {
      ...amplifyConfig.API,
      REST: aws_cloud_logic_custom.reduce((acc, api2) => {
        const { name: name2, endpoint, region, service } = api2;
        return {
          ...acc,
          [name2]: {
            endpoint,
            ...service ? { service } : void 0,
            ...region ? { region } : void 0
          }
        };
      }, {})
    };
  }
  if (predictions) {
    const { VoiceId: voiceId } = predictions?.convert?.speechGenerator?.defaults ?? {};
    amplifyConfig.Predictions = voiceId ? {
      ...predictions,
      convert: {
        ...predictions.convert,
        speechGenerator: {
          ...predictions.convert.speechGenerator,
          defaults: { voiceId }
        }
      }
    } : predictions;
  }
  return amplifyConfig;
};
var getRedirectUrl = (redirectStr) => redirectStr?.split(",") ?? [];
var getOAuthConfig = ({ domain, scope, redirectSignIn, redirectSignOut, responseType }) => ({
  domain,
  scopes: scope,
  redirectSignIn: getRedirectUrl(redirectSignIn),
  redirectSignOut: getRedirectUrl(redirectSignOut),
  responseType
});
var parseSocialProviders = (aws_cognito_social_providers) => {
  return aws_cognito_social_providers.map((provider) => {
    const updatedProvider = provider.toLowerCase();
    return updatedProvider.charAt(0).toUpperCase() + updatedProvider.slice(1);
  });
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/constants.mjs
var ADD_OAUTH_LISTENER = Symbol("oauth-listener");

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  return Uint8Array.of((v = parseInt(uuid.slice(0, 8), 16)) >>> 24, v >>> 16 & 255, v >>> 8 & 255, v & 255, (v = parseInt(uuid.slice(9, 13), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(14, 18), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(19, 23), 16)) >>> 8, v & 255, (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255, v / 4294967296 & 255, v >>> 24 & 255, v >>> 16 & 255, v >>> 8 & 255, v & 255);
}
var parse_default = parse;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
}

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    if (typeof crypto === "undefined" || !crypto.getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    getRandomValues = crypto.getRandomValues.bind(crypto);
  }
  return getRandomValues(rnds8);
}

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  const words = uint8ToUint32(bytes);
  const md5Bytes = wordsToMd5(words, bytes.length * 8);
  return uint32ToUint8(md5Bytes);
}
function uint32ToUint8(input) {
  const bytes = new Uint8Array(input.length * 4);
  for (let i = 0; i < input.length * 4; i++) {
    bytes[i] = input[i >> 2] >>> i % 4 * 8 & 255;
  }
  return bytes;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  const xpad = new Uint32Array(getOutputLength(len)).fill(0);
  xpad.set(x);
  xpad[len >> 5] |= 128 << len % 32;
  xpad[xpad.length - 1] = len;
  x = xpad;
  let a = 1732584193;
  let b = -271733879;
  let c = -1732584194;
  let d = 271733878;
  for (let i = 0; i < x.length; i += 16) {
    const olda = a;
    const oldb = b;
    const oldc = c;
    const oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return Uint32Array.of(a, b, c, d);
}
function uint8ToUint32(input) {
  if (input.length === 0) {
    return new Uint32Array();
  }
  const output = new Uint32Array(getOutputLength(input.length * 8)).fill(0);
  for (let i = 0; i < input.length; i++) {
    output[i >> 2] |= (input[i] & 255) << i % 4 * 8;
  }
  return output;
}
function safeAdd(x, y) {
  const lsw = (x & 65535) + (y & 65535);
  const msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = new Uint8Array(str.length);
  for (let i = 0; i < str.length; ++i) {
    bytes[i] = str.charCodeAt(i);
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35(version2, hash, value, namespace, buf, offset) {
  const valueBytes = typeof value === "string" ? stringToBytes(value) : value;
  const namespaceBytes = typeof namespace === "string" ? parse_default(namespace) : namespace;
  if (typeof namespace === "string") {
    namespace = parse_default(namespace);
  }
  if (namespace?.length !== 16) {
    throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
  }
  let bytes = new Uint8Array(16 + valueBytes.length);
  bytes.set(namespaceBytes);
  bytes.set(valueBytes, namespaceBytes.length);
  bytes = hash(bytes);
  bytes[6] = bytes[6] & 15 | version2;
  bytes[8] = bytes[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = bytes[i];
    }
    return buf;
  }
  return unsafeStringify(bytes);
}

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v3.js
function v3(value, namespace, buf, offset) {
  return v35(48, md5_default, value, namespace, buf, offset);
}
v3.DNS = DNS;
v3.URL = URL2;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = { randomUUID };

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random ?? options.rng?.() ?? rng();
  if (rnds.length < 16) {
    throw new Error("Random bytes length must be >= 16");
  }
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    if (offset < 0 || offset + 16 > buf.length) {
      throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);
    }
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  const K2 = [1518500249, 1859775393, 2400959708, 3395469782];
  const H2 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  const newBytes = new Uint8Array(bytes.length + 1);
  newBytes.set(bytes);
  newBytes[bytes.length] = 128;
  bytes = newBytes;
  const l = bytes.length / 4 + 2;
  const N = Math.ceil(l / 16);
  const M = new Array(N);
  for (let i = 0; i < N; ++i) {
    const arr = new Uint32Array(16);
    for (let j2 = 0; j2 < 16; ++j2) {
      arr[j2] = bytes[i * 64 + j2 * 4] << 24 | bytes[i * 64 + j2 * 4 + 1] << 16 | bytes[i * 64 + j2 * 4 + 2] << 8 | bytes[i * 64 + j2 * 4 + 3];
    }
    M[i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (let i = 0; i < N; ++i) {
    const W = new Uint32Array(80);
    for (let t = 0; t < 16; ++t) {
      W[t] = M[i][t];
    }
    for (let t = 16; t < 80; ++t) {
      W[t] = ROTL(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);
    }
    let a = H2[0];
    let b = H2[1];
    let c = H2[2];
    let d = H2[3];
    let e = H2[4];
    for (let t = 0; t < 80; ++t) {
      const s = Math.floor(t / 20);
      const T2 = ROTL(a, 5) + f(s, b, c, d) + e + K2[s] + W[t] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T2;
    }
    H2[0] = H2[0] + a >>> 0;
    H2[1] = H2[1] + b >>> 0;
    H2[2] = H2[2] + c >>> 0;
    H2[3] = H2[3] + d >>> 0;
    H2[4] = H2[4] + e >>> 0;
  }
  return Uint8Array.of(H2[0] >> 24, H2[0] >> 16, H2[0] >> 8, H2[0], H2[1] >> 24, H2[1] >> 16, H2[1] >> 8, H2[1], H2[2] >> 24, H2[2] >> 16, H2[2] >> 8, H2[2], H2[3] >> 24, H2[3] >> 16, H2[3] >> 8, H2[3], H2[4] >> 24, H2[4] >> 16, H2[4] >> 8, H2[4]);
}
var sha1_default = sha1;

// node_modules/.pnpm/uuid@11.1.0/node_modules/uuid/dist/esm-browser/v5.js
function v5(value, namespace, buf, offset) {
  return v35(80, sha1_default, value, namespace, buf, offset);
}
v5.DNS = DNS;
v5.URL = URL2;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/parseAmplifyOutputs.mjs
function isAmplifyOutputs(config2) {
  const { version: version2 } = config2;
  if (!version2) {
    return false;
  }
  return version2.startsWith("1");
}
function parseStorage(amplifyOutputsStorageProperties) {
  if (!amplifyOutputsStorageProperties) {
    return void 0;
  }
  const { bucket_name, aws_region, buckets } = amplifyOutputsStorageProperties;
  return {
    S3: {
      bucket: bucket_name,
      region: aws_region,
      buckets: buckets && createBucketInfoMap(buckets)
    }
  };
}
function parseAuth(amplifyOutputsAuthProperties) {
  if (!amplifyOutputsAuthProperties) {
    return void 0;
  }
  const { user_pool_id, user_pool_client_id, identity_pool_id, password_policy, mfa_configuration, mfa_methods, unauthenticated_identities_enabled, oauth, username_attributes, standard_required_attributes, groups } = amplifyOutputsAuthProperties;
  const authConfig = {
    Cognito: {
      userPoolId: user_pool_id,
      userPoolClientId: user_pool_client_id,
      groups
    }
  };
  if (identity_pool_id) {
    authConfig.Cognito = {
      ...authConfig.Cognito,
      identityPoolId: identity_pool_id
    };
  }
  if (password_policy) {
    authConfig.Cognito.passwordFormat = {
      requireLowercase: password_policy.require_lowercase,
      requireNumbers: password_policy.require_numbers,
      requireUppercase: password_policy.require_uppercase,
      requireSpecialCharacters: password_policy.require_symbols,
      minLength: password_policy.min_length ?? 6
    };
  }
  if (mfa_configuration) {
    authConfig.Cognito.mfa = {
      status: getMfaStatus(mfa_configuration),
      smsEnabled: mfa_methods?.includes("SMS"),
      totpEnabled: mfa_methods?.includes("TOTP")
    };
  }
  if (unauthenticated_identities_enabled) {
    authConfig.Cognito.allowGuestAccess = unauthenticated_identities_enabled;
  }
  if (oauth) {
    authConfig.Cognito.loginWith = {
      oauth: {
        domain: oauth.domain,
        redirectSignIn: oauth.redirect_sign_in_uri,
        redirectSignOut: oauth.redirect_sign_out_uri,
        responseType: oauth.response_type === "token" ? "token" : "code",
        scopes: oauth.scopes,
        providers: getOAuthProviders(oauth.identity_providers)
      }
    };
  }
  if (username_attributes) {
    authConfig.Cognito.loginWith = {
      ...authConfig.Cognito.loginWith,
      email: username_attributes.includes("email"),
      phone: username_attributes.includes("phone_number"),
      // Signing in with a username is not currently supported in Gen2, this should always evaluate to false
      username: username_attributes.includes("username")
    };
  }
  if (standard_required_attributes) {
    authConfig.Cognito.userAttributes = standard_required_attributes.reduce((acc, curr) => ({ ...acc, [curr]: { required: true } }), {});
  }
  return authConfig;
}
function parseAnalytics(amplifyOutputsAnalyticsProperties) {
  if (!amplifyOutputsAnalyticsProperties?.amazon_pinpoint) {
    return void 0;
  }
  const { amazon_pinpoint } = amplifyOutputsAnalyticsProperties;
  return {
    Pinpoint: {
      appId: amazon_pinpoint.app_id,
      region: amazon_pinpoint.aws_region
    }
  };
}
function parseGeo(amplifyOutputsAnalyticsProperties) {
  if (!amplifyOutputsAnalyticsProperties) {
    return void 0;
  }
  const { aws_region, geofence_collections, maps, search_indices } = amplifyOutputsAnalyticsProperties;
  return {
    LocationService: {
      region: aws_region,
      searchIndices: search_indices,
      geofenceCollections: geofence_collections,
      maps
    }
  };
}
function parseData(amplifyOutputsDataProperties) {
  if (!amplifyOutputsDataProperties) {
    return void 0;
  }
  const { aws_region, default_authorization_type, url, api_key, model_introspection } = amplifyOutputsDataProperties;
  const GraphQL = {
    endpoint: url,
    defaultAuthMode: getGraphQLAuthMode(default_authorization_type),
    region: aws_region,
    apiKey: api_key,
    modelIntrospection: model_introspection
  };
  return {
    GraphQL
  };
}
function parseCustom(amplifyOutputsCustomProperties) {
  if (!amplifyOutputsCustomProperties?.events) {
    return void 0;
  }
  const { url, aws_region, api_key, default_authorization_type } = amplifyOutputsCustomProperties.events;
  const Events = {
    endpoint: url,
    defaultAuthMode: getGraphQLAuthMode(default_authorization_type),
    region: aws_region,
    apiKey: api_key
  };
  return {
    Events
  };
}
function parseNotifications(amplifyOutputsNotificationsProperties) {
  if (!amplifyOutputsNotificationsProperties) {
    return void 0;
  }
  const { aws_region, channels, amazon_pinpoint_app_id } = amplifyOutputsNotificationsProperties;
  const hasInAppMessaging = channels.includes("IN_APP_MESSAGING");
  const hasPushNotification = channels.includes("APNS") || channels.includes("FCM");
  if (!(hasInAppMessaging || hasPushNotification)) {
    return void 0;
  }
  const notificationsConfig = {};
  if (hasInAppMessaging) {
    notificationsConfig.InAppMessaging = {
      Pinpoint: {
        appId: amazon_pinpoint_app_id,
        region: aws_region
      }
    };
  }
  if (hasPushNotification) {
    notificationsConfig.PushNotification = {
      Pinpoint: {
        appId: amazon_pinpoint_app_id,
        region: aws_region
      }
    };
  }
  return notificationsConfig;
}
function parseAmplifyOutputs(amplifyOutputs) {
  const resourcesConfig = {};
  if (amplifyOutputs.storage) {
    resourcesConfig.Storage = parseStorage(amplifyOutputs.storage);
  }
  if (amplifyOutputs.auth) {
    resourcesConfig.Auth = parseAuth(amplifyOutputs.auth);
  }
  if (amplifyOutputs.analytics) {
    resourcesConfig.Analytics = parseAnalytics(amplifyOutputs.analytics);
  }
  if (amplifyOutputs.geo) {
    resourcesConfig.Geo = parseGeo(amplifyOutputs.geo);
  }
  if (amplifyOutputs.data) {
    resourcesConfig.API = parseData(amplifyOutputs.data);
  }
  if (amplifyOutputs.custom) {
    const customConfig = parseCustom(amplifyOutputs.custom);
    if (customConfig && "Events" in customConfig) {
      resourcesConfig.API = { ...resourcesConfig.API, ...customConfig };
    }
  }
  if (amplifyOutputs.notifications) {
    resourcesConfig.Notifications = parseNotifications(amplifyOutputs.notifications);
  }
  return resourcesConfig;
}
var authModeNames = {
  AMAZON_COGNITO_USER_POOLS: "userPool",
  API_KEY: "apiKey",
  AWS_IAM: "iam",
  AWS_LAMBDA: "lambda",
  OPENID_CONNECT: "oidc"
};
function getGraphQLAuthMode(authType) {
  return authModeNames[authType];
}
var providerNames = {
  GOOGLE: "Google",
  LOGIN_WITH_AMAZON: "Amazon",
  FACEBOOK: "Facebook",
  SIGN_IN_WITH_APPLE: "Apple"
};
function getOAuthProviders(providers = []) {
  return providers.reduce((oAuthProviders, provider) => {
    if (providerNames[provider] !== void 0) {
      oAuthProviders.push(providerNames[provider]);
    }
    return oAuthProviders;
  }, []);
}
function getMfaStatus(mfaConfiguration) {
  if (mfaConfiguration === "OPTIONAL")
    return "optional";
  if (mfaConfiguration === "REQUIRED")
    return "on";
  return "off";
}
function createBucketInfoMap(buckets) {
  const mappedBuckets = {};
  buckets.forEach(({ name: name2, bucket_name: bucketName, aws_region: region, paths }) => {
    if (name2 in mappedBuckets) {
      throw new Error(`Duplicate friendly name found: ${name2}. Name must be unique.`);
    }
    const sanitizedPaths = paths ? Object.entries(paths).reduce((acc, [key, value]) => {
      if (value !== void 0) {
        acc[key] = value;
      }
      return acc;
    }, {}) : void 0;
    mappedBuckets[name2] = {
      bucketName,
      region,
      paths: sanitizedPaths
    };
  });
  return mappedBuckets;
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/parseAmplifyConfig.mjs
var parseAmplifyConfig = (amplifyConfig) => {
  if (Object.keys(amplifyConfig).some((key) => key.startsWith("aws_"))) {
    return parseAWSExports(amplifyConfig);
  } else if (isAmplifyOutputs(amplifyConfig)) {
    return parseAmplifyOutputs(amplifyConfig);
  } else {
    return amplifyConfig;
  }
};

// node_modules/.pnpm/tslib@2.8.1/node_modules/tslib/tslib.es6.mjs
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __2() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__2.prototype = b.prototype, new __2());
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
  return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op2) {
    if (f2) throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op2[0] && (_ = 0)), _) try {
      if (f2 = 1, y && (t = op2[0] & 2 ? y["return"] : op2[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op2[1])).done) return t;
      if (y = 0, t) op2 = [op2[0] & 2, t.value];
      switch (op2[0]) {
        case 0:
        case 1:
          t = op2;
          break;
        case 4:
          _.label++;
          return { value: op2[1], done: false };
        case 5:
          _.label++;
          y = op2[1];
          op2 = [0];
          continue;
        case 7:
          op2 = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op2[0] === 6 || op2[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op2[0] === 3 && (!t || op2[1] > t[0] && op2[1] < t[3])) {
            _.label = op2[1];
            break;
          }
          if (op2[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op2;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op2);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op2 = body.call(thisArg, _);
    } catch (e) {
      op2 = [6, e];
      y = 0;
    } finally {
      f2 = t = 0;
    }
    if (op2[0] & 5) throw op2[1];
    return { value: op2[0] ? op2[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r, ar2 = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar2.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar2;
}
function __spreadArray(to2, from2, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from2.length, ar2; i < l; i++) {
    if (ar2 || !(i in from2)) {
      if (!ar2) ar2 = Array.prototype.slice.call(from2, 0, i);
      ar2[i] = from2[i];
    }
  }
  return to2.concat(ar2 || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f2) {
    return function(v) {
      return Promise.resolve(v).then(f2, reject);
    };
  }
  function verb(n, f2) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f2) i[n] = f2(i[n]);
    }
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/.pnpm/@aws-crypto+sha256-js@5.2.0/node_modules/@aws-crypto/sha256-js/build/module/constants.js
var BLOCK_SIZE = 64;
var DIGEST_LENGTH = 32;
var KEY = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var INIT = [
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
];
var MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

// node_modules/.pnpm/@aws-crypto+sha256-js@5.2.0/node_modules/@aws-crypto/sha256-js/build/module/RawSha256.js
var RawSha256 = (
  /** @class */
  function() {
    function RawSha2562() {
      this.state = Int32Array.from(INIT);
      this.temp = new Int32Array(64);
      this.buffer = new Uint8Array(64);
      this.bufferLength = 0;
      this.bytesHashed = 0;
      this.finished = false;
    }
    RawSha2562.prototype.update = function(data) {
      if (this.finished) {
        throw new Error("Attempted to update an already finished hash.");
      }
      var position = 0;
      var byteLength = data.byteLength;
      this.bytesHashed += byteLength;
      if (this.bytesHashed * 8 > MAX_HASHABLE_LENGTH) {
        throw new Error("Cannot hash more than 2^53 - 1 bits");
      }
      while (byteLength > 0) {
        this.buffer[this.bufferLength++] = data[position++];
        byteLength--;
        if (this.bufferLength === BLOCK_SIZE) {
          this.hashBuffer();
          this.bufferLength = 0;
        }
      }
    };
    RawSha2562.prototype.digest = function() {
      if (!this.finished) {
        var bitsHashed = this.bytesHashed * 8;
        var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
        var undecoratedLength = this.bufferLength;
        bufferView.setUint8(this.bufferLength++, 128);
        if (undecoratedLength % BLOCK_SIZE >= BLOCK_SIZE - 8) {
          for (var i = this.bufferLength; i < BLOCK_SIZE; i++) {
            bufferView.setUint8(i, 0);
          }
          this.hashBuffer();
          this.bufferLength = 0;
        }
        for (var i = this.bufferLength; i < BLOCK_SIZE - 8; i++) {
          bufferView.setUint8(i, 0);
        }
        bufferView.setUint32(BLOCK_SIZE - 8, Math.floor(bitsHashed / 4294967296), true);
        bufferView.setUint32(BLOCK_SIZE - 4, bitsHashed);
        this.hashBuffer();
        this.finished = true;
      }
      var out = new Uint8Array(DIGEST_LENGTH);
      for (var i = 0; i < 8; i++) {
        out[i * 4] = this.state[i] >>> 24 & 255;
        out[i * 4 + 1] = this.state[i] >>> 16 & 255;
        out[i * 4 + 2] = this.state[i] >>> 8 & 255;
        out[i * 4 + 3] = this.state[i] >>> 0 & 255;
      }
      return out;
    };
    RawSha2562.prototype.hashBuffer = function() {
      var _a2 = this, buffer2 = _a2.buffer, state = _a2.state;
      var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
      for (var i = 0; i < BLOCK_SIZE; i++) {
        if (i < 16) {
          this.temp[i] = (buffer2[i * 4] & 255) << 24 | (buffer2[i * 4 + 1] & 255) << 16 | (buffer2[i * 4 + 2] & 255) << 8 | buffer2[i * 4 + 3] & 255;
        } else {
          var u = this.temp[i - 2];
          var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
          u = this.temp[i - 15];
          var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
          this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
        }
        var t12 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (KEY[i] + this.temp[i] | 0) | 0) | 0;
        var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
        state7 = state6;
        state6 = state5;
        state5 = state4;
        state4 = state3 + t12 | 0;
        state3 = state2;
        state2 = state1;
        state1 = state0;
        state0 = t12 + t2 | 0;
      }
      state[0] += state0;
      state[1] += state1;
      state[2] += state2;
      state[3] += state3;
      state[4] += state4;
      state[5] += state5;
      state[6] += state6;
      state[7] += state7;
    };
    return RawSha2562;
  }()
);

// node_modules/.pnpm/@smithy+util-utf8@2.3.0/node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js
var fromUtf8 = (input) => new TextEncoder().encode(input);

// node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/module/convertToBuffer.js
var fromUtf82 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
  return Buffer.from(input, "utf8");
} : fromUtf8;
function convertToBuffer(data) {
  if (data instanceof Uint8Array)
    return data;
  if (typeof data === "string") {
    return fromUtf82(data);
  }
  if (ArrayBuffer.isView(data)) {
    return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
  }
  return new Uint8Array(data);
}

// node_modules/.pnpm/@aws-crypto+util@5.2.0/node_modules/@aws-crypto/util/build/module/isEmptyData.js
function isEmptyData(data) {
  if (typeof data === "string") {
    return data.length === 0;
  }
  return data.byteLength === 0;
}

// node_modules/.pnpm/@aws-crypto+sha256-js@5.2.0/node_modules/@aws-crypto/sha256-js/build/module/jsSha256.js
var Sha256 = (
  /** @class */
  function() {
    function Sha2562(secret) {
      this.secret = secret;
      this.hash = new RawSha256();
      this.reset();
    }
    Sha2562.prototype.update = function(toHash) {
      if (isEmptyData(toHash) || this.error) {
        return;
      }
      try {
        this.hash.update(convertToBuffer(toHash));
      } catch (e) {
        this.error = e;
      }
    };
    Sha2562.prototype.digestSync = function() {
      if (this.error) {
        throw this.error;
      }
      if (this.outer) {
        if (!this.outer.finished) {
          this.outer.update(this.hash.digest());
        }
        return this.outer.digest();
      }
      return this.hash.digest();
    };
    Sha2562.prototype.digest = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a2) {
          return [2, this.digestSync()];
        });
      });
    };
    Sha2562.prototype.reset = function() {
      this.hash = new RawSha256();
      if (this.secret) {
        this.outer = new RawSha256();
        var inner = bufferFromSecret(this.secret);
        var outer = new Uint8Array(BLOCK_SIZE);
        outer.set(inner);
        for (var i = 0; i < BLOCK_SIZE; i++) {
          inner[i] ^= 54;
          outer[i] ^= 92;
        }
        this.hash.update(inner);
        this.outer.update(outer);
        for (var i = 0; i < inner.byteLength; i++) {
          inner[i] = 0;
        }
      }
    };
    return Sha2562;
  }()
);
function bufferFromSecret(secret) {
  var input = convertToBuffer(secret);
  if (input.byteLength > BLOCK_SIZE) {
    var bufferHash = new RawSha256();
    bufferHash.update(input);
    input = bufferHash.digest();
  }
  var buffer2 = new Uint8Array(BLOCK_SIZE);
  buffer2.set(input);
  return buffer2;
}

// node_modules/.pnpm/@smithy+util-hex-encoding@2.0.0/node_modules/@smithy/util-hex-encoding/dist-es/index.js
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for (let i = 0; i < 256; i++) {
  let encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = `0${encodedByte}`;
  }
  SHORT_TO_HEX[i] = encodedByte;
  HEX_TO_SHORT[encodedByte] = i;
}
function toHex(bytes) {
  let out = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX[bytes[i]];
  }
  return out;
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/types.mjs
var Framework;
(function(Framework2) {
  Framework2["WebUnknown"] = "0";
  Framework2["React"] = "1";
  Framework2["NextJs"] = "2";
  Framework2["Angular"] = "3";
  Framework2["VueJs"] = "4";
  Framework2["Nuxt"] = "5";
  Framework2["Svelte"] = "6";
  Framework2["ServerSideUnknown"] = "100";
  Framework2["ReactSSR"] = "101";
  Framework2["NextJsSSR"] = "102";
  Framework2["AngularSSR"] = "103";
  Framework2["VueJsSSR"] = "104";
  Framework2["NuxtSSR"] = "105";
  Framework2["SvelteSSR"] = "106";
  Framework2["ReactNative"] = "201";
  Framework2["Expo"] = "202";
})(Framework || (Framework = {}));
var Category;
(function(Category2) {
  Category2["AI"] = "ai";
  Category2["API"] = "api";
  Category2["Auth"] = "auth";
  Category2["Analytics"] = "analytics";
  Category2["DataStore"] = "datastore";
  Category2["Geo"] = "geo";
  Category2["InAppMessaging"] = "inappmessaging";
  Category2["Interactions"] = "interactions";
  Category2["Predictions"] = "predictions";
  Category2["PubSub"] = "pubsub";
  Category2["PushNotification"] = "pushnotification";
  Category2["Storage"] = "storage";
})(Category || (Category = {}));
var AiAction;
(function(AiAction2) {
  AiAction2["CreateConversation"] = "1";
  AiAction2["GetConversation"] = "2";
  AiAction2["ListConversations"] = "3";
  AiAction2["DeleteConversation"] = "4";
  AiAction2["SendMessage"] = "5";
  AiAction2["ListMessages"] = "6";
  AiAction2["OnMessage"] = "7";
  AiAction2["Generation"] = "8";
  AiAction2["UpdateConversation"] = "9";
})(AiAction || (AiAction = {}));
var AnalyticsAction;
(function(AnalyticsAction2) {
  AnalyticsAction2["Record"] = "1";
  AnalyticsAction2["IdentifyUser"] = "2";
})(AnalyticsAction || (AnalyticsAction = {}));
var ApiAction;
(function(ApiAction2) {
  ApiAction2["GraphQl"] = "1";
  ApiAction2["Get"] = "2";
  ApiAction2["Post"] = "3";
  ApiAction2["Put"] = "4";
  ApiAction2["Patch"] = "5";
  ApiAction2["Del"] = "6";
  ApiAction2["Head"] = "7";
})(ApiAction || (ApiAction = {}));
var AuthAction;
(function(AuthAction2) {
  AuthAction2["SignUp"] = "1";
  AuthAction2["ConfirmSignUp"] = "2";
  AuthAction2["ResendSignUpCode"] = "3";
  AuthAction2["SignIn"] = "4";
  AuthAction2["FetchMFAPreference"] = "6";
  AuthAction2["UpdateMFAPreference"] = "7";
  AuthAction2["SetUpTOTP"] = "10";
  AuthAction2["VerifyTOTPSetup"] = "11";
  AuthAction2["ConfirmSignIn"] = "12";
  AuthAction2["DeleteUserAttributes"] = "15";
  AuthAction2["DeleteUser"] = "16";
  AuthAction2["UpdateUserAttributes"] = "17";
  AuthAction2["FetchUserAttributes"] = "18";
  AuthAction2["ConfirmUserAttribute"] = "22";
  AuthAction2["SignOut"] = "26";
  AuthAction2["UpdatePassword"] = "27";
  AuthAction2["ResetPassword"] = "28";
  AuthAction2["ConfirmResetPassword"] = "29";
  AuthAction2["FederatedSignIn"] = "30";
  AuthAction2["RememberDevice"] = "32";
  AuthAction2["ForgetDevice"] = "33";
  AuthAction2["FetchDevices"] = "34";
  AuthAction2["SendUserAttributeVerificationCode"] = "35";
  AuthAction2["SignInWithRedirect"] = "36";
  AuthAction2["StartWebAuthnRegistration"] = "37";
  AuthAction2["CompleteWebAuthnRegistration"] = "38";
  AuthAction2["ListWebAuthnCredentials"] = "39";
  AuthAction2["DeleteWebAuthnCredential"] = "40";
})(AuthAction || (AuthAction = {}));
var DataStoreAction;
(function(DataStoreAction2) {
  DataStoreAction2["Subscribe"] = "1";
  DataStoreAction2["GraphQl"] = "2";
})(DataStoreAction || (DataStoreAction = {}));
var GeoAction;
(function(GeoAction2) {
  GeoAction2["SearchByText"] = "0";
  GeoAction2["SearchByCoordinates"] = "1";
  GeoAction2["SearchForSuggestions"] = "2";
  GeoAction2["SearchByPlaceId"] = "3";
  GeoAction2["SaveGeofences"] = "4";
  GeoAction2["GetGeofence"] = "5";
  GeoAction2["ListGeofences"] = "6";
  GeoAction2["DeleteGeofences"] = "7";
})(GeoAction || (GeoAction = {}));
var InAppMessagingAction;
(function(InAppMessagingAction2) {
  InAppMessagingAction2["SyncMessages"] = "1";
  InAppMessagingAction2["IdentifyUser"] = "2";
  InAppMessagingAction2["NotifyMessageInteraction"] = "3";
})(InAppMessagingAction || (InAppMessagingAction = {}));
var InteractionsAction;
(function(InteractionsAction2) {
  InteractionsAction2["None"] = "0";
})(InteractionsAction || (InteractionsAction = {}));
var PredictionsAction;
(function(PredictionsAction2) {
  PredictionsAction2["Convert"] = "1";
  PredictionsAction2["Identify"] = "2";
  PredictionsAction2["Interpret"] = "3";
})(PredictionsAction || (PredictionsAction = {}));
var PubSubAction;
(function(PubSubAction2) {
  PubSubAction2["Subscribe"] = "1";
})(PubSubAction || (PubSubAction = {}));
var PushNotificationAction;
(function(PushNotificationAction2) {
  PushNotificationAction2["InitializePushNotifications"] = "1";
  PushNotificationAction2["IdentifyUser"] = "2";
})(PushNotificationAction || (PushNotificationAction = {}));
var StorageAction;
(function(StorageAction2) {
  StorageAction2["UploadData"] = "1";
  StorageAction2["DownloadData"] = "2";
  StorageAction2["List"] = "3";
  StorageAction2["Copy"] = "4";
  StorageAction2["Remove"] = "5";
  StorageAction2["GetProperties"] = "6";
  StorageAction2["GetUrl"] = "7";
  StorageAction2["GetDataAccess"] = "8";
  StorageAction2["ListCallerAccessGrants"] = "9";
})(StorageAction || (StorageAction = {}));

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/version.mjs
var version = "6.15.3";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/helpers.mjs
var globalExists = () => {
  return typeof global !== "undefined";
};
var windowExists = () => {
  return typeof window !== "undefined";
};
var documentExists = () => {
  return typeof document !== "undefined";
};
var processExists = () => {
  return typeof process !== "undefined";
};
var keyPrefixMatch = (object, prefix) => {
  return !!Object.keys(object).find((key) => key.startsWith(prefix));
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/React.mjs
function reactWebDetect() {
  const elementKeyPrefixedWithReact = (key) => {
    return key.startsWith("_react") || key.startsWith("__react");
  };
  const elementIsReactEnabled = (element) => {
    return Object.keys(element).find(elementKeyPrefixedWithReact);
  };
  const allElementsWithId = () => Array.from(document.querySelectorAll("[id]"));
  return documentExists() && allElementsWithId().some(elementIsReactEnabled);
}
function reactSSRDetect() {
  return processExists() && typeof process.env !== "undefined" && !!Object.keys(process.env).find((key) => key.includes("react"));
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Vue.mjs
function vueWebDetect() {
  return windowExists() && keyPrefixMatch(window, "__VUE");
}
function vueSSRDetect() {
  return globalExists() && keyPrefixMatch(global, "__VUE");
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Svelte.mjs
function svelteWebDetect() {
  return windowExists() && keyPrefixMatch(window, "__SVELTE");
}
function svelteSSRDetect() {
  return processExists() && typeof process.env !== "undefined" && !!Object.keys(process.env).find((key) => key.includes("svelte"));
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Next.mjs
function nextWebDetect() {
  return windowExists() && window.next && typeof window.next === "object";
}
function nextSSRDetect() {
  return globalExists() && (keyPrefixMatch(global, "__next") || keyPrefixMatch(global, "__NEXT"));
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Nuxt.mjs
function nuxtWebDetect() {
  return windowExists() && (window.__NUXT__ !== void 0 || window.$nuxt !== void 0);
}
function nuxtSSRDetect() {
  return globalExists() && typeof global.__NUXT_PATHS__ !== "undefined";
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Angular.mjs
function angularWebDetect() {
  const angularVersionSetInDocument = Boolean(documentExists() && document.querySelector("[ng-version]"));
  const angularContentSetInWindow = Boolean(windowExists() && typeof window.ng !== "undefined");
  return angularVersionSetInDocument || angularContentSetInWindow;
}
function angularSSRDetect() {
  return processExists() && typeof process.env === "object" && process.env.npm_lifecycle_script?.startsWith("ng ") || false;
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/ReactNative.mjs
function reactNativeDetect() {
  return typeof navigator !== "undefined" && typeof navigator.product !== "undefined" && navigator.product === "ReactNative";
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Expo.mjs
function expoDetect() {
  return globalExists() && typeof global.expo !== "undefined";
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/Web.mjs
function webDetect() {
  return windowExists();
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detection/index.mjs
var detectionMap = [
  // First, detect mobile
  { platform: Framework.Expo, detectionMethod: expoDetect },
  { platform: Framework.ReactNative, detectionMethod: reactNativeDetect },
  // Next, detect web frameworks
  { platform: Framework.NextJs, detectionMethod: nextWebDetect },
  { platform: Framework.Nuxt, detectionMethod: nuxtWebDetect },
  { platform: Framework.Angular, detectionMethod: angularWebDetect },
  { platform: Framework.React, detectionMethod: reactWebDetect },
  { platform: Framework.VueJs, detectionMethod: vueWebDetect },
  { platform: Framework.Svelte, detectionMethod: svelteWebDetect },
  { platform: Framework.WebUnknown, detectionMethod: webDetect },
  // Last, detect ssr frameworks
  { platform: Framework.NextJsSSR, detectionMethod: nextSSRDetect },
  { platform: Framework.NuxtSSR, detectionMethod: nuxtSSRDetect },
  { platform: Framework.ReactSSR, detectionMethod: reactSSRDetect },
  { platform: Framework.VueJsSSR, detectionMethod: vueSSRDetect },
  { platform: Framework.AngularSSR, detectionMethod: angularSSRDetect },
  { platform: Framework.SvelteSSR, detectionMethod: svelteSSRDetect }
];
function detect() {
  return detectionMap.find((detectionEntry) => detectionEntry.detectionMethod())?.platform || Framework.ServerSideUnknown;
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/detectFramework.mjs
var frameworkCache;
var frameworkChangeObservers = [];
var resetTriggered = false;
var SSR_RESET_TIMEOUT = 10;
var WEB_RESET_TIMEOUT = 10;
var PRIME_FRAMEWORK_DELAY = 1e3;
var detectFramework = () => {
  if (!frameworkCache) {
    frameworkCache = detect();
    if (resetTriggered) {
      while (frameworkChangeObservers.length) {
        frameworkChangeObservers.pop()?.();
      }
    } else {
      frameworkChangeObservers.forEach((fcn) => {
        fcn();
      });
    }
    resetTimeout(Framework.ServerSideUnknown, SSR_RESET_TIMEOUT);
    resetTimeout(Framework.WebUnknown, WEB_RESET_TIMEOUT);
  }
  return frameworkCache;
};
var observeFrameworkChanges = (fcn) => {
  if (resetTriggered) {
    return;
  }
  frameworkChangeObservers.push(fcn);
};
function clearCache() {
  frameworkCache = void 0;
}
function resetTimeout(framework, delay2) {
  if (frameworkCache === framework && !resetTriggered) {
    setTimeout(() => {
      clearCache();
      resetTriggered = true;
      setTimeout(detectFramework, PRIME_FRAMEWORK_DELAY);
    }, delay2);
  }
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/customUserAgent.mjs
var customUserAgentState = {};
var setCustomUserAgent = (input) => {
  customUserAgentState[input.category] = input.apis.reduce((acc, api2) => ({
    ...acc,
    [api2]: {
      refCount: acc[api2]?.refCount ? acc[api2].refCount + 1 : 1,
      additionalDetails: input.additionalDetails
    }
  }), customUserAgentState[input.category] ?? {});
  let cleanUpCallbackCalled = false;
  const cleanUpCallback = () => {
    if (cleanUpCallbackCalled) {
      return;
    }
    cleanUpCallbackCalled = true;
    input.apis.forEach((api2) => {
      const apiRefCount = customUserAgentState[input.category][api2].refCount;
      if (apiRefCount > 1) {
        customUserAgentState[input.category][api2].refCount = apiRefCount - 1;
      } else {
        delete customUserAgentState[input.category][api2];
        if (!Object.keys(customUserAgentState[input.category]).length) {
          delete customUserAgentState[input.category];
        }
      }
    });
  };
  return cleanUpCallback;
};
var getCustomUserAgent = (category, api2) => customUserAgentState[category]?.[api2]?.additionalDetails;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Platform/index.mjs
var BASE_USER_AGENT = `aws-amplify`;
var sanitizeAmplifyVersion = (amplifyVersion) => amplifyVersion.replace(/\+.*/, "");
var PlatformBuilder = class {
  constructor() {
    this.userAgent = `${BASE_USER_AGENT}/${sanitizeAmplifyVersion(version)}`;
  }
  get framework() {
    return detectFramework();
  }
  get isReactNative() {
    return this.framework === Framework.ReactNative || this.framework === Framework.Expo;
  }
  observeFrameworkChanges(fcn) {
    observeFrameworkChanges(fcn);
  }
};
var Platform = new PlatformBuilder();
var getAmplifyUserAgentObject = ({ category, action } = {}) => {
  const userAgent = [
    [BASE_USER_AGENT, sanitizeAmplifyVersion(version)]
  ];
  if (category) {
    userAgent.push([category, action]);
  }
  userAgent.push(["framework", detectFramework()]);
  if (category && action) {
    const customState = getCustomUserAgent(category, action);
    if (customState) {
      customState.forEach((state) => {
        userAgent.push(state);
      });
    }
  }
  return userAgent;
};
var getAmplifyUserAgent = (customUserAgentDetails) => {
  const userAgent = getAmplifyUserAgentObject(customUserAgentDetails);
  const userAgentString = userAgent.map(([agentKey, agentValue]) => agentKey && agentValue ? `${agentKey}/${agentValue}` : agentKey).join(" ");
  return userAgentString;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/BackgroundProcessManager/types.mjs
var BackgroundProcessManagerState;
(function(BackgroundProcessManagerState2) {
  BackgroundProcessManagerState2["Open"] = "Open";
  BackgroundProcessManagerState2["Closing"] = "Closing";
  BackgroundProcessManagerState2["Closed"] = "Closed";
})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a2, e_2, _b2;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a2 = _parentage_1.return)) _a2.call(_parentage_1);
            } finally {
              if (e_1) throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b2 = _finalizers_1.return)) _b2.call(_finalizers_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a2;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a2 = this._finalizers) !== null && _a2 !== void 0 ? _a2 : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty2 = new Subscription2();
    empty2.closed = true;
    return empty2;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/noop.js
function noop() {
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/errorContext.js
var context = null;
function errorContext(cb2) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb2();
    if (isRoot) {
      var _a2 = context, errorThrown = _a2.errorThrown, error = _a2.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb2();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn2, thisArg) {
  return _bind.call(fn2, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/symbol/observable.js
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/identity.js
function identity(x) {
  return x;
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn2) {
      return fn2(prev);
    }, input);
  };
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a2 = _this, operator = _a2.operator, source = _a2.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a2;
    return (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a2;
  return (_a2 = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a2 !== void 0 ? _a2 : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init2) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init2(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a2;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a2 = this.onFinalize) === null || _a2 === void 0 ? void 0 : _a2.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  delegate: void 0
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  return new Observable(function(subscriber) {
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var id2 = 0;
    var run = function() {
      if (!subscriber.closed) {
        id2 = animationFrameProvider.requestAnimationFrame(function(timestamp2) {
          id2 = 0;
          var now = provider.now();
          subscriber.next({
            timestamp: timestampProvider ? now : timestamp2,
            elapsed: now - start
          });
          run();
        });
      }
    };
    run();
    return function() {
      if (id2) {
        animationFrameProvider.cancelAnimationFrame(id2);
      }
    };
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a2;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b2 = __values(_this.currentObservers), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var observer = _c2.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a2 = _b2.return)) _a2.call(_b2);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a2;
      return ((_a2 = this.observers) === null || _a2 === void 0 ? void 0 : _a2.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a2 = this, hasError = _a2.hasError, isStopped = _a2.isStopped, observers = _a2.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, isStopped = _a2.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a2, _b2;
    (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.next) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a2, _b2;
    (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.error) === null || _b2 === void 0 ? void 0 : _b2.call(_a2, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a2, _b2;
    (_b2 = (_a2 = this.destination) === null || _a2 === void 0 ? void 0 : _a2.complete) === null || _b2 === void 0 ? void 0 : _b2.call(_a2);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a2, _b2;
    return (_b2 = (_a2 = this.source) === null || _a2 === void 0 ? void 0 : _a2.subscribe(subscriber)) !== null && _b2 !== void 0 ? _b2 : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a2 = this, hasError = _a2.hasError, thrownError = _a2.thrownError, _value = _a2._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a2 = this, isStopped = _a2.isStopped, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow, _timestampProvider = _a2._timestampProvider, _windowTime = _a2._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a2 = this, _infiniteTimeWindow = _a2._infiniteTimeWindow, _buffer = _a2._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a2 = this, _bufferSize = _a2._bufferSize, _timestampProvider = _a2._timestampProvider, _buffer = _a2._buffer, _infiniteTimeWindow = _a2._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a2 = this, hasError = _a2.hasError, _hasValue = _a2._hasValue, _value = _a2._value, thrownError = _a2.thrownError, isStopped = _a2.isStopped, _isComplete = _a2._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a2 = this, _hasValue = _a2._hasValue, _value = _a2._value, _isComplete = _a2._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    var _a2;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id2 = this.id;
    var scheduler = this.scheduler;
    if (id2 != null) {
      this.id = this.recycleAsyncId(scheduler, id2, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = (_a2 = this.id) !== null && _a2 !== void 0 ? _a2 : this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id2, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id2;
    }
    if (id2 != null) {
      intervalProvider.clearInterval(id2);
    }
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay2);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a2 = this, id2 = _a2.id, scheduler = _a2.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id2 != null) {
        this.id = this.recycleAsyncId(scheduler, id2, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb2) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb2();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id2, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id2, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id2, delay2) {
    var _a2;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id2, delay2);
    }
    var actions = scheduler.actions;
    if (id2 != null && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id2) {
      immediateProvider.clearImmediate(id2);
      if (scheduler._scheduled === id2) {
        scheduler._scheduled = void 0;
      }
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Scheduler.js
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler2.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/async.js
var asyncScheduler = new AsyncScheduler(AsyncAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id2, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id2, delay2);
    }
    scheduler.flush(this);
    return 0;
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id2, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id2, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id2, delay2) {
    var _a2;
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null ? delay2 > 0 : this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id2, delay2);
    }
    var actions = scheduler.actions;
    if (id2 != null && id2 === scheduler._scheduled && ((_a2 = actions[actions.length - 1]) === null || _a2 === void 0 ? void 0 : _a2.id) !== id2) {
      animationFrameProvider.cancelAnimationFrame(id2);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId;
    if (action) {
      flushId = action.id;
    } else {
      flushId = this._scheduled;
      this._scheduled = void 0;
    }
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a2 = this, actions = _a2.actions, maxFrames = _a2.maxFrames;
    var error;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id2, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return 1;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id2, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
function isInteropObservable(input) {
  return isFunction(input[observable]);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a2, value, done;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          reader = readableStream.getReader();
          _b2.label = 1;
        case 1:
          _b2.trys.push([1, , 9, 10]);
          _b2.label = 2;
        case 2:
          if (false) return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a2 = _b2.sent(), value = _a2.value, done = _a2.done;
          if (!done) return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b2.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b2.sent()];
        case 7:
          _b2.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a2;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a2 = iterable_1.return)) _a2.call(iterable_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process2(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process2(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a2;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b2) {
      switch (_b2.label) {
        case 0:
          _b2.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b2.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b2.sent(), !asyncIterable_1_1.done)) return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b2.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b2.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b2.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a2 = asyncIterable_1.return))) return [3, 8];
          return [4, _a2.call(asyncIterable_1)];
        case 7:
          _b2.sent();
          _b2.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2) throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a2;
        var value;
        var done;
        try {
          _a2 = iterator2.next(), value = _a2.value, done = _a2.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init2 = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init2, 0, subscriber);
  } : init2);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a2 = this, kind = _a2.kind, value = _a2.value, error = _a2.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error, complete) {
    var _a2;
    return isFunction((_a2 = nextOrObserver) === null || _a2 === void 0 ? void 0 : _a2.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a2 = this, kind = _a2.kind, value = _a2.value, error = _a2.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a2, _b2, _c2;
  var _d2 = notification, kind = _d2.kind, value = _d2.value, error = _d2.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a2 = observer.next) === null || _a2 === void 0 ? void 0 : _a2.call(observer, value) : kind === "E" ? (_b2 = observer.error) === null || _b2 === void 0 ? void 0 : _b2.call(observer, error) : (_c2 = observer.complete) === null || _c2 === void 0 ? void 0 : _c2.call(observer);
}

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message;
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message) {
    _super(this);
    this.name = "SequenceError";
    this.message = message;
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info;
  };
});

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray = Array.isArray;

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
var isArray2 = Array.isArray;
var objectProto = Object.prototype;

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/never.js
var NEVER = new Observable(noop);

// node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
var isArray3 = Array.isArray;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/isWebWorker.mjs
var isWebWorker = () => {
  if (typeof self === "undefined") {
    return false;
  }
  const selfContext = self;
  return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Reachability/Reachability.mjs
var Reachability = class _Reachability {
  networkMonitor(_) {
    const globalObj = isWebWorker() ? self : typeof window !== "undefined" && window;
    if (!globalObj) {
      return from([{ online: true }]);
    }
    return new Observable((observer) => {
      observer.next({ online: globalObj.navigator.onLine });
      const notifyOnline = () => {
        observer.next({ online: true });
      };
      const notifyOffline = () => {
        observer.next({ online: false });
      };
      globalObj.addEventListener("online", notifyOnline);
      globalObj.addEventListener("offline", notifyOffline);
      _Reachability._observers.push(observer);
      return () => {
        globalObj.removeEventListener("online", notifyOnline);
        globalObj.removeEventListener("offline", notifyOffline);
        _Reachability._observers = _Reachability._observers.filter((_observer) => _observer !== observer);
      };
    });
  }
  // expose observers to simulate offline mode for integration testing
  static _observerOverride(status) {
    for (const observer of this._observers) {
      if (observer.closed) {
        this._observers = this._observers.filter((_observer) => _observer !== observer);
        continue;
      }
      observer?.next && observer.next(status);
    }
  }
};
Reachability._observers = [];

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/isBrowser.mjs
var isBrowser = () => typeof window !== "undefined" && typeof window.document !== "undefined";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/sessionListener/SessionListener.mjs
var stateChangeListeners = /* @__PURE__ */ new Set();
var SessionListener = class {
  constructor() {
    this.listenerActive = false;
    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
    if (isBrowser()) {
      document.addEventListener("visibilitychange", this.handleVisibilityChange, false);
      this.listenerActive = true;
    }
  }
  addStateChangeListener(listener, notifyOnAdd = false) {
    if (!this.listenerActive) {
      return;
    }
    stateChangeListeners.add(listener);
    if (notifyOnAdd) {
      listener(this.getSessionState());
    }
  }
  removeStateChangeListener(handler) {
    if (!this.listenerActive) {
      return;
    }
    stateChangeListeners.delete(handler);
  }
  handleVisibilityChange() {
    this.notifyHandlers();
  }
  notifyHandlers() {
    const sessionState = this.getSessionState();
    stateChangeListeners.forEach((listener) => {
      listener(sessionState);
    });
  }
  getSessionState() {
    if (isBrowser() && document.visibilityState !== "hidden") {
      return "started";
    }
    return "ended";
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/sessionListener/index.mjs
var sessionListener = new SessionListener();

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/Auth/index.mjs
var logger5 = new ConsoleLogger("Auth");
var AuthClass = class {
  /**
   * Configure Auth category
   *
   * @internal
   *
   * @param authResourcesConfig - Resources configurations required by Auth providers.
   * @param authOptions - Client options used by library
   *
   * @returns void
   */
  configure(authResourcesConfig, authOptions) {
    this.authConfig = authResourcesConfig;
    this.authOptions = authOptions;
    if (authResourcesConfig && authResourcesConfig.Cognito?.userPoolEndpoint) {
      logger5.warn(getCustomEndpointWarningMessage("Amazon Cognito User Pool"));
    }
    if (authResourcesConfig && authResourcesConfig.Cognito?.identityPoolEndpoint) {
      logger5.warn(getCustomEndpointWarningMessage("Amazon Cognito Identity Pool"));
    }
  }
  /**
   * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it
   * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh
   * with `{ forceRefresh: true }` input.
   *
   * @param options - Options configuring the fetch behavior.
   *
   * @returns Promise of current auth session {@link AuthSession}.
   */
  async fetchAuthSession(options = {}) {
    let credentialsAndIdentityId;
    let userSub;
    const tokens = await this.getTokens(options);
    if (tokens) {
      userSub = tokens.accessToken?.payload?.sub;
      credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({
        authConfig: this.authConfig,
        tokens,
        authenticated: true,
        forceRefresh: options.forceRefresh
      });
    } else {
      credentialsAndIdentityId = await this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({
        authConfig: this.authConfig,
        authenticated: false,
        forceRefresh: options.forceRefresh
      });
    }
    return {
      tokens,
      credentials: credentialsAndIdentityId?.credentials,
      identityId: credentialsAndIdentityId?.identityId,
      userSub
    };
  }
  async clearCredentials() {
    await this.authOptions?.credentialsProvider?.clearCredentialsAndIdentityId();
  }
  async getTokens(options) {
    return await this.authOptions?.tokenProvider?.getTokens(options) ?? void 0;
  }
};
var getCustomEndpointWarningMessage = (target) => `You are using a custom Amazon ${target} endpoint, ensure the endpoint is correct.`;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/Amplify.mjs
var AmplifyClass = class {
  constructor() {
    this.oAuthListener = void 0;
    this.isConfigured = false;
    this.resourcesConfig = {};
    this.libraryOptions = {};
    this.Auth = new AuthClass();
  }
  /**
   * Configures Amplify for use with your back-end resources.
   *
   * @remarks
   * This API does not perform any merging of either `resourcesConfig` or `libraryOptions`. The most recently
   * provided values will be used after configuration.
   *
   * @remarks
   * `configure` can be used to specify additional library options where available for supported categories.
   *
   * @param resourceConfig - Back-end resource configuration. Typically provided via the `aws-exports.js` file.
   * @param libraryOptions - Additional options for customizing the behavior of the library.
   */
  configure(resourcesConfig, libraryOptions) {
    const resolvedResourceConfig = parseAmplifyConfig(resourcesConfig);
    this.resourcesConfig = resolvedResourceConfig;
    if (libraryOptions) {
      this.libraryOptions = libraryOptions;
    }
    this.resourcesConfig = deepFreeze(this.resourcesConfig);
    this.Auth.configure(this.resourcesConfig.Auth, this.libraryOptions.Auth);
    Hub.dispatch("core", {
      event: "configure",
      data: this.resourcesConfig
    }, "Configure", AMPLIFY_SYMBOL);
    this.notifyOAuthListener();
    this.isConfigured = true;
  }
  /**
   * Provides access to the current back-end resource configuration for the Library.
   *
   * @returns Returns the immutable back-end resource configuration.
   */
  getConfig() {
    if (!this.isConfigured) {
      console.warn(`Amplify has not been configured. Please call Amplify.configure() before using this service.`);
    }
    return this.resourcesConfig;
  }
  /** @internal */
  [ADD_OAUTH_LISTENER](listener) {
    if (this.resourcesConfig.Auth?.Cognito.loginWith?.oauth) {
      listener(this.resourcesConfig.Auth?.Cognito);
    } else {
      this.oAuthListener = listener;
    }
  }
  notifyOAuthListener() {
    if (!this.resourcesConfig.Auth?.Cognito.loginWith?.oauth || !this.oAuthListener) {
      return;
    }
    this.oAuthListener(this.resourcesConfig.Auth?.Cognito);
    this.oAuthListener = void 0;
  }
};
var Amplify = new AmplifyClass();

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/apis/internal/fetchAuthSession.mjs
var fetchAuthSession = (amplify, options) => {
  return amplify.Auth.fetchAuthSession(options);
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/apis/fetchAuthSession.mjs
var fetchAuthSession2 = (options) => {
  return fetchAuthSession(Amplify, options);
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/singleton/apis/clearCredentials.mjs
function clearCredentials() {
  return Amplify.Auth.clearCredentials();
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/serde/responseInfo.mjs
var parseMetadata = (response) => {
  const { headers, statusCode } = response;
  return {
    ...isMetadataBearer(response) ? response.$metadata : {},
    httpStatusCode: statusCode,
    requestId: headers["x-amzn-requestid"] ?? headers["x-amzn-request-id"] ?? headers["x-amz-request-id"],
    extendedRequestId: headers["x-amz-id-2"],
    cfId: headers["x-amz-cf-id"]
  };
};
var isMetadataBearer = (response) => typeof response?.$metadata === "object";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/serde/json.mjs
var parseJsonError = async (response) => {
  if (!response || response.statusCode < 300) {
    return;
  }
  const body = await parseJsonBody(response);
  const sanitizeErrorCode = (rawValue) => {
    const [cleanValue] = rawValue.toString().split(/[,:]+/);
    if (cleanValue.includes("#")) {
      return cleanValue.split("#")[1];
    }
    return cleanValue;
  };
  const code = sanitizeErrorCode(response.headers["x-amzn-errortype"] ?? body.code ?? body.__type ?? "UnknownError");
  const message = body.message ?? body.Message ?? "Unknown error";
  const error = new Error(message);
  return Object.assign(error, {
    name: code,
    $metadata: parseMetadata(response)
  });
};
var parseJsonBody = async (response) => {
  if (!response.body) {
    throw new Error("Missing response payload");
  }
  const output = await response.body.json();
  return Object.assign(output, {
    $metadata: parseMetadata(response)
  });
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/internal/composeServiceApi.mjs
var composeServiceApi = (transferHandler, serializer, deserializer, defaultConfig3) => {
  return async (config2, input) => {
    const resolvedConfig = {
      ...defaultConfig3,
      ...config2
    };
    const endpoint = await resolvedConfig.endpointResolver(resolvedConfig, input);
    const request = await serializer(input, endpoint);
    const response = await transferHandler(request, {
      ...resolvedConfig
    });
    return deserializer(response);
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/retry/constants.mjs
var MAX_DELAY_MS = 5 * 60 * 1e3;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/retry/jitteredBackoff.mjs
function jitteredBackoff(maxDelayMs = MAX_DELAY_MS) {
  const BASE_TIME_MS = 100;
  const JITTER_FACTOR = 100;
  return (attempt) => {
    const delay2 = 2 ** attempt * BASE_TIME_MS + JITTER_FACTOR * Math.random();
    return delay2 > maxDelayMs ? false : delay2;
  };
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/constants.mjs
var DEFAULT_RETRY_ATTEMPTS = 3;
var AMZ_SDK_INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var AMZ_SDK_REQUEST_HEADER = "amz-sdk-request";
var DEFAULT_MAX_DELAY_MS = 5 * 60 * 1e3;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/jitteredBackoff.mjs
var jitteredBackoff2 = (attempt) => {
  const delayFunction = jitteredBackoff(DEFAULT_MAX_DELAY_MS);
  const delay2 = delayFunction(attempt);
  return delay2 === false ? DEFAULT_MAX_DELAY_MS : delay2;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/isClockSkewError.mjs
var CLOCK_SKEW_ERROR_CODES = [
  "AuthFailure",
  "InvalidSignatureException",
  "RequestExpired",
  "RequestInTheFuture",
  "RequestTimeTooSkewed",
  "SignatureDoesNotMatch",
  "BadRequestException"
  // API Gateway
];
var isClockSkewError = (errorCode) => !!errorCode && CLOCK_SKEW_ERROR_CODES.includes(errorCode);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/defaultRetryDecider.mjs
var getRetryDecider = (errorParser) => async (response, error) => {
  const parsedError = error ?? await errorParser(response) ?? void 0;
  const errorCode = parsedError?.code || parsedError?.name;
  const statusCode = response?.statusCode;
  const isRetryable = isConnectionError(error) || isThrottlingError(statusCode, errorCode) || isClockSkewError(errorCode) || isServerSideError(statusCode, errorCode);
  return {
    retryable: isRetryable
  };
};
var THROTTLING_ERROR_CODES = [
  "BandwidthLimitExceeded",
  "EC2ThrottledException",
  "LimitExceededException",
  "PriorRequestNotComplete",
  "ProvisionedThroughputExceededException",
  "RequestLimitExceeded",
  "RequestThrottled",
  "RequestThrottledException",
  "SlowDown",
  "ThrottledException",
  "Throttling",
  "ThrottlingException",
  "TooManyRequestsException"
];
var TIMEOUT_ERROR_CODES = [
  "TimeoutError",
  "RequestTimeout",
  "RequestTimeoutException"
];
var isThrottlingError = (statusCode, errorCode) => statusCode === 429 || !!errorCode && THROTTLING_ERROR_CODES.includes(errorCode);
var isConnectionError = (error) => [
  AmplifyErrorCode.NetworkError,
  // TODO(vNext): unify the error code `ERR_NETWORK` used by the Storage XHR handler
  "ERR_NETWORK"
].includes(error?.name);
var isServerSideError = (statusCode, errorCode) => !!statusCode && [500, 502, 503, 504].includes(statusCode) || !!errorCode && TIMEOUT_ERROR_CODES.includes(errorCode);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/serviceClients/cognitoIdentity/constants.mjs
var COGNITO_IDENTITY_SERVICE_NAME = "cognito-identity";
var DEFAULT_SERVICE_CLIENT_API_CONFIG = {
  service: COGNITO_IDENTITY_SERVICE_NAME,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  cache: "no-store"
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/retryMiddleware.mjs
var retryMiddlewareFactory = ({ maxAttempts = DEFAULT_RETRY_ATTEMPTS, retryDecider, computeDelay, abortSignal }) => {
  if (maxAttempts < 1) {
    throw new Error("maxAttempts must be greater than 0");
  }
  return (next, context2) => async function retryMiddleware(request) {
    let error;
    let attemptsCount = context2.attemptsCount ?? 0;
    let response;
    const handleTerminalErrorOrResponse = () => {
      if (response) {
        addOrIncrementMetadataAttempts(response, attemptsCount);
        return response;
      } else {
        addOrIncrementMetadataAttempts(error, attemptsCount);
        throw error;
      }
    };
    while (!abortSignal?.aborted && attemptsCount < maxAttempts) {
      try {
        response = await next(request);
        error = void 0;
      } catch (e) {
        error = e;
        response = void 0;
      }
      attemptsCount = (context2.attemptsCount ?? 0) > attemptsCount ? context2.attemptsCount ?? 0 : attemptsCount + 1;
      context2.attemptsCount = attemptsCount;
      const { isCredentialsExpiredError, retryable } = await retryDecider(response, error, context2);
      if (retryable) {
        context2.isCredentialsExpired = !!isCredentialsExpiredError;
        if (!abortSignal?.aborted && attemptsCount < maxAttempts) {
          const delay2 = computeDelay(attemptsCount);
          await cancellableSleep(delay2, abortSignal);
        }
        continue;
      } else {
        return handleTerminalErrorOrResponse();
      }
    }
    if (abortSignal?.aborted) {
      throw new Error("Request aborted.");
    } else {
      return handleTerminalErrorOrResponse();
    }
  };
};
var cancellableSleep = (timeoutMs, abortSignal) => {
  if (abortSignal?.aborted) {
    return Promise.resolve();
  }
  let timeoutId;
  let sleepPromiseResolveFn;
  const sleepPromise = new Promise((resolve) => {
    sleepPromiseResolveFn = resolve;
    timeoutId = setTimeout(resolve, timeoutMs);
  });
  abortSignal?.addEventListener("abort", function cancelSleep(_) {
    clearTimeout(timeoutId);
    abortSignal?.removeEventListener("abort", cancelSleep);
    sleepPromiseResolveFn();
  });
  return sleepPromise;
};
var addOrIncrementMetadataAttempts = (nextHandlerOutput, attempts) => {
  if (Object.prototype.toString.call(nextHandlerOutput) !== "[object Object]") {
    return;
  }
  nextHandlerOutput.$metadata = {
    ...nextHandlerOutput.$metadata ?? {},
    attempts
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/amplifyUuid/index.mjs
var amplifyUuid = v4_default;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/amzSdkInvocationIdHeaderMiddleware.mjs
var amzSdkInvocationIdHeaderMiddlewareFactory = () => (next) => {
  return async function amzSdkInvocationIdHeaderMiddleware(request) {
    if (!request.headers[AMZ_SDK_INVOCATION_ID_HEADER]) {
      request.headers[AMZ_SDK_INVOCATION_ID_HEADER] = amplifyUuid();
    }
    return next(request);
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/retry/amzSdkRequestHeaderMiddleware.mjs
var amzSdkRequestHeaderMiddlewareFactory = ({ maxAttempts = DEFAULT_RETRY_ATTEMPTS }) => (next, context2) => {
  return async function amzSdkRequestHeaderMiddleware(request) {
    const attemptsCount = context2.attemptsCount ?? 0;
    request.headers[AMZ_SDK_REQUEST_HEADER] = `attempt=${attemptsCount + 1}; max=${maxAttempts}`;
    return next(request);
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/userAgent/middleware.mjs
var userAgentMiddlewareFactory = ({ userAgentHeader = "x-amz-user-agent", userAgentValue = "" }) => (next) => {
  return async function userAgentMiddleware(request) {
    if (userAgentValue.trim().length === 0) {
      const result = await next(request);
      return result;
    } else {
      const headerName = userAgentHeader.toLowerCase();
      request.headers[headerName] = request.headers[headerName] ? `${request.headers[headerName]} ${userAgentValue}` : userAgentValue;
      const response = await next(request);
      return response;
    }
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/internal/composeTransferHandler.mjs
var composeTransferHandler = (coreHandler, middleware) => (request, options) => {
  const context2 = {};
  let composedHandler = (composeHandlerRequest) => coreHandler(composeHandlerRequest, options);
  for (let i = middleware.length - 1; i >= 0; i--) {
    const m = middleware[i];
    const resolvedMiddleware = m(options);
    composedHandler = resolvedMiddleware(composedHandler, context2);
  }
  return composedHandler(request);
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/utils/memoization.mjs
var withMemoization = (payloadAccessor) => {
  let cached;
  return () => {
    if (!cached) {
      cached = payloadAccessor();
    }
    return cached;
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/handlers/fetch.mjs
var shouldSendBody = (method) => !["HEAD", "GET", "DELETE"].includes(method.toUpperCase());
var fetchTransferHandler = async ({ url, method, headers, body }, { abortSignal, cache, withCrossDomainCredentials }) => {
  let resp;
  try {
    resp = await fetch(url, {
      method,
      headers,
      body: shouldSendBody(method) ? body : void 0,
      signal: abortSignal,
      cache,
      credentials: withCrossDomainCredentials ? "include" : "same-origin"
    });
  } catch (e) {
    if (e instanceof TypeError) {
      throw new AmplifyError({
        name: AmplifyErrorCode.NetworkError,
        message: "A network error has occurred.",
        underlyingError: e
      });
    }
    throw e;
  }
  const responseHeaders = {};
  resp.headers?.forEach((value, key) => {
    responseHeaders[key.toLowerCase()] = value;
  });
  const httpResponse = {
    statusCode: resp.status,
    headers: responseHeaders,
    body: null
  };
  const bodyWithMixin = Object.assign(resp.body ?? {}, {
    text: withMemoization(() => resp.text()),
    blob: withMemoization(() => resp.blob()),
    json: withMemoization(() => resp.json())
  });
  return {
    ...httpResponse,
    body: bodyWithMixin
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/handlers/aws/unauthenticated.mjs
var unauthenticatedHandler = composeTransferHandler(fetchTransferHandler, [
  userAgentMiddlewareFactory,
  amzSdkInvocationIdHeaderMiddlewareFactory,
  retryMiddlewareFactory,
  amzSdkRequestHeaderMiddlewareFactory
]);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/middleware/createDisableCacheMiddleware.mjs
var createDisableCacheMiddleware = () => (next) => async function disableCacheMiddleware(request) {
  request.headers["cache-control"] = "no-store";
  return next(request);
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/serviceClients/cognitoIdentity/handler/cognitoIdentityTransferHandler.mjs
var cognitoIdentityTransferHandler = composeTransferHandler(unauthenticatedHandler, [createDisableCacheMiddleware]);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/serviceClients/cognitoIdentity/serde/createClientSerializer.mjs
var createClientSerializer = (operation) => (input, endpoint) => {
  const headers = getSharedHeaders(operation);
  const body = JSON.stringify(input);
  return buildHttpRpcRequest(endpoint, headers, body);
};
var getSharedHeaders = (operation) => ({
  "content-type": "application/x-amz-json-1.1",
  "x-amz-target": `AWSCognitoIdentityService.${operation}`
});
var buildHttpRpcRequest = ({ url }, headers, body) => ({
  headers,
  url,
  body,
  method: "POST"
});

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/serviceClients/cognitoIdentity/createGetCredentialsForIdentityClient.mjs
var createGetCredentialsForIdentityClient = (config2) => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer("GetCredentialsForIdentity"), getCredentialsForIdentityDeserializer, {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2,
  userAgentValue: getAmplifyUserAgent()
});
var getCredentialsForIdentityDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error = await parseJsonError(response);
    throw error;
  }
  const body = await parseJsonBody(response);
  return {
    IdentityId: body.IdentityId,
    Credentials: deserializeCredentials(body.Credentials),
    $metadata: parseMetadata(response)
  };
};
var deserializeCredentials = ({ Expiration, ...rest } = {}) => ({
  ...rest,
  Expiration: Expiration && new Date(Expiration * 1e3)
});

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/serviceClients/cognitoIdentity/createGetIdClient.mjs
var createGetIdClient = (config2) => composeServiceApi(cognitoIdentityTransferHandler, createClientSerializer("GetId"), getIdDeserializer, {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,
  ...config2,
  userAgentValue: getAmplifyUserAgent()
});
var getIdDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error = await parseJsonError(response);
    throw error;
  }
  const body = await parseJsonBody(response);
  return {
    IdentityId: body.IdentityId,
    $metadata: parseMetadata(response)
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/endpoints/partitions.mjs
var defaultPartition = {
  id: "aws",
  outputs: {
    dnsSuffix: "amazonaws.com"
  },
  regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
  regions: ["aws-global"]
};
var partitionsInfo = {
  partitions: [
    defaultPartition,
    {
      id: "aws-cn",
      outputs: {
        dnsSuffix: "amazonaws.com.cn"
      },
      regionRegex: "^cn\\-\\w+\\-\\d+$",
      regions: ["aws-cn-global"]
    }
  ]
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/endpoints/getDnsSuffix.mjs
var getDnsSuffix = (region) => {
  const { partitions } = partitionsInfo;
  for (const { regions, outputs, regionRegex } of partitions) {
    const regex = new RegExp(regionRegex);
    if (regions.includes(region) || regex.test(region)) {
      return outputs.dnsSuffix;
    }
  }
  return defaultPartition.outputs.dnsSuffix;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/amplifyUrl/index.mjs
var AmplifyUrl = URL;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/foundation/factories/serviceClients/cognitoIdentity/cognitoIdentityPoolEndpointResolver.mjs
var cognitoIdentityPoolEndpointResolver = ({ region }) => ({
  url: new AmplifyUrl(`https://${COGNITO_IDENTITY_SERVICE_NAME}.${region}.${getDnsSuffix(region)}`)
});

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/errors/PlatformNotSupportedError.mjs
var PlatformNotSupportedError = class extends AmplifyError {
  constructor() {
    super({
      name: AmplifyErrorCode.PlatformNotSupported,
      message: "Function not supported on current platform"
    });
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/KeyValueStorage.mjs
var KeyValueStorage = class {
  constructor(storage) {
    this.storage = storage;
  }
  /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */
  async setItem(key, value) {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    this.storage.setItem(key, value);
  }
  /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */
  async getItem(key) {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    return this.storage.getItem(key);
  }
  /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */
  async removeItem(key) {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    this.storage.removeItem(key);
  }
  /**
   * This is used to clear the storage
   * @returns {string} nothing
   */
  async clear() {
    if (!this.storage)
      throw new PlatformNotSupportedError();
    this.storage.clear();
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/InMemoryStorage.mjs
var InMemoryStorage = class {
  constructor() {
    this.storage = /* @__PURE__ */ new Map();
  }
  get length() {
    return this.storage.size;
  }
  key(index) {
    if (index > this.length - 1) {
      return null;
    }
    return Array.from(this.storage.keys())[index];
  }
  setItem(key, value) {
    this.storage.set(key, value);
  }
  getItem(key) {
    return this.storage.get(key) ?? null;
  }
  removeItem(key) {
    this.storage.delete(key);
  }
  clear() {
    this.storage.clear();
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/utils.mjs
var logger6 = new ConsoleLogger("CoreStorageUtils");
var getLocalStorageWithFallback = () => {
  try {
    if (typeof window !== "undefined" && window.localStorage) {
      return window.localStorage;
    }
  } catch (e) {
    logger6.info("localStorage not found. InMemoryStorage is used as a fallback.");
  }
  return new InMemoryStorage();
};
var getSessionStorageWithFallback = () => {
  try {
    if (typeof window !== "undefined" && window.sessionStorage) {
      window.sessionStorage.getItem("test");
      return window.sessionStorage;
    }
    throw new Error("sessionStorage is not defined");
  } catch (e) {
    logger6.info("sessionStorage not found. InMemoryStorage is used as a fallback.");
    return new InMemoryStorage();
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/DefaultStorage.mjs
var DefaultStorage = class extends KeyValueStorage {
  constructor() {
    super(getLocalStorageWithFallback());
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/SessionStorage.mjs
var SessionStorage = class extends KeyValueStorage {
  constructor() {
    super(getSessionStorageWithFallback());
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/SyncKeyValueStorage.mjs
var SyncKeyValueStorage = class {
  constructor(storage) {
    this._storage = storage;
  }
  get storage() {
    if (!this._storage)
      throw new PlatformNotSupportedError();
    return this._storage;
  }
  /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */
  setItem(key, value) {
    this.storage.setItem(key, value);
  }
  /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */
  getItem(key) {
    return this.storage.getItem(key);
  }
  /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */
  removeItem(key) {
    this.storage.removeItem(key);
  }
  /**
   * This is used to clear the storage
   * @returns {string} nothing
   */
  clear() {
    this.storage.clear();
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/SyncSessionStorage.mjs
var SyncSessionStorage = class extends SyncKeyValueStorage {
  constructor() {
    super(getSessionStorageWithFallback());
  }
};

// node_modules/.pnpm/js-cookie@3.0.5/node_modules/js-cookie/dist/js.cookie.mjs
function assign(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init(converter, defaultAttributes) {
  function set(name2, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    name2 = encodeURIComponent(name2).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = name2 + "=" + converter.write(value, name2) + stringifiedAttributes;
  }
  function get(name2) {
    if (typeof document === "undefined" || arguments.length && !name2) {
      return;
    }
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i = 0; i < cookies.length; i++) {
      var parts = cookies[i].split("=");
      var value = parts.slice(1).join("=");
      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);
        if (name2 === found) {
          break;
        }
      } catch (e) {
      }
    }
    return name2 ? jar[name2] : jar;
  }
  return Object.create(
    {
      set,
      get,
      remove: function(name2, attributes) {
        set(
          name2,
          "",
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init(this.converter, assign({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init(assign({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api = init(defaultConverter, { path: "/" });

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/CookieStorage.mjs
var CookieStorage = class {
  constructor(data = {}) {
    const { path, domain, expires, sameSite, secure } = data;
    this.domain = domain;
    this.path = path || "/";
    this.expires = Object.prototype.hasOwnProperty.call(data, "expires") ? expires : 365;
    this.secure = Object.prototype.hasOwnProperty.call(data, "secure") ? secure : true;
    if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
      if (!sameSite || !["strict", "lax", "none"].includes(sameSite)) {
        throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
      }
      if (sameSite === "none" && !this.secure) {
        throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");
      }
      this.sameSite = sameSite;
    }
  }
  async setItem(key, value) {
    api.set(key, value, this.getData());
  }
  async getItem(key) {
    const item = api.get(key);
    return item ?? null;
  }
  async removeItem(key) {
    api.remove(key, this.getData());
  }
  async clear() {
    const cookie = api.get();
    const promises = Object.keys(cookie).map((key) => this.removeItem(key));
    await Promise.all(promises);
  }
  getData() {
    return {
      path: this.path,
      expires: this.expires,
      domain: this.domain,
      secure: this.secure,
      ...this.sameSite && { sameSite: this.sameSite }
    };
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/storage/index.mjs
var defaultStorage = new DefaultStorage();
var sessionStorage = new SessionStorage();
var syncSessionStorage = new SyncSessionStorage();
var sharedInMemoryStorage = new KeyValueStorage(new InMemoryStorage());

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Cache/constants.mjs
var defaultConfig = {
  keyPrefix: "aws-amplify-cache",
  capacityInBytes: 1048576,
  // 1MB
  itemMaxSize: 21e4,
  // about 200kb
  defaultTTL: 2592e5,
  // about 3 days
  defaultPriority: 5,
  warningThreshold: 0.8
};
var currentSizeKey = "CurSize";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Cache/utils/cacheHelpers.mjs
function getByteLength(str) {
  let ret = 0;
  ret = str.length;
  for (let i = str.length; i >= 0; i -= 1) {
    const charCode = str.charCodeAt(i);
    if (charCode > 127 && charCode <= 2047) {
      ret += 1;
    } else if (charCode > 2047 && charCode <= 65535) {
      ret += 2;
    }
    if (charCode >= 56320 && charCode <= 57343) {
      i -= 1;
    }
  }
  return ret;
}
function getCurrentTime() {
  const currentTime = /* @__PURE__ */ new Date();
  return currentTime.getTime();
}
var getCurrentSizeKey = (keyPrefix) => `${keyPrefix}${currentSizeKey}`;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Cache/utils/errorHelpers.mjs
var CacheErrorCode;
(function(CacheErrorCode2) {
  CacheErrorCode2["NoCacheItem"] = "NoCacheItem";
  CacheErrorCode2["NullNextNode"] = "NullNextNode";
  CacheErrorCode2["NullPreviousNode"] = "NullPreviousNode";
})(CacheErrorCode || (CacheErrorCode = {}));
var cacheErrorMap = {
  [CacheErrorCode.NoCacheItem]: {
    message: "Item not found in the cache storage."
  },
  [CacheErrorCode.NullNextNode]: {
    message: "Next node is null."
  },
  [CacheErrorCode.NullPreviousNode]: {
    message: "Previous node is null."
  }
};
var assert3 = createAssertionFunction(cacheErrorMap);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Cache/StorageCacheCommon.mjs
var logger7 = new ConsoleLogger("StorageCache");
var StorageCacheCommon = class {
  /**
   * Initialize the cache
   *
   * @param config - Custom configuration for this instance.
   */
  constructor({ config: config2, keyValueStorage }) {
    this.config = {
      ...defaultConfig,
      ...config2
    };
    this.keyValueStorage = keyValueStorage;
    this.sanitizeConfig();
  }
  getModuleName() {
    return "Cache";
  }
  /**
   * Set custom configuration for the cache instance.
   *
   * @param config - customized configuration (without keyPrefix, which can't be changed)
   *
   * @return - the current configuration
   */
  configure(config2) {
    if (config2) {
      if (config2.keyPrefix) {
        logger7.warn("keyPrefix can not be re-configured on an existing Cache instance.");
      }
      this.config = {
        ...this.config,
        ...config2
      };
    }
    this.sanitizeConfig();
    return this.config;
  }
  /**
   * return the current size of the cache
   * @return {Promise}
   */
  async getCurrentCacheSize() {
    let size = await this.getStorage().getItem(getCurrentSizeKey(this.config.keyPrefix));
    if (!size) {
      await this.getStorage().setItem(getCurrentSizeKey(this.config.keyPrefix), "0");
      size = "0";
    }
    return Number(size);
  }
  /**
   * Set item into cache. You can put number, string, boolean or object.
   * The cache will first check whether has the same key.
   * If it has, it will delete the old item and then put the new item in
   * The cache will pop out items if it is full
   * You can specify the cache item options. The cache will abort and output a warning:
   * If the key is invalid
   * If the size of the item exceeds itemMaxSize.
   * If the value is undefined
   * If incorrect cache item configuration
   * If error happened with browser storage
   *
   * @param {String} key - the key of the item
   * @param {Object} value - the value of the item
   * @param {Object} [options] - optional, the specified meta-data
   *
   * @return {Promise}
   */
  async setItem(key, value, options) {
    logger7.debug(`Set item: key is ${key}, value is ${value} with options: ${options}`);
    if (!key || key === currentSizeKey) {
      logger7.warn(`Invalid key: should not be empty or reserved key: '${currentSizeKey}'`);
      return;
    }
    if (typeof value === "undefined") {
      logger7.warn(`The value of item should not be undefined!`);
      return;
    }
    const cacheItemOptions = {
      priority: options?.priority !== void 0 ? options.priority : this.config.defaultPriority,
      expires: options?.expires !== void 0 ? options.expires : this.config.defaultTTL + getCurrentTime()
    };
    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
      logger7.warn(`Invalid parameter: priority due to out or range. It should be within 1 and 5.`);
      return;
    }
    const prefixedKey = `${this.config.keyPrefix}${key}`;
    const item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
    if (item.byteSize > this.config.itemMaxSize) {
      logger7.warn(`Item with key: ${key} you are trying to put into is too big!`);
      return;
    }
    try {
      const val = await this.getStorage().getItem(prefixedKey);
      if (val) {
        await this.removeCacheItem(prefixedKey, JSON.parse(val).byteSize);
      }
      if (await this.isCacheFull(item.byteSize)) {
        const validKeys = await this.clearInvalidAndGetRemainingKeys();
        if (await this.isCacheFull(item.byteSize)) {
          const sizeToPop = await this.sizeToPop(item.byteSize);
          await this.popOutItems(validKeys, sizeToPop);
        }
      }
      return this.setCacheItem(prefixedKey, item);
    } catch (e) {
      logger7.warn(`setItem failed! ${e}`);
    }
  }
  /**
   * Get item from cache. It will return null if item doesn’t exist or it has been expired.
   * If you specified callback function in the options,
   * then the function will be executed if no such item in the cache
   * and finally put the return value into cache.
   * Please make sure the callback function will return the value you want to put into the cache.
   * The cache will abort output a warning:
   * If the key is invalid
   * If error happened with AsyncStorage
   *
   * @param {String} key - the key of the item
   * @param {Object} [options] - the options of callback function
   *
   * @return {Promise} - return a promise resolves to be the value of the item
   */
  async getItem(key, options) {
    logger7.debug(`Get item: key is ${key} with options ${options}`);
    let cached;
    if (!key || key === currentSizeKey) {
      logger7.warn(`Invalid key: should not be empty or reserved key: '${currentSizeKey}'`);
      return null;
    }
    const prefixedKey = `${this.config.keyPrefix}${key}`;
    try {
      cached = await this.getStorage().getItem(prefixedKey);
      if (cached != null) {
        if (await this.isExpired(prefixedKey)) {
          await this.removeCacheItem(prefixedKey, JSON.parse(cached).byteSize);
        } else {
          const item = await this.updateVisitedTime(JSON.parse(cached), prefixedKey);
          return item.data;
        }
      }
      if (options?.callback) {
        const val = options.callback();
        if (val !== null) {
          await this.setItem(key, val, options);
        }
        return val;
      }
      return null;
    } catch (e) {
      logger7.warn(`getItem failed! ${e}`);
      return null;
    }
  }
  /**
   * remove item from the cache
   * The cache will abort output a warning:
   * If error happened with AsyncStorage
   * @param {String} key - the key of the item
   * @return {Promise}
   */
  async removeItem(key) {
    logger7.debug(`Remove item: key is ${key}`);
    if (!key || key === currentSizeKey) {
      logger7.warn(`Invalid key: should not be empty or reserved key: '${currentSizeKey}'`);
      return;
    }
    const prefixedKey = `${this.config.keyPrefix}${key}`;
    try {
      const val = await this.getStorage().getItem(prefixedKey);
      if (val) {
        await this.removeCacheItem(prefixedKey, JSON.parse(val).byteSize);
      }
    } catch (e) {
      logger7.warn(`removeItem failed! ${e}`);
    }
  }
  /**
   * Return all the keys owned by this cache.
   * Will return an empty array if error occurred.
   *
   * @return {Promise}
   */
  async getAllKeys() {
    try {
      return await this.getAllCacheKeys();
    } catch (e) {
      logger7.warn(`getAllkeys failed! ${e}`);
      return [];
    }
  }
  getStorage() {
    return this.keyValueStorage;
  }
  /**
   * check whether item is expired
   *
   * @param key - the key of the item
   *
   * @return true if the item is expired.
   */
  async isExpired(key) {
    const text = await this.getStorage().getItem(key);
    assert3(text !== null, CacheErrorCode.NoCacheItem, `Key: ${key}`);
    const item = JSON.parse(text);
    if (getCurrentTime() >= item.expires) {
      return true;
    }
    return false;
  }
  /**
   * delete item from cache
   *
   * @param prefixedKey - the key of the item
   * @param size - optional, the byte size of the item
   */
  async removeCacheItem(prefixedKey, size) {
    const item = await this.getStorage().getItem(prefixedKey);
    assert3(item !== null, CacheErrorCode.NoCacheItem, `Key: ${prefixedKey}`);
    const itemSize = size ?? JSON.parse(item).byteSize;
    await this.decreaseCurrentSizeInBytes(itemSize);
    try {
      await this.getStorage().removeItem(prefixedKey);
    } catch (removeItemError) {
      await this.increaseCurrentSizeInBytes(itemSize);
      logger7.error(`Failed to remove item: ${removeItemError}`);
    }
  }
  /**
   * produce a JSON object with meta-data and data value
   * @param value - the value of the item
   * @param options - optional, the specified meta-data
   *
   * @return - the item which has the meta-data and the value
   */
  fillCacheItem(key, value, options) {
    const item = {
      key,
      data: value,
      timestamp: getCurrentTime(),
      visitedTime: getCurrentTime(),
      priority: options.priority ?? 0,
      expires: options.expires ?? 0,
      type: typeof value,
      byteSize: 0
    };
    item.byteSize = getByteLength(JSON.stringify(item));
    item.byteSize = getByteLength(JSON.stringify(item));
    return item;
  }
  sanitizeConfig() {
    if (this.config.itemMaxSize > this.config.capacityInBytes) {
      logger7.error("Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.");
      this.config.itemMaxSize = defaultConfig.itemMaxSize;
    }
    if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {
      logger7.error("Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.");
      this.config.defaultPriority = defaultConfig.defaultPriority;
    }
    if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {
      logger7.error("Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.");
      this.config.warningThreshold = defaultConfig.warningThreshold;
    }
    const cacheLimit = 5 * 1024 * 1024;
    if (this.config.capacityInBytes > cacheLimit) {
      logger7.error("Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.");
      this.config.capacityInBytes = defaultConfig.capacityInBytes;
    }
  }
  /**
   * increase current size of the cache
   *
   * @param amount - the amount of the cache szie which need to be increased
   */
  async increaseCurrentSizeInBytes(amount) {
    const size = await this.getCurrentCacheSize();
    await this.getStorage().setItem(getCurrentSizeKey(this.config.keyPrefix), (size + amount).toString());
  }
  /**
   * decrease current size of the cache
   *
   * @param amount - the amount of the cache size which needs to be decreased
   */
  async decreaseCurrentSizeInBytes(amount) {
    const size = await this.getCurrentCacheSize();
    await this.getStorage().setItem(getCurrentSizeKey(this.config.keyPrefix), (size - amount).toString());
  }
  /**
   * update the visited time if item has been visited
   *
   * @param item - the item which need to be updated
   * @param prefixedKey - the key of the item
   *
   * @return the updated item
   */
  async updateVisitedTime(item, prefixedKey) {
    item.visitedTime = getCurrentTime();
    await this.getStorage().setItem(prefixedKey, JSON.stringify(item));
    return item;
  }
  /**
   * put item into cache
   *
   * @param prefixedKey - the key of the item
   * @param itemData - the value of the item
   * @param itemSizeInBytes - the byte size of the item
   */
  async setCacheItem(prefixedKey, item) {
    await this.increaseCurrentSizeInBytes(item.byteSize);
    try {
      await this.getStorage().setItem(prefixedKey, JSON.stringify(item));
    } catch (setItemErr) {
      await this.decreaseCurrentSizeInBytes(item.byteSize);
      logger7.error(`Failed to set item ${setItemErr}`);
    }
  }
  /**
   * total space needed when poping out items
   *
   * @param itemSize
   *
   * @return total space needed
   */
  async sizeToPop(itemSize) {
    const cur = await this.getCurrentCacheSize();
    const spaceItemNeed = cur + itemSize - this.config.capacityInBytes;
    const cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;
    return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;
  }
  /**
   * see whether cache is full
   *
   * @param itemSize
   *
   * @return true if cache is full
   */
  async isCacheFull(itemSize) {
    const cur = await this.getCurrentCacheSize();
    return itemSize + cur > this.config.capacityInBytes;
  }
  /**
   * get all the items we have, sort them by their priority,
   * if priority is same, sort them by their last visited time
   * pop out items from the low priority (5 is the lowest)
   * @private
   * @param keys - all the keys in this cache
   * @param sizeToPop - the total size of the items which needed to be poped out
   */
  async popOutItems(keys, sizeToPop) {
    const items = [];
    let remainedSize = sizeToPop;
    for (const key of keys) {
      const val = await this.getStorage().getItem(key);
      if (val != null) {
        const item = JSON.parse(val);
        items.push(item);
      }
    }
    items.sort((a, b) => {
      if (a.priority > b.priority) {
        return -1;
      } else if (a.priority < b.priority) {
        return 1;
      } else {
        if (a.visitedTime < b.visitedTime) {
          return -1;
        } else
          return 1;
      }
    });
    for (const item of items) {
      await this.removeCacheItem(item.key, item.byteSize);
      remainedSize -= item.byteSize;
      if (remainedSize <= 0) {
        return;
      }
    }
  }
  /**
   * Scan the storage and combine the following operations for efficiency
   *   1. Clear out all expired keys owned by this cache, not including the size key.
   *   2. Return the remaining keys.
   *
   * @return The remaining valid keys
   */
  async clearInvalidAndGetRemainingKeys() {
    const remainingKeys = [];
    const keys = await this.getAllCacheKeys({
      omitSizeKey: true
    });
    for (const key of keys) {
      if (await this.isExpired(key)) {
        await this.removeCacheItem(key);
      } else {
        remainingKeys.push(key);
      }
    }
    return remainingKeys;
  }
  /**
   * clear the entire cache
   * The cache will abort and output a warning if error occurs
   * @return {Promise}
   */
  async clear() {
    logger7.debug(`Clear Cache`);
    try {
      const keys = await this.getAllKeys();
      for (const key of keys) {
        const prefixedKey = `${this.config.keyPrefix}${key}`;
        await this.getStorage().removeItem(prefixedKey);
      }
    } catch (e) {
      logger7.warn(`clear failed! ${e}`);
    }
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Cache/StorageCache.mjs
var logger8 = new ConsoleLogger("StorageCache");
var StorageCache = class _StorageCache extends StorageCacheCommon {
  /**
   * initialize the cache
   * @param config - the configuration of the cache
   */
  constructor(config2) {
    const storage = getLocalStorageWithFallback();
    super({ config: config2, keyValueStorage: new KeyValueStorage(storage) });
    this.storage = storage;
    this.getItem = this.getItem.bind(this);
    this.setItem = this.setItem.bind(this);
    this.removeItem = this.removeItem.bind(this);
  }
  async getAllCacheKeys(options) {
    const { omitSizeKey } = options ?? {};
    const keys = [];
    for (let i = 0; i < this.storage.length; i++) {
      const key = this.storage.key(i);
      if (omitSizeKey && key === getCurrentSizeKey(this.config.keyPrefix)) {
        continue;
      }
      if (key?.startsWith(this.config.keyPrefix)) {
        keys.push(key.substring(this.config.keyPrefix.length));
      }
    }
    return keys;
  }
  /**
   * Return a new instance of cache with customized configuration.
   * @param {Object} config - the customized configuration
   * @return {Object} - the new instance of Cache
   */
  createInstance(config2) {
    if (!config2.keyPrefix || config2.keyPrefix === defaultConfig.keyPrefix) {
      logger8.error("invalid keyPrefix, setting keyPrefix with timeStamp");
      config2.keyPrefix = getCurrentTime.toString();
    }
    return new _StorageCache(config2);
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Cache/index.mjs
var Cache = new StorageCache();

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/I18n/I18n.mjs
var logger9 = new ConsoleLogger("I18n");
var I18n$1 = class I18n {
  constructor() {
    this._options = null;
    this._lang = null;
    this._dict = {};
  }
  /**
   * Sets the default language from the configuration when required.
   */
  setDefaultLanguage() {
    if (!this._lang && typeof window !== "undefined" && window && window.navigator) {
      this._lang = window.navigator.language;
    }
    logger9.debug(this._lang);
  }
  /**
   * @method
   * Explicitly setting language
   * @param {String} lang
   */
  setLanguage(lang) {
    this._lang = lang;
  }
  /**
   * @method
   * Get value
   * @param {String} key
   * @param {String} defVal - Default value
   */
  get(key, defVal = void 0) {
    this.setDefaultLanguage();
    if (!this._lang) {
      return typeof defVal !== "undefined" ? defVal : key;
    }
    const lang = this._lang;
    let val = this.getByLanguage(key, lang);
    if (val) {
      return val;
    }
    if (lang.indexOf("-") > 0) {
      val = this.getByLanguage(key, lang.split("-")[0]);
    }
    if (val) {
      return val;
    }
    return typeof defVal !== "undefined" ? defVal : key;
  }
  /**
   * @method
   * Get value according to specified language
   * @param {String} key
   * @param {String} language - Specified langurage to be used
   * @param {String} defVal - Default value
   */
  getByLanguage(key, language, defVal = null) {
    if (!language) {
      return defVal;
    }
    const langDict = this._dict[language];
    if (!langDict) {
      return defVal;
    }
    return langDict[key];
  }
  /**
   * @method
   * Add vocabularies for one language
   * @param {String} language - Language of the dictionary
   * @param {Object} vocabularies - Object that has key-value as dictionary entry
   */
  putVocabulariesForLanguage(language, vocabularies) {
    let langDict = this._dict[language];
    if (!langDict) {
      langDict = this._dict[language] = {};
    }
    this._dict[language] = { ...langDict, ...vocabularies };
  }
  /**
   * @method
   * Add vocabularies for one language
   * @param {Object} vocabularies - Object that has language as key,
   *                                vocabularies of each language as value
   */
  putVocabularies(vocabularies) {
    Object.keys(vocabularies).forEach((key) => {
      this.putVocabulariesForLanguage(key, vocabularies[key]);
    });
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/I18n/errorHelpers.mjs
var I18nErrorCode;
(function(I18nErrorCode2) {
  I18nErrorCode2["NotConfigured"] = "NotConfigured";
})(I18nErrorCode || (I18nErrorCode = {}));
var i18nErrorMap = {
  [I18nErrorCode.NotConfigured]: {
    message: "i18n is not configured."
  }
};
var assert4 = createAssertionFunction(i18nErrorMap);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/I18n/index.mjs
var logger10 = new ConsoleLogger("I18n");
var _config = { language: null };
var _i18n = null;
var I18n2 = class _I18n {
  /**
   * @static
   * @method
   * Configure I18n part
   * @param {Object} config - Configuration of the I18n
   */
  static configure(config2) {
    logger10.debug("configure I18n");
    if (!config2) {
      return _config;
    }
    _config = Object.assign({}, _config, config2.I18n || config2);
    _I18n.createInstance();
    return _config;
  }
  static getModuleName() {
    return "I18n";
  }
  /**
   * @static
   * @method
   * Create an instance of I18n for the library
   */
  static createInstance() {
    logger10.debug("create I18n instance");
    if (_i18n) {
      return;
    }
    _i18n = new I18n$1();
  }
  /**
   * @static @method
   * Explicitly setting language
   * @param {String} lang
   */
  static setLanguage(lang) {
    _I18n.checkConfig();
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    _i18n.setLanguage(lang);
  }
  /**
   * @static @method
   * Get value
   * @param {String} key
   * @param {String} defVal - Default value
   */
  static get(key, defVal) {
    if (!_I18n.checkConfig()) {
      return typeof defVal === "undefined" ? key : defVal;
    }
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    return _i18n.get(key, defVal);
  }
  /**
   * @static
   * @method
   * Add vocabularies for one language
   * @param {String} language - Language of the dictionary
   * @param {Object} vocabularies - Object that has key-value as dictionary entry
   */
  static putVocabulariesForLanguage(language, vocabularies) {
    _I18n.checkConfig();
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    _i18n.putVocabulariesForLanguage(language, vocabularies);
  }
  /**
   * @static
   * @method
   * Add vocabularies for one language
   * @param {Object} vocabularies - Object that has language as key,
   *                                vocabularies of each language as value
   */
  static putVocabularies(vocabularies) {
    _I18n.checkConfig();
    assert4(!!_i18n, I18nErrorCode.NotConfigured);
    _i18n.putVocabularies(vocabularies);
  }
  static checkConfig() {
    if (!_i18n) {
      _I18n.createInstance();
    }
    return true;
  }
};
I18n2.createInstance();

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/errorHelpers.mjs
var PinpointValidationErrorCode;
(function(PinpointValidationErrorCode2) {
  PinpointValidationErrorCode2["NoAppId"] = "NoAppId";
})(PinpointValidationErrorCode || (PinpointValidationErrorCode = {}));
var pinpointValidationErrorMap = {
  [PinpointValidationErrorCode.NoAppId]: {
    message: "Missing application id."
  }
};
var assert5 = createAssertionFunction(pinpointValidationErrorMap);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSignedHeaders.mjs
var getSignedHeaders = (headers) => Object.keys(headers).map((key) => key.toLowerCase()).sort().join(";");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/constants.mjs
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var HOST_HEADER = "host";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var KEY_TYPE_IDENTIFIER = "aws4_request";
var SHA256_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var SIGNATURE_IDENTIFIER = "AWS4";
var EMPTY_HASH = "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCredentialScope.mjs
var getCredentialScope = (date, region, service) => `${date}/${region}/${service}/${KEY_TYPE_IDENTIFIER}`;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getFormattedDates.mjs
var getFormattedDates = (date) => {
  const longDate = date.toISOString().replace(/[:-]|\.\d{3}/g, "");
  return {
    longDate,
    shortDate: longDate.slice(0, 8)
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSigningValues.mjs
var getSigningValues = ({ credentials, signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService, uriEscapePath = true }) => {
  const { accessKeyId, secretAccessKey, sessionToken } = credentials;
  const { longDate, shortDate } = getFormattedDates(signingDate);
  const credentialScope = getCredentialScope(shortDate, signingRegion, signingService);
  return {
    accessKeyId,
    credentialScope,
    longDate,
    secretAccessKey,
    sessionToken,
    shortDate,
    signingRegion,
    signingService,
    uriEscapePath
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/dataHashHelpers.mjs
var getHashedData = (key, data) => {
  const sha256 = new Sha256(key ?? void 0);
  sha256.update(data);
  const hashedData = sha256.digestSync();
  return hashedData;
};
var getHashedDataAsHex = (key, data) => {
  const hashedData = getHashedData(key, data);
  return toHex(hashedData);
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalHeaders.mjs
var getCanonicalHeaders = (headers) => Object.entries(headers).map(([key, value]) => ({
  key: key.toLowerCase(),
  value: value?.trim().replace(/\s+/g, " ") ?? ""
})).sort((a, b) => a.key < b.key ? -1 : 1).map((entry) => `${entry.key}:${entry.value}
`).join("");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalQueryString.mjs
var getCanonicalQueryString = (searchParams) => Array.from(searchParams).sort(([keyA, valA], [keyB, valB]) => {
  if (keyA === keyB) {
    return valA < valB ? -1 : 1;
  }
  return keyA < keyB ? -1 : 1;
}).map(([key, val]) => `${escapeUri(key)}=${escapeUri(val)}`).join("&");
var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalUri.mjs
var getCanonicalUri = (pathname, uriEscapePath = true) => pathname ? uriEscapePath ? encodeURIComponent(pathname).replace(/%2F/g, "/") : pathname : "/";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getHashedPayload.mjs
var getHashedPayload = (body) => {
  if (body == null) {
    return EMPTY_HASH;
  }
  if (isSourceData(body)) {
    const hashedData = getHashedDataAsHex(null, body);
    return hashedData;
  }
  return UNSIGNED_PAYLOAD;
};
var isSourceData = (body) => typeof body === "string" || ArrayBuffer.isView(body) || isArrayBuffer(body);
var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.mjs
var getCanonicalRequest = ({ body, headers, method, url }, uriEscapePath = true) => [
  method,
  getCanonicalUri(url.pathname, uriEscapePath),
  getCanonicalQueryString(url.searchParams),
  getCanonicalHeaders(headers),
  getSignedHeaders(headers),
  getHashedPayload(body)
].join("\n");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSigningKey.mjs
var getSigningKey = (secretAccessKey, date, region, service) => {
  const key = `${SIGNATURE_IDENTIFIER}${secretAccessKey}`;
  const dateKey = getHashedData(key, date);
  const regionKey = getHashedData(dateKey, region);
  const serviceKey = getHashedData(regionKey, service);
  const signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);
  return signingKey;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getStringToSign.mjs
var getStringToSign = (date, credentialScope, hashedRequest) => [SHA256_ALGORITHM_IDENTIFIER, date, credentialScope, hashedRequest].join("\n");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/utils/getSignature.mjs
var getSignature = (request, { credentialScope, longDate, secretAccessKey, shortDate, signingRegion, signingService, uriEscapePath }) => {
  const canonicalRequest = getCanonicalRequest(request, uriEscapePath);
  const hashedRequest = getHashedDataAsHex(null, canonicalRequest);
  const stringToSign = getStringToSign(longDate, credentialScope, hashedRequest);
  const signature = getHashedDataAsHex(getSigningKey(secretAccessKey, shortDate, signingRegion, signingService), stringToSign);
  return signature;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/signer/signatureV4/signRequest.mjs
var signRequest = (request, options) => {
  const signingValues = getSigningValues(options);
  const { accessKeyId, credentialScope, longDate, sessionToken } = signingValues;
  const headers = { ...request.headers };
  headers[HOST_HEADER] = request.url.host;
  headers[AMZ_DATE_HEADER] = longDate;
  if (sessionToken) {
    headers[TOKEN_HEADER] = sessionToken;
  }
  const requestToSign = { ...request, headers };
  const signature = getSignature(requestToSign, signingValues);
  const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;
  const signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;
  const signatureEntry = `Signature=${signature}`;
  headers[AUTH_HEADER] = `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;
  return requestToSign;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/getSkewCorrectedDate.mjs
var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/isClockSkewed.mjs
var SKEW_WINDOW = 5 * 60 * 1e3;
var isClockSkewed = (clockTimeInMilliseconds, clockOffsetInMilliseconds) => Math.abs(getSkewCorrectedDate(clockOffsetInMilliseconds).getTime() - clockTimeInMilliseconds) >= SKEW_WINDOW;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/getUpdatedSystemClockOffset.mjs
var getUpdatedSystemClockOffset = (clockTimeInMilliseconds, currentSystemClockOffset) => {
  if (isClockSkewed(clockTimeInMilliseconds, currentSystemClockOffset)) {
    return clockTimeInMilliseconds - Date.now();
  }
  return currentSystemClockOffset;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/middleware.mjs
var signingMiddlewareFactory = ({ credentials, region, service, uriEscapePath = true }) => {
  let currentSystemClockOffset;
  return (next, context2) => async function signingMiddleware(request) {
    currentSystemClockOffset = currentSystemClockOffset ?? 0;
    const signRequestOptions = {
      credentials: typeof credentials === "function" ? await credentials({
        forceRefresh: !!context2?.isCredentialsExpired
      }) : credentials,
      signingDate: getSkewCorrectedDate(currentSystemClockOffset),
      signingRegion: region,
      signingService: service,
      uriEscapePath
    };
    const signedRequest = await signRequest(request, signRequestOptions);
    const response = await next(signedRequest);
    const dateString = getDateHeader(response);
    if (dateString) {
      currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);
    }
    return response;
  };
};
var getDateHeader = ({ headers } = {}) => headers?.date ?? headers?.Date ?? headers?.["x-amz-date"];

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/handlers/aws/authenticated.mjs
var authenticatedHandler = composeTransferHandler(fetchTransferHandler, [
  userAgentMiddlewareFactory,
  amzSdkInvocationIdHeaderMiddlewareFactory,
  retryMiddlewareFactory,
  amzSdkRequestHeaderMiddlewareFactory,
  signingMiddlewareFactory
]);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/clients/middleware/signing/utils/extendedEncodeURIComponent.mjs
var extendedEncodeURIComponent = (uri) => {
  const extendedCharacters = /[!'()*]/g;
  return encodeURIComponent(uri).replace(extendedCharacters, hexEncode2);
};
var hexEncode2 = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/base.mjs
var SERVICE_NAME = "mobiletargeting";
var endpointResolver = ({ region }) => ({
  url: new AmplifyUrl(`https://pinpoint.${region}.${getDnsSuffix(region)}`)
});
var defaultConfig2 = {
  service: SERVICE_NAME,
  endpointResolver,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  get userAgentValue() {
    return getAmplifyUserAgent();
  }
};
var getSharedHeaders2 = () => ({
  "content-type": "application/json"
});

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/updateEndpoint.mjs
var updateEndpointSerializer = ({ ApplicationId = "", EndpointId = "", EndpointRequest }, endpoint) => {
  const headers = getSharedHeaders2();
  const url = new AmplifyUrl(endpoint.url);
  url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/endpoints/${extendedEncodeURIComponent(EndpointId)}`;
  const body = JSON.stringify(EndpointRequest);
  return { method: "PUT", headers, url, body };
};
var updateEndpointDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error = await parseJsonError(response);
    throw error;
  } else {
    const { Message, RequestID } = await parseJsonBody(response);
    return {
      MessageBody: {
        Message,
        RequestID
      },
      $metadata: parseMetadata(response)
    };
  }
};
var updateEndpoint = composeServiceApi(authenticatedHandler, updateEndpointSerializer, updateEndpointDeserializer, defaultConfig2);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/providers/pinpoint/utils/constants.mjs
var FLUSH_INTERVAL = 5 * 1e3;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/awsClients/pinpoint/putEvents.mjs
var putEventsSerializer = ({ ApplicationId, EventsRequest }, endpoint) => {
  assert5(!!ApplicationId, PinpointValidationErrorCode.NoAppId);
  const headers = getSharedHeaders2();
  const url = new AmplifyUrl(endpoint.url);
  url.pathname = `v1/apps/${extendedEncodeURIComponent(ApplicationId)}/events`;
  const body = JSON.stringify(EventsRequest ?? {});
  return { method: "POST", headers, url, body };
};
var putEventsDeserializer = async (response) => {
  if (response.statusCode >= 300) {
    const error = await parseJsonError(response);
    throw error;
  } else {
    const { Results } = await parseJsonBody(response);
    return {
      EventsResponse: { Results },
      $metadata: parseMetadata(response)
    };
  }
};
var putEvents = composeServiceApi(authenticatedHandler, putEventsSerializer, putEventsDeserializer, defaultConfig2);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/providers/pinpoint/utils/PinpointEventBuffer.mjs
var logger11 = new ConsoleLogger("PinpointEventBuffer");

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/providers/pinpoint/types/errors.mjs
var UpdateEndpointException;
(function(UpdateEndpointException2) {
  UpdateEndpointException2["BadRequestException"] = "BadRequestException";
  UpdateEndpointException2["ForbiddenException"] = "ForbiddenException";
  UpdateEndpointException2["InternalServerErrorException"] = "InternalServerErrorException";
  UpdateEndpointException2["MethodNotAllowedException"] = "MethodNotAllowedException";
  UpdateEndpointException2["NotFoundException"] = "NotFoundException";
  UpdateEndpointException2["PayloadTooLargeException"] = "PayloadTooLargeException";
  UpdateEndpointException2["TooManyRequestsException"] = "TooManyRequestsException";
})(UpdateEndpointException || (UpdateEndpointException = {}));

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/ServiceWorker/errorHelpers.mjs
var ServiceWorkerErrorCode;
(function(ServiceWorkerErrorCode2) {
  ServiceWorkerErrorCode2["UndefinedInstance"] = "UndefinedInstance";
  ServiceWorkerErrorCode2["UndefinedRegistration"] = "UndefinedRegistration";
  ServiceWorkerErrorCode2["Unavailable"] = "Unavailable";
})(ServiceWorkerErrorCode || (ServiceWorkerErrorCode = {}));
var serviceWorkerErrorMap = {
  [ServiceWorkerErrorCode.UndefinedInstance]: {
    message: "Service Worker instance is undefined."
  },
  [ServiceWorkerErrorCode.UndefinedRegistration]: {
    message: "Service Worker registration is undefined."
  },
  [ServiceWorkerErrorCode.Unavailable]: {
    message: "Service Worker not available."
  }
};
var assert6 = createAssertionFunction(serviceWorkerErrorMap);

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/generateRandomString.mjs
var generateRandomString = (length) => {
  const STATE_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  const result = [];
  const randomNums = new Uint8Array(length);
  getCrypto().getRandomValues(randomNums);
  for (const num of randomNums) {
    result.push(STATE_CHARSET[num % STATE_CHARSET.length]);
  }
  return result.join("");
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/urlSafeDecode.mjs
function urlSafeDecode(hex) {
  const matchArr = hex.match(/.{2}/g) || [];
  return matchArr.map((char) => String.fromCharCode(parseInt(char, 16))).join("");
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/urlSafeEncode.mjs
function urlSafeEncode(str) {
  return str.split("").map((char) => char.charCodeAt(0).toString(16).padStart(2, "0")).join("");
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/deDupeAsyncFunction.mjs
var deDupeAsyncFunction = (asyncFunction) => {
  let inflightPromise;
  return async (...args) => {
    if (inflightPromise)
      return inflightPromise;
    inflightPromise = new Promise((resolve, reject) => {
      asyncFunction(...args).then((result) => {
        resolve(result);
      }).catch((error) => {
        reject(error);
      }).finally(() => {
        inflightPromise = void 0;
      });
    });
    return inflightPromise;
  };
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/isTokenExpired.mjs
function isTokenExpired({ expiresAt, clockDrift, tolerance = 5e3 }) {
  const currentTime = Date.now();
  return currentTime + clockDrift + tolerance > expiresAt;
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/deviceName/getDeviceName.mjs
var getDeviceName = async () => {
  const { userAgentData } = navigator;
  if (!userAgentData)
    return navigator.userAgent;
  const { platform = "", platformVersion = "", model = "", architecture = "", fullVersionList = [] } = await userAgentData.getHighEntropyValues([
    "platform",
    "platformVersion",
    "architecture",
    "model",
    "fullVersionList"
  ]);
  const versionList = fullVersionList.map((v) => `${v.brand}/${v.version}`).join(";");
  const deviceName = [
    platform,
    platformVersion,
    architecture,
    model,
    platform,
    versionList
  ].filter((value) => value).join(" ");
  return deviceName || navigator.userAgent;
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/Signer/DateUtils.mjs
var FIVE_MINUTES_IN_MS = 1e3 * 60 * 5;

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/convert/base64/bytesToString.mjs
function bytesToString(input) {
  return Array.from(input, (byte) => String.fromCodePoint(byte)).join("");
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/convert/base64/base64Encoder.mjs
var base64Encoder = {
  /**
   * Convert input to base64-encoded string
   * @param input - string to convert to base64
   * @param options - encoding options that can optionally produce a base64url string
   * @returns base64-encoded string
   */
  convert(input, options = {
    urlSafe: false,
    skipPadding: false
  }) {
    const inputStr = typeof input === "string" ? input : bytesToString(input);
    let encodedStr = getBtoa()(inputStr);
    if (options.urlSafe) {
      encodedStr = encodedStr.replace(/\+/g, "-").replace(/\//g, "_");
    }
    if (options.skipPadding) {
      encodedStr = encodedStr.replace(/=/g, "");
    }
    return encodedStr;
  }
};

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/cryptoSecureRandomInt.mjs
function cryptoSecureRandomInt() {
  const crypto2 = getCrypto();
  const randomResult = crypto2.getRandomValues(new Uint32Array(1))[0];
  return randomResult;
}

// node_modules/.pnpm/@aws-amplify+core@6.12.3/node_modules/@aws-amplify/core/dist/esm/utils/WordArray.mjs
function hexStringify(wordArray) {
  const { words } = wordArray;
  const { sigBytes } = wordArray;
  const hexChars = [];
  for (let i = 0; i < sigBytes; i++) {
    const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
    hexChars.push((bite >>> 4).toString(16));
    hexChars.push((bite & 15).toString(16));
  }
  return hexChars.join("");
}
var WordArray = class _WordArray {
  constructor(words, sigBytes) {
    this.words = [];
    let Words = words;
    Words = this.words = Words || [];
    if (sigBytes !== void 0) {
      this.sigBytes = sigBytes;
    } else {
      this.sigBytes = Words.length * 4;
    }
  }
  random(nBytes) {
    const words = [];
    for (let i = 0; i < nBytes; i += 4) {
      words.push(cryptoSecureRandomInt());
    }
    return new _WordArray(words, nBytes);
  }
  toString() {
    return hexStringify(this);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/errors/types/validation.mjs
var AuthValidationErrorCode;
(function(AuthValidationErrorCode2) {
  AuthValidationErrorCode2["EmptySignInUsername"] = "EmptySignInUsername";
  AuthValidationErrorCode2["EmptySignInPassword"] = "EmptySignInPassword";
  AuthValidationErrorCode2["CustomAuthSignInPassword"] = "CustomAuthSignInPassword";
  AuthValidationErrorCode2["EmptySignUpUsername"] = "EmptySignUpUsername";
  AuthValidationErrorCode2["EmptySignUpPassword"] = "EmptySignUpPassword";
  AuthValidationErrorCode2["EmptyConfirmSignUpUsername"] = "EmptyConfirmSignUpUsername";
  AuthValidationErrorCode2["EmptyConfirmSignUpCode"] = "EmptyConfirmSignUpCode";
  AuthValidationErrorCode2["EmptyResendSignUpCodeUsername"] = "EmptyresendSignUpCodeUsername";
  AuthValidationErrorCode2["EmptyChallengeResponse"] = "EmptyChallengeResponse";
  AuthValidationErrorCode2["EmptyConfirmResetPasswordUsername"] = "EmptyConfirmResetPasswordUsername";
  AuthValidationErrorCode2["EmptyConfirmResetPasswordNewPassword"] = "EmptyConfirmResetPasswordNewPassword";
  AuthValidationErrorCode2["EmptyConfirmResetPasswordConfirmationCode"] = "EmptyConfirmResetPasswordConfirmationCode";
  AuthValidationErrorCode2["EmptyResetPasswordUsername"] = "EmptyResetPasswordUsername";
  AuthValidationErrorCode2["EmptyVerifyTOTPSetupCode"] = "EmptyVerifyTOTPSetupCode";
  AuthValidationErrorCode2["EmptyConfirmUserAttributeCode"] = "EmptyConfirmUserAttributeCode";
  AuthValidationErrorCode2["IncorrectMFAMethod"] = "IncorrectMFAMethod";
  AuthValidationErrorCode2["EmptyUpdatePassword"] = "EmptyUpdatePassword";
})(AuthValidationErrorCode || (AuthValidationErrorCode = {}));

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/common/AuthErrorStrings.mjs
var validationErrorMap = {
  [AuthValidationErrorCode.EmptyChallengeResponse]: {
    message: "challengeResponse is required to confirmSignIn"
  },
  [AuthValidationErrorCode.EmptyConfirmResetPasswordUsername]: {
    message: "username is required to confirmResetPassword"
  },
  [AuthValidationErrorCode.EmptyConfirmSignUpCode]: {
    message: "code is required to confirmSignUp"
  },
  [AuthValidationErrorCode.EmptyConfirmSignUpUsername]: {
    message: "username is required to confirmSignUp"
  },
  [AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode]: {
    message: "confirmationCode is required to confirmResetPassword"
  },
  [AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword]: {
    message: "newPassword is required to confirmResetPassword"
  },
  [AuthValidationErrorCode.EmptyResendSignUpCodeUsername]: {
    message: "username is required to confirmSignUp"
  },
  [AuthValidationErrorCode.EmptyResetPasswordUsername]: {
    message: "username is required to resetPassword"
  },
  [AuthValidationErrorCode.EmptySignInPassword]: {
    message: "password is required to signIn"
  },
  [AuthValidationErrorCode.EmptySignInUsername]: {
    message: "username is required to signIn"
  },
  [AuthValidationErrorCode.EmptySignUpPassword]: {
    message: "password is required to signUp"
  },
  [AuthValidationErrorCode.EmptySignUpUsername]: {
    message: "username is required to signUp"
  },
  [AuthValidationErrorCode.CustomAuthSignInPassword]: {
    message: "A password is not needed when signing in with CUSTOM_WITHOUT_SRP",
    recoverySuggestion: "Do not include a password in your signIn call."
  },
  [AuthValidationErrorCode.IncorrectMFAMethod]: {
    message: "Incorrect MFA method was chosen. It should be either SMS, TOTP, or EMAIL",
    recoverySuggestion: "Try to pass SMS, TOTP, or EMAIL as the challengeResponse"
  },
  [AuthValidationErrorCode.EmptyVerifyTOTPSetupCode]: {
    message: "code is required to verifyTotpSetup"
  },
  [AuthValidationErrorCode.EmptyUpdatePassword]: {
    message: "oldPassword and newPassword are required to changePassword"
  },
  [AuthValidationErrorCode.EmptyConfirmUserAttributeCode]: {
    message: "confirmation code is required to confirmUserAttribute"
  }
};
var AuthErrorStrings;
(function(AuthErrorStrings2) {
  AuthErrorStrings2["DEFAULT_MSG"] = "Authentication Error";
  AuthErrorStrings2["EMPTY_EMAIL"] = "Email cannot be empty";
  AuthErrorStrings2["EMPTY_PHONE"] = "Phone number cannot be empty";
  AuthErrorStrings2["EMPTY_USERNAME"] = "Username cannot be empty";
  AuthErrorStrings2["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
  AuthErrorStrings2["EMPTY_PASSWORD"] = "Password cannot be empty";
  AuthErrorStrings2["EMPTY_CODE"] = "Confirmation code cannot be empty";
  AuthErrorStrings2["SIGN_UP_ERROR"] = "Error creating account";
  AuthErrorStrings2["NO_MFA"] = "No valid MFA method provided";
  AuthErrorStrings2["INVALID_MFA"] = "Invalid MFA type";
  AuthErrorStrings2["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
  AuthErrorStrings2["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
  AuthErrorStrings2["NETWORK_ERROR"] = "Network Error";
  AuthErrorStrings2["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
  AuthErrorStrings2["AUTOSIGNIN_ERROR"] = "Please use your credentials to sign in";
  AuthErrorStrings2["OAUTH_ERROR"] = "Couldn't finish OAuth flow, check your User Pool HostedUI settings";
})(AuthErrorStrings || (AuthErrorStrings = {}));
var AuthErrorCodes;
(function(AuthErrorCodes2) {
  AuthErrorCodes2["SignInException"] = "SignInException";
  AuthErrorCodes2["OAuthSignInError"] = "OAuthSignInException";
})(AuthErrorCodes || (AuthErrorCodes = {}));

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/errors/AuthError.mjs
var AuthError = class _AuthError extends AmplifyError {
  constructor(params) {
    super(params);
    this.constructor = _AuthError;
    Object.setPrototypeOf(this, _AuthError.prototype);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertValidationError.mjs
function assertValidationError(assertion, name2) {
  const { message, recoverySuggestion } = validationErrorMap[name2];
  if (!assertion) {
    throw new AuthError({ name: name2, message, recoverySuggestion });
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/parsers/regionParsers.mjs
function getRegionFromUserPoolId(userPoolId) {
  const region = userPoolId?.split("_")[0];
  if (!userPoolId || userPoolId.indexOf("_") < 0 || !region || typeof region !== "string")
    throw new AuthError({
      name: "InvalidUserPoolId",
      message: "Invalid user pool id provided."
    });
  return region;
}
function getRegionFromIdentityPoolId(identityPoolId) {
  if (!identityPoolId || !identityPoolId.includes(":")) {
    throw new AuthError({
      name: "InvalidIdentityPoolIdException",
      message: "Invalid identity pool id provided.",
      recoverySuggestion: "Make sure a valid identityPoolId is given in the config."
    });
  }
  return identityPoolId.split(":")[0];
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/apiHelpers.mjs
function toAttributeType(attributes) {
  return Object.entries(attributes).map(([key, value]) => ({
    Name: key,
    Value: value
  }));
}
function toAuthUserAttribute(attributes) {
  const userAttributes = {};
  attributes?.forEach((attribute) => {
    if (attribute.Name)
      userAttributes[attribute.Name] = attribute.Value;
  });
  return userAttributes;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/types/errors.mjs
var AssociateSoftwareTokenException;
(function(AssociateSoftwareTokenException2) {
  AssociateSoftwareTokenException2["ConcurrentModificationException"] = "ConcurrentModificationException";
  AssociateSoftwareTokenException2["ForbiddenException"] = "ForbiddenException";
  AssociateSoftwareTokenException2["InternalErrorException"] = "InternalErrorException";
  AssociateSoftwareTokenException2["InvalidParameterException"] = "InvalidParameterException";
  AssociateSoftwareTokenException2["NotAuthorizedException"] = "NotAuthorizedException";
  AssociateSoftwareTokenException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  AssociateSoftwareTokenException2["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
})(AssociateSoftwareTokenException || (AssociateSoftwareTokenException = {}));
var ChangePasswordException;
(function(ChangePasswordException2) {
  ChangePasswordException2["ForbiddenException"] = "ForbiddenException";
  ChangePasswordException2["InternalErrorException"] = "InternalErrorException";
  ChangePasswordException2["InvalidParameterException"] = "InvalidParameterException";
  ChangePasswordException2["InvalidPasswordException"] = "InvalidPasswordException";
  ChangePasswordException2["LimitExceededException"] = "LimitExceededException";
  ChangePasswordException2["NotAuthorizedException"] = "NotAuthorizedException";
  ChangePasswordException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ChangePasswordException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ChangePasswordException2["TooManyRequestsException"] = "TooManyRequestsException";
  ChangePasswordException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ChangePasswordException2["UserNotFoundException"] = "UserNotFoundException";
})(ChangePasswordException || (ChangePasswordException = {}));
var ConfirmDeviceException;
(function(ConfirmDeviceException2) {
  ConfirmDeviceException2["ForbiddenException"] = "ForbiddenException";
  ConfirmDeviceException2["InternalErrorException"] = "InternalErrorException";
  ConfirmDeviceException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ConfirmDeviceException2["InvalidParameterException"] = "InvalidParameterException";
  ConfirmDeviceException2["InvalidPasswordException"] = "InvalidPasswordException";
  ConfirmDeviceException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  ConfirmDeviceException2["NotAuthorizedException"] = "NotAuthorizedException";
  ConfirmDeviceException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ConfirmDeviceException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ConfirmDeviceException2["TooManyRequestsException"] = "TooManyRequestsException";
  ConfirmDeviceException2["UsernameExistsException"] = "UsernameExistsException";
  ConfirmDeviceException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ConfirmDeviceException2["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmDeviceException || (ConfirmDeviceException = {}));
var ConfirmForgotPasswordException;
(function(ConfirmForgotPasswordException2) {
  ConfirmForgotPasswordException2["CodeMismatchException"] = "CodeMismatchException";
  ConfirmForgotPasswordException2["ExpiredCodeException"] = "ExpiredCodeException";
  ConfirmForgotPasswordException2["ForbiddenException"] = "ForbiddenException";
  ConfirmForgotPasswordException2["InternalErrorException"] = "InternalErrorException";
  ConfirmForgotPasswordException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ConfirmForgotPasswordException2["InvalidParameterException"] = "InvalidParameterException";
  ConfirmForgotPasswordException2["InvalidPasswordException"] = "InvalidPasswordException";
  ConfirmForgotPasswordException2["LimitExceededException"] = "LimitExceededException";
  ConfirmForgotPasswordException2["NotAuthorizedException"] = "NotAuthorizedException";
  ConfirmForgotPasswordException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ConfirmForgotPasswordException2["TooManyFailedAttemptsException"] = "TooManyFailedAttemptsException";
  ConfirmForgotPasswordException2["TooManyRequestsException"] = "TooManyRequestsException";
  ConfirmForgotPasswordException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ConfirmForgotPasswordException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ConfirmForgotPasswordException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ConfirmForgotPasswordException2["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmForgotPasswordException || (ConfirmForgotPasswordException = {}));
var ConfirmSignUpException;
(function(ConfirmSignUpException2) {
  ConfirmSignUpException2["AliasExistsException"] = "AliasExistsException";
  ConfirmSignUpException2["CodeMismatchException"] = "CodeMismatchException";
  ConfirmSignUpException2["ExpiredCodeException"] = "ExpiredCodeException";
  ConfirmSignUpException2["ForbiddenException"] = "ForbiddenException";
  ConfirmSignUpException2["InternalErrorException"] = "InternalErrorException";
  ConfirmSignUpException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ConfirmSignUpException2["InvalidParameterException"] = "InvalidParameterException";
  ConfirmSignUpException2["LimitExceededException"] = "LimitExceededException";
  ConfirmSignUpException2["NotAuthorizedException"] = "NotAuthorizedException";
  ConfirmSignUpException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ConfirmSignUpException2["TooManyFailedAttemptsException"] = "TooManyFailedAttemptsException";
  ConfirmSignUpException2["TooManyRequestsException"] = "TooManyRequestsException";
  ConfirmSignUpException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ConfirmSignUpException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ConfirmSignUpException2["UserNotFoundException"] = "UserNotFoundException";
})(ConfirmSignUpException || (ConfirmSignUpException = {}));
var DeleteUserAttributesException;
(function(DeleteUserAttributesException2) {
  DeleteUserAttributesException2["ForbiddenException"] = "ForbiddenException";
  DeleteUserAttributesException2["InternalErrorException"] = "InternalErrorException";
  DeleteUserAttributesException2["InvalidParameterException"] = "InvalidParameterException";
  DeleteUserAttributesException2["NotAuthorizedException"] = "NotAuthorizedException";
  DeleteUserAttributesException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  DeleteUserAttributesException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  DeleteUserAttributesException2["TooManyRequestsException"] = "TooManyRequestsException";
  DeleteUserAttributesException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  DeleteUserAttributesException2["UserNotFoundException"] = "UserNotFoundException";
})(DeleteUserAttributesException || (DeleteUserAttributesException = {}));
var DeleteUserException;
(function(DeleteUserException2) {
  DeleteUserException2["ForbiddenException"] = "ForbiddenException";
  DeleteUserException2["InternalErrorException"] = "InternalErrorException";
  DeleteUserException2["InvalidParameterException"] = "InvalidParameterException";
  DeleteUserException2["NotAuthorizedException"] = "NotAuthorizedException";
  DeleteUserException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  DeleteUserException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  DeleteUserException2["TooManyRequestsException"] = "TooManyRequestsException";
  DeleteUserException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  DeleteUserException2["UserNotFoundException"] = "UserNotFoundException";
})(DeleteUserException || (DeleteUserException = {}));
var ForgetDeviceException;
(function(ForgetDeviceException2) {
  ForgetDeviceException2["ForbiddenException"] = "ForbiddenException";
  ForgetDeviceException2["InternalErrorException"] = "InternalErrorException";
  ForgetDeviceException2["InvalidParameterException"] = "InvalidParameterException";
  ForgetDeviceException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  ForgetDeviceException2["NotAuthorizedException"] = "NotAuthorizedException";
  ForgetDeviceException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ForgetDeviceException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ForgetDeviceException2["TooManyRequestsException"] = "TooManyRequestsException";
  ForgetDeviceException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ForgetDeviceException2["UserNotFoundException"] = "UserNotFoundException";
})(ForgetDeviceException || (ForgetDeviceException = {}));
var ForgotPasswordException;
(function(ForgotPasswordException2) {
  ForgotPasswordException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  ForgotPasswordException2["ForbiddenException"] = "ForbiddenException";
  ForgotPasswordException2["InternalErrorException"] = "InternalErrorException";
  ForgotPasswordException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  ForgotPasswordException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ForgotPasswordException2["InvalidParameterException"] = "InvalidParameterException";
  ForgotPasswordException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  ForgotPasswordException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  ForgotPasswordException2["LimitExceededException"] = "LimitExceededException";
  ForgotPasswordException2["NotAuthorizedException"] = "NotAuthorizedException";
  ForgotPasswordException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ForgotPasswordException2["TooManyRequestsException"] = "TooManyRequestsException";
  ForgotPasswordException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ForgotPasswordException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ForgotPasswordException2["UserNotFoundException"] = "UserNotFoundException";
})(ForgotPasswordException || (ForgotPasswordException = {}));
var GetUserException;
(function(GetUserException2) {
  GetUserException2["ForbiddenException"] = "ForbiddenException";
  GetUserException2["InternalErrorException"] = "InternalErrorException";
  GetUserException2["InvalidParameterException"] = "InvalidParameterException";
  GetUserException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetUserException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  GetUserException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetUserException2["TooManyRequestsException"] = "TooManyRequestsException";
  GetUserException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  GetUserException2["UserNotFoundException"] = "UserNotFoundException";
})(GetUserException || (GetUserException = {}));
var GetIdException;
(function(GetIdException2) {
  GetIdException2["ExternalServiceException"] = "ExternalServiceException";
  GetIdException2["InternalErrorException"] = "InternalErrorException";
  GetIdException2["InvalidParameterException"] = "InvalidParameterException";
  GetIdException2["LimitExceededException"] = "LimitExceededException";
  GetIdException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetIdException2["ResourceConflictException"] = "ResourceConflictException";
  GetIdException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetIdException2["TooManyRequestsException"] = "TooManyRequestsException";
})(GetIdException || (GetIdException = {}));
var GetCredentialsForIdentityException;
(function(GetCredentialsForIdentityException2) {
  GetCredentialsForIdentityException2["ExternalServiceException"] = "ExternalServiceException";
  GetCredentialsForIdentityException2["InternalErrorException"] = "InternalErrorException";
  GetCredentialsForIdentityException2["InvalidIdentityPoolConfigurationException"] = "InvalidIdentityPoolConfigurationException";
  GetCredentialsForIdentityException2["InvalidParameterException"] = "InvalidParameterException";
  GetCredentialsForIdentityException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetCredentialsForIdentityException2["ResourceConflictException"] = "ResourceConflictException";
  GetCredentialsForIdentityException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetCredentialsForIdentityException2["TooManyRequestsException"] = "TooManyRequestsException";
})(GetCredentialsForIdentityException || (GetCredentialsForIdentityException = {}));
var GetUserAttributeVerificationException;
(function(GetUserAttributeVerificationException2) {
  GetUserAttributeVerificationException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  GetUserAttributeVerificationException2["ForbiddenException"] = "ForbiddenException";
  GetUserAttributeVerificationException2["InternalErrorException"] = "InternalErrorException";
  GetUserAttributeVerificationException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  GetUserAttributeVerificationException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  GetUserAttributeVerificationException2["InvalidParameterException"] = "InvalidParameterException";
  GetUserAttributeVerificationException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  GetUserAttributeVerificationException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  GetUserAttributeVerificationException2["LimitExceededException"] = "LimitExceededException";
  GetUserAttributeVerificationException2["NotAuthorizedException"] = "NotAuthorizedException";
  GetUserAttributeVerificationException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  GetUserAttributeVerificationException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GetUserAttributeVerificationException2["TooManyRequestsException"] = "TooManyRequestsException";
  GetUserAttributeVerificationException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  GetUserAttributeVerificationException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  GetUserAttributeVerificationException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  GetUserAttributeVerificationException2["UserNotFoundException"] = "UserNotFoundException";
})(GetUserAttributeVerificationException || (GetUserAttributeVerificationException = {}));
var GlobalSignOutException;
(function(GlobalSignOutException2) {
  GlobalSignOutException2["ForbiddenException"] = "ForbiddenException";
  GlobalSignOutException2["InternalErrorException"] = "InternalErrorException";
  GlobalSignOutException2["InvalidParameterException"] = "InvalidParameterException";
  GlobalSignOutException2["NotAuthorizedException"] = "NotAuthorizedException";
  GlobalSignOutException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  GlobalSignOutException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  GlobalSignOutException2["TooManyRequestsException"] = "TooManyRequestsException";
  GlobalSignOutException2["UserNotConfirmedException"] = "UserNotConfirmedException";
})(GlobalSignOutException || (GlobalSignOutException = {}));
var InitiateAuthException;
(function(InitiateAuthException2) {
  InitiateAuthException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  InitiateAuthException2["ForbiddenException"] = "ForbiddenException";
  InitiateAuthException2["InternalErrorException"] = "InternalErrorException";
  InitiateAuthException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  InitiateAuthException2["InvalidParameterException"] = "InvalidParameterException";
  InitiateAuthException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  InitiateAuthException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  InitiateAuthException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  InitiateAuthException2["NotAuthorizedException"] = "NotAuthorizedException";
  InitiateAuthException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  InitiateAuthException2["TooManyRequestsException"] = "TooManyRequestsException";
  InitiateAuthException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  InitiateAuthException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  InitiateAuthException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  InitiateAuthException2["UserNotFoundException"] = "UserNotFoundException";
})(InitiateAuthException || (InitiateAuthException = {}));
var ResendConfirmationException;
(function(ResendConfirmationException2) {
  ResendConfirmationException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  ResendConfirmationException2["ForbiddenException"] = "ForbiddenException";
  ResendConfirmationException2["InternalErrorException"] = "InternalErrorException";
  ResendConfirmationException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  ResendConfirmationException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  ResendConfirmationException2["InvalidParameterException"] = "InvalidParameterException";
  ResendConfirmationException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  ResendConfirmationException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  ResendConfirmationException2["LimitExceededException"] = "LimitExceededException";
  ResendConfirmationException2["NotAuthorizedException"] = "NotAuthorizedException";
  ResendConfirmationException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ResendConfirmationException2["TooManyRequestsException"] = "TooManyRequestsException";
  ResendConfirmationException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  ResendConfirmationException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  ResendConfirmationException2["UserNotFoundException"] = "UserNotFoundException";
})(ResendConfirmationException || (ResendConfirmationException = {}));
var RespondToAuthChallengeException;
(function(RespondToAuthChallengeException2) {
  RespondToAuthChallengeException2["AliasExistsException"] = "AliasExistsException";
  RespondToAuthChallengeException2["CodeMismatchException"] = "CodeMismatchException";
  RespondToAuthChallengeException2["ExpiredCodeException"] = "ExpiredCodeException";
  RespondToAuthChallengeException2["ForbiddenException"] = "ForbiddenException";
  RespondToAuthChallengeException2["InternalErrorException"] = "InternalErrorException";
  RespondToAuthChallengeException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  RespondToAuthChallengeException2["InvalidParameterException"] = "InvalidParameterException";
  RespondToAuthChallengeException2["InvalidPasswordException"] = "InvalidPasswordException";
  RespondToAuthChallengeException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  RespondToAuthChallengeException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  RespondToAuthChallengeException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  RespondToAuthChallengeException2["MFAMethodNotFoundException"] = "MFAMethodNotFoundException";
  RespondToAuthChallengeException2["NotAuthorizedException"] = "NotAuthorizedException";
  RespondToAuthChallengeException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  RespondToAuthChallengeException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  RespondToAuthChallengeException2["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
  RespondToAuthChallengeException2["TooManyRequestsException"] = "TooManyRequestsException";
  RespondToAuthChallengeException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  RespondToAuthChallengeException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  RespondToAuthChallengeException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  RespondToAuthChallengeException2["UserNotFoundException"] = "UserNotFoundException";
})(RespondToAuthChallengeException || (RespondToAuthChallengeException = {}));
var SetUserMFAPreferenceException;
(function(SetUserMFAPreferenceException2) {
  SetUserMFAPreferenceException2["ForbiddenException"] = "ForbiddenException";
  SetUserMFAPreferenceException2["InternalErrorException"] = "InternalErrorException";
  SetUserMFAPreferenceException2["InvalidParameterException"] = "InvalidParameterException";
  SetUserMFAPreferenceException2["NotAuthorizedException"] = "NotAuthorizedException";
  SetUserMFAPreferenceException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  SetUserMFAPreferenceException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  SetUserMFAPreferenceException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  SetUserMFAPreferenceException2["UserNotFoundException"] = "UserNotFoundException";
})(SetUserMFAPreferenceException || (SetUserMFAPreferenceException = {}));
var SignUpException;
(function(SignUpException2) {
  SignUpException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  SignUpException2["InternalErrorException"] = "InternalErrorException";
  SignUpException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  SignUpException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  SignUpException2["InvalidParameterException"] = "InvalidParameterException";
  SignUpException2["InvalidPasswordException"] = "InvalidPasswordException";
  SignUpException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  SignUpException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  SignUpException2["NotAuthorizedException"] = "NotAuthorizedException";
  SignUpException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  SignUpException2["TooManyRequestsException"] = "TooManyRequestsException";
  SignUpException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  SignUpException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  SignUpException2["UsernameExistsException"] = "UsernameExistsException";
})(SignUpException || (SignUpException = {}));
var UpdateUserAttributesException;
(function(UpdateUserAttributesException2) {
  UpdateUserAttributesException2["AliasExistsException"] = "AliasExistsException";
  UpdateUserAttributesException2["CodeDeliveryFailureException"] = "CodeDeliveryFailureException";
  UpdateUserAttributesException2["CodeMismatchException"] = "CodeMismatchException";
  UpdateUserAttributesException2["ExpiredCodeException"] = "ExpiredCodeException";
  UpdateUserAttributesException2["ForbiddenException"] = "ForbiddenException";
  UpdateUserAttributesException2["InternalErrorException"] = "InternalErrorException";
  UpdateUserAttributesException2["InvalidEmailRoleAccessPolicyException"] = "InvalidEmailRoleAccessPolicyException";
  UpdateUserAttributesException2["InvalidLambdaResponseException"] = "InvalidLambdaResponseException";
  UpdateUserAttributesException2["InvalidParameterException"] = "InvalidParameterException";
  UpdateUserAttributesException2["InvalidSmsRoleAccessPolicyException"] = "InvalidSmsRoleAccessPolicyException";
  UpdateUserAttributesException2["InvalidSmsRoleTrustRelationshipException"] = "InvalidSmsRoleTrustRelationshipException";
  UpdateUserAttributesException2["NotAuthorizedException"] = "NotAuthorizedException";
  UpdateUserAttributesException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  UpdateUserAttributesException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  UpdateUserAttributesException2["TooManyRequestsException"] = "TooManyRequestsException";
  UpdateUserAttributesException2["UnexpectedLambdaException"] = "UnexpectedLambdaException";
  UpdateUserAttributesException2["UserLambdaValidationException"] = "UserLambdaValidationException";
  UpdateUserAttributesException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  UpdateUserAttributesException2["UserNotFoundException"] = "UserNotFoundException";
})(UpdateUserAttributesException || (UpdateUserAttributesException = {}));
var VerifySoftwareTokenException;
(function(VerifySoftwareTokenException2) {
  VerifySoftwareTokenException2["CodeMismatchException"] = "CodeMismatchException";
  VerifySoftwareTokenException2["EnableSoftwareTokenMFAException"] = "EnableSoftwareTokenMFAException";
  VerifySoftwareTokenException2["ForbiddenException"] = "ForbiddenException";
  VerifySoftwareTokenException2["InternalErrorException"] = "InternalErrorException";
  VerifySoftwareTokenException2["InvalidParameterException"] = "InvalidParameterException";
  VerifySoftwareTokenException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  VerifySoftwareTokenException2["NotAuthorizedException"] = "NotAuthorizedException";
  VerifySoftwareTokenException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  VerifySoftwareTokenException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  VerifySoftwareTokenException2["SoftwareTokenMFANotFoundException"] = "SoftwareTokenMFANotFoundException";
  VerifySoftwareTokenException2["TooManyRequestsException"] = "TooManyRequestsException";
  VerifySoftwareTokenException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  VerifySoftwareTokenException2["UserNotFoundException"] = "UserNotFoundException";
})(VerifySoftwareTokenException || (VerifySoftwareTokenException = {}));
var VerifyUserAttributeException;
(function(VerifyUserAttributeException2) {
  VerifyUserAttributeException2["AliasExistsException"] = "AliasExistsException";
  VerifyUserAttributeException2["CodeMismatchException"] = "CodeMismatchException";
  VerifyUserAttributeException2["ExpiredCodeException"] = "ExpiredCodeException";
  VerifyUserAttributeException2["ForbiddenException"] = "ForbiddenException";
  VerifyUserAttributeException2["InternalErrorException"] = "InternalErrorException";
  VerifyUserAttributeException2["InvalidParameterException"] = "InvalidParameterException";
  VerifyUserAttributeException2["LimitExceededException"] = "LimitExceededException";
  VerifyUserAttributeException2["NotAuthorizedException"] = "NotAuthorizedException";
  VerifyUserAttributeException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  VerifyUserAttributeException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  VerifyUserAttributeException2["TooManyRequestsException"] = "TooManyRequestsException";
  VerifyUserAttributeException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  VerifyUserAttributeException2["UserNotFoundException"] = "UserNotFoundException";
})(VerifyUserAttributeException || (VerifyUserAttributeException = {}));
var UpdateDeviceStatusException;
(function(UpdateDeviceStatusException2) {
  UpdateDeviceStatusException2["ForbiddenException"] = "ForbiddenException";
  UpdateDeviceStatusException2["InternalErrorException"] = "InternalErrorException";
  UpdateDeviceStatusException2["InvalidParameterException"] = "InvalidParameterException";
  UpdateDeviceStatusException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  UpdateDeviceStatusException2["NotAuthorizedException"] = "NotAuthorizedException";
  UpdateDeviceStatusException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  UpdateDeviceStatusException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  UpdateDeviceStatusException2["TooManyRequestsException"] = "TooManyRequestsException";
  UpdateDeviceStatusException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  UpdateDeviceStatusException2["UserNotFoundException"] = "UserNotFoundException";
})(UpdateDeviceStatusException || (UpdateDeviceStatusException = {}));
var ListDevicesException;
(function(ListDevicesException2) {
  ListDevicesException2["ForbiddenException"] = "ForbiddenException";
  ListDevicesException2["InternalErrorException"] = "InternalErrorException";
  ListDevicesException2["InvalidParameterException"] = "InvalidParameterException";
  ListDevicesException2["InvalidUserPoolConfigurationException"] = "InvalidUserPoolConfigurationException";
  ListDevicesException2["NotAuthorizedException"] = "NotAuthorizedException";
  ListDevicesException2["PasswordResetRequiredException"] = "PasswordResetRequiredException";
  ListDevicesException2["ResourceNotFoundException"] = "ResourceNotFoundException";
  ListDevicesException2["TooManyRequestsException"] = "TooManyRequestsException";
  ListDevicesException2["UserNotConfirmedException"] = "UserNotConfirmedException";
  ListDevicesException2["UserNotFoundException"] = "UserNotFoundException";
})(ListDevicesException || (ListDevicesException = {}));

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/errors/constants.mjs
var USER_UNAUTHENTICATED_EXCEPTION = "UserUnAuthenticatedException";
var USER_ALREADY_AUTHENTICATED_EXCEPTION = "UserAlreadyAuthenticatedException";
var DEVICE_METADATA_NOT_FOUND_EXCEPTION = "DeviceMetadataNotFoundException";
var AUTO_SIGN_IN_EXCEPTION = "AutoSignInException";
var INVALID_REDIRECT_EXCEPTION = "InvalidRedirectException";
var INVALID_APP_SCHEME_EXCEPTION = "InvalidAppSchemeException";
var INVALID_PREFERRED_REDIRECT_EXCEPTION = "InvalidPreferredRedirectUrlException";
var invalidRedirectException = new AuthError({
  name: INVALID_REDIRECT_EXCEPTION,
  message: "signInRedirect or signOutRedirect had an invalid format or was not found.",
  recoverySuggestion: "Please make sure the signIn/Out redirect in your oauth config is valid."
});
var invalidAppSchemeException = new AuthError({
  name: INVALID_APP_SCHEME_EXCEPTION,
  message: "A valid non-http app scheme was not found in the config.",
  recoverySuggestion: "Please make sure a valid custom app scheme is present in the config."
});
var invalidPreferredRedirectUrlException = new AuthError({
  name: INVALID_PREFERRED_REDIRECT_EXCEPTION,
  message: "The given preferredRedirectUrl does not match any items in the redirectSignOutUrls array from the config.",
  recoverySuggestion: "Please make sure a matching preferredRedirectUrl is provided."
});
var INVALID_ORIGIN_EXCEPTION = "InvalidOriginException";
var invalidOriginException = new AuthError({
  name: INVALID_ORIGIN_EXCEPTION,
  message: "redirect is coming from a different origin. The oauth flow needs to be initiated from the same origin",
  recoverySuggestion: "Please call signInWithRedirect from the same origin."
});
var OAUTH_SIGNOUT_EXCEPTION = "OAuthSignOutException";
var TOKEN_REFRESH_EXCEPTION = "TokenRefreshException";
var UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION = "UnexpectedSignInInterruptionException";

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/types.mjs
function assertAuthTokens(tokens) {
  if (!tokens || !tokens.accessToken) {
    throw new AuthError({
      name: USER_UNAUTHENTICATED_EXCEPTION,
      message: "User needs to be authenticated to call this API.",
      recoverySuggestion: "Sign in before calling this API again."
    });
  }
}
function assertIdTokenInAuthTokens(tokens) {
  if (!tokens || !tokens.idToken) {
    throw new AuthError({
      name: USER_UNAUTHENTICATED_EXCEPTION,
      message: "User needs to be authenticated to call this API.",
      recoverySuggestion: "Sign in before calling this API again."
    });
  }
}
var oAuthTokenRefreshException = new AuthError({
  name: TOKEN_REFRESH_EXCEPTION,
  message: `Token refresh is not supported when authenticated with the 'implicit grant' (token) oauth flow. 
	Please change your oauth configuration to use 'code grant' flow.`,
  recoverySuggestion: `Please logout and change your Amplify configuration to use "code grant" flow. 
	E.g { responseType: 'code' }`
});
var tokenRefreshException = new AuthError({
  name: USER_UNAUTHENTICATED_EXCEPTION,
  message: "User needs to be authenticated to call this API.",
  recoverySuggestion: "Sign in before calling this API again."
});
function assertAuthTokensWithRefreshToken(tokens) {
  if (isAuthenticatedWithImplicitOauthFlow(tokens)) {
    throw oAuthTokenRefreshException;
  }
  if (!isAuthenticatedWithRefreshToken(tokens)) {
    throw tokenRefreshException;
  }
}
function assertDeviceMetadata(deviceMetadata) {
  if (!deviceMetadata || !deviceMetadata.deviceKey || !deviceMetadata.deviceGroupKey || !deviceMetadata.randomPassword) {
    throw new AuthError({
      name: DEVICE_METADATA_NOT_FOUND_EXCEPTION,
      message: "Either deviceKey, deviceGroupKey or secretPassword were not found during the sign-in process.",
      recoverySuggestion: "Make sure to not clear storage after calling the signIn API."
    });
  }
}
var OAuthStorageKeys = {
  inflightOAuth: "inflightOAuth",
  oauthSignIn: "oauthSignIn",
  oauthPKCE: "oauthPKCE",
  oauthState: "oauthState"
};
function isAuthenticated(tokens) {
  return tokens?.accessToken || tokens?.idToken;
}
function isAuthenticatedWithRefreshToken(tokens) {
  return isAuthenticated(tokens) && tokens?.refreshToken;
}
function isAuthenticatedWithImplicitOauthFlow(tokens) {
  return isAuthenticated(tokens) && !tokens?.refreshToken;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/internal/getCurrentUser.mjs
var getCurrentUser = async (amplify) => {
  const authConfig = amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const tokens = await amplify.Auth.getTokens({ forceRefresh: false });
  assertAuthTokens(tokens);
  const { "cognito:username": username, sub } = tokens.idToken?.payload ?? {};
  const authUser = {
    username,
    userId: sub
  };
  const signInDetails = getSignInDetailsFromTokens(tokens);
  if (signInDetails) {
    authUser.signInDetails = signInDetails;
  }
  return authUser;
};
function getSignInDetailsFromTokens(tokens) {
  return tokens?.signInDetails;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/getCurrentUser.mjs
var getCurrentUser2 = async () => {
  return getCurrentUser(Amplify);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/utils/getAuthUserAgentValue.mjs
var getAuthUserAgentValue = (action, customUserAgentDetails) => getAmplifyUserAgent({
  category: Category.Auth,
  action,
  ...customUserAgentDetails
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolSerializer.mjs
var createUserPoolSerializer = (operation) => (input, endpoint) => {
  const headers = getSharedHeaders3(operation);
  const body = JSON.stringify(input);
  return buildHttpRpcRequest2(endpoint, headers, body);
};
var getSharedHeaders3 = (operation) => ({
  "content-type": "application/x-amz-json-1.1",
  "x-amz-target": `AWSCognitoIdentityProviderService.${operation}`
});
var buildHttpRpcRequest2 = ({ url }, headers, body) => ({
  headers,
  url,
  body,
  method: "POST"
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertServiceError.mjs
function assertServiceError(error) {
  if (!error || error.name === "Error" || error instanceof TypeError) {
    throw new AuthError({
      name: AmplifyErrorCode.Unknown,
      message: "An unknown error has occurred.",
      underlyingError: error
    });
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolDeserializer.mjs
var createUserPoolDeserializer = () => async (response) => {
  if (response.statusCode >= 300) {
    const error = await parseJsonError(response);
    assertServiceError(error);
    throw new AuthError({
      name: error.name,
      message: error.message,
      metadata: error.$metadata
    });
  }
  return parseJsonBody(response);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs
var disableCacheMiddlewareFactory = () => (next, _) => async function disableCacheMiddleware(request) {
  request.headers["cache-control"] = "no-store";
  return next(request);
};
var cognitoUserPoolTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory]);

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/constants.mjs
var COGNITO_IDP_SERVICE_NAME = "cognito-idp";

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs
var DEFAULT_SERVICE_CLIENT_API_CONFIG2 = {
  service: COGNITO_IDP_SERVICE_NAME,
  retryDecider: getRetryDecider(parseJsonError),
  computeDelay: jitteredBackoff2,
  get userAgentValue() {
    return getAmplifyUserAgent();
  },
  cache: "no-store"
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createInitiateAuthClient.mjs
var createInitiateAuthClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("InitiateAuth"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createRespondToAuthChallengeClient.mjs
var createRespondToAuthChallengeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("RespondToAuthChallenge"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createVerifySoftwareTokenClient.mjs
var createVerifySoftwareTokenClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("VerifySoftwareToken"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createAssociateSoftwareTokenClient.mjs
var createAssociateSoftwareTokenClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("AssociateSoftwareToken"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/cognitoUserPoolEndpointResolver.mjs
var cognitoUserPoolEndpointResolver = ({ region }) => ({
  url: new AmplifyUrl(`https://${COGNITO_IDP_SERVICE_NAME}.${region}.${getDnsSuffix(region)}`)
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs
var createCognitoUserPoolEndpointResolver = ({ endpointOverride }) => (input) => {
  if (endpointOverride) {
    return { url: new AmplifyUrl(endpointOverride) };
  }
  return cognitoUserPoolEndpointResolver(input);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/userContextData.mjs
function getUserContextData({ username, userPoolId, userPoolClientId }) {
  if (typeof window === "undefined") {
    return void 0;
  }
  const amazonCognitoAdvancedSecurityData = window.AmazonCognitoAdvancedSecurityData;
  if (typeof amazonCognitoAdvancedSecurityData === "undefined") {
    return void 0;
  }
  const advancedSecurityData = amazonCognitoAdvancedSecurityData.getData(username, userPoolId, userPoolClientId);
  if (advancedSecurityData) {
    const userContextData = {
      EncodedData: advancedSecurityData
    };
    return userContextData;
  }
  return {};
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/refreshAuthTokens.mjs
var refreshAuthTokensFunction = async ({ tokens, authConfig, username }) => {
  assertTokenProviderConfig(authConfig?.Cognito);
  const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig.Cognito;
  const region = getRegionFromUserPoolId(userPoolId);
  assertAuthTokensWithRefreshToken(tokens);
  const refreshTokenString = tokens.refreshToken;
  const AuthParameters = {
    REFRESH_TOKEN: refreshTokenString
  };
  if (tokens.deviceMetadata?.deviceKey) {
    AuthParameters.DEVICE_KEY = tokens.deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { AuthenticationResult } = await initiateAuth({ region }, {
    ClientId: userPoolClientId,
    AuthFlow: "REFRESH_TOKEN_AUTH",
    AuthParameters,
    UserContextData
  });
  const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? "");
  const idToken = AuthenticationResult?.IdToken ? decodeJWT(AuthenticationResult.IdToken) : void 0;
  const { iat } = accessToken.payload;
  if (!iat) {
    throw new AuthError({
      name: "iatNotFoundException",
      message: "iat not found in access token"
    });
  }
  const clockDrift = iat * 1e3 - (/* @__PURE__ */ new Date()).getTime();
  return {
    accessToken,
    idToken,
    clockDrift,
    refreshToken: refreshTokenString,
    username
  };
};
var refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/types.mjs
var AuthTokenStorageKeys = {
  accessToken: "accessToken",
  idToken: "idToken",
  oidcProvider: "oidcProvider",
  clockDrift: "clockDrift",
  refreshToken: "refreshToken",
  deviceKey: "deviceKey",
  randomPasswordKey: "randomPasswordKey",
  deviceGroupKey: "deviceGroupKey",
  signInDetails: "signInDetails",
  oauthMetadata: "oauthMetadata"
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/errorHelpers.mjs
var TokenProviderErrorCode;
(function(TokenProviderErrorCode2) {
  TokenProviderErrorCode2["InvalidAuthTokens"] = "InvalidAuthTokens";
})(TokenProviderErrorCode || (TokenProviderErrorCode = {}));
var tokenValidationErrorMap = {
  [TokenProviderErrorCode.InvalidAuthTokens]: {
    message: "Invalid tokens.",
    recoverySuggestion: "Make sure the tokens are valid."
  }
};
var assert7 = createAssertionFunction(tokenValidationErrorMap);

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/constants.mjs
var AUTH_KEY_PREFIX = "CognitoIdentityServiceProvider";

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenStore.mjs
var DefaultTokenStore = class {
  getKeyValueStorage() {
    if (!this.keyValueStorage) {
      throw new AuthError({
        name: "KeyValueStorageNotFoundException",
        message: "KeyValueStorage was not found in TokenStore"
      });
    }
    return this.keyValueStorage;
  }
  setKeyValueStorage(keyValueStorage) {
    this.keyValueStorage = keyValueStorage;
  }
  setAuthConfig(authConfig) {
    this.authConfig = authConfig;
  }
  async loadTokens() {
    try {
      const authKeys = await this.getAuthKeys();
      const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);
      if (!accessTokenString) {
        throw new AuthError({
          name: "NoSessionFoundException",
          message: "Auth session was not found. Make sure to call signIn."
        });
      }
      const accessToken = decodeJWT(accessTokenString);
      const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);
      const idToken = itString ? decodeJWT(itString) : void 0;
      const refreshToken = await this.getKeyValueStorage().getItem(authKeys.refreshToken) ?? void 0;
      const clockDriftString = await this.getKeyValueStorage().getItem(authKeys.clockDrift) ?? "0";
      const clockDrift = Number.parseInt(clockDriftString);
      const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);
      const tokens = {
        accessToken,
        idToken,
        refreshToken,
        deviceMetadata: await this.getDeviceMetadata() ?? void 0,
        clockDrift,
        username: await this.getLastAuthUser()
      };
      if (signInDetails) {
        tokens.signInDetails = JSON.parse(signInDetails);
      }
      return tokens;
    } catch (err) {
      return null;
    }
  }
  async storeTokens(tokens) {
    assert7(tokens !== void 0, TokenProviderErrorCode.InvalidAuthTokens);
    const lastAuthUser = tokens.username;
    await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);
    const authKeys = await this.getAuthKeys();
    await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());
    if (tokens.idToken) {
      await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());
    } else {
      await this.getKeyValueStorage().removeItem(authKeys.idToken);
    }
    if (tokens.refreshToken) {
      await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);
    } else {
      await this.getKeyValueStorage().removeItem(authKeys.refreshToken);
    }
    if (tokens.deviceMetadata) {
      if (tokens.deviceMetadata.deviceKey) {
        await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);
      }
      if (tokens.deviceMetadata.deviceGroupKey) {
        await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);
      }
      await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);
    }
    if (tokens.signInDetails) {
      await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));
    } else {
      await this.getKeyValueStorage().removeItem(authKeys.signInDetails);
    }
    await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);
  }
  async clearTokens() {
    const authKeys = await this.getAuthKeys();
    await Promise.all([
      this.getKeyValueStorage().removeItem(authKeys.accessToken),
      this.getKeyValueStorage().removeItem(authKeys.idToken),
      this.getKeyValueStorage().removeItem(authKeys.clockDrift),
      this.getKeyValueStorage().removeItem(authKeys.refreshToken),
      this.getKeyValueStorage().removeItem(authKeys.signInDetails),
      this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()),
      this.getKeyValueStorage().removeItem(authKeys.oauthMetadata)
    ]);
  }
  async getDeviceMetadata(username) {
    const authKeys = await this.getAuthKeys(username);
    const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);
    const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);
    const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);
    return randomPassword && deviceGroupKey && deviceKey ? {
      deviceKey,
      deviceGroupKey,
      randomPassword
    } : null;
  }
  async clearDeviceMetadata(username) {
    const authKeys = await this.getAuthKeys(username);
    await Promise.all([
      this.getKeyValueStorage().removeItem(authKeys.deviceKey),
      this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey),
      this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)
    ]);
  }
  async getAuthKeys(username) {
    assertTokenProviderConfig(this.authConfig?.Cognito);
    const lastAuthUser = username ?? await this.getLastAuthUser();
    return createKeysForAuthStorage(AUTH_KEY_PREFIX, `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);
  }
  getLastAuthUserKey() {
    assertTokenProviderConfig(this.authConfig?.Cognito);
    const identifier = this.authConfig.Cognito.userPoolClientId;
    return `${AUTH_KEY_PREFIX}.${identifier}.LastAuthUser`;
  }
  async getLastAuthUser() {
    const lastAuthUser = await this.getKeyValueStorage().getItem(this.getLastAuthUserKey()) ?? "username";
    return lastAuthUser;
  }
  async setOAuthMetadata(metadata) {
    const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();
    await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));
  }
  async getOAuthMetadata() {
    const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();
    const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);
    return oauthMetadata && JSON.parse(oauthMetadata);
  }
};
var createKeysForAuthStorage = (provider, identifier) => {
  return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);
};
function getAuthStorageKeys(authKeys) {
  const keys = Object.values({ ...authKeys });
  return (prefix, identifier) => keys.reduce((acc, authKey) => ({
    ...acc,
    [authKey]: `${prefix}.${identifier}.${authKey}`
  }), {});
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInWithRedirectStore.mjs
var V5_HOSTED_UI_KEY = "amplify-signin-with-hostedUI";
var name = "CognitoIdentityServiceProvider";
var DefaultOAuthStore = class {
  constructor(keyValueStorage) {
    this.keyValueStorage = keyValueStorage;
  }
  async clearOAuthInflightData() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await Promise.all([
      this.keyValueStorage.removeItem(authKeys.inflightOAuth),
      this.keyValueStorage.removeItem(authKeys.oauthPKCE),
      this.keyValueStorage.removeItem(authKeys.oauthState)
    ]);
  }
  async clearOAuthData() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await this.clearOAuthInflightData();
    await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY);
    return this.keyValueStorage.removeItem(authKeys.oauthSignIn);
  }
  loadOAuthState() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.getItem(authKeys.oauthState);
  }
  storeOAuthState(state) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.setItem(authKeys.oauthState, state);
  }
  loadPKCE() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.getItem(authKeys.oauthPKCE);
  }
  storePKCE(pkce) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);
  }
  setAuthConfig(authConfigParam) {
    this.cognitoConfig = authConfigParam;
  }
  async loadOAuthInFlight() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    return await this.keyValueStorage.getItem(authKeys.inflightOAuth) === "true";
  }
  async storeOAuthInFlight(inflight) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);
  }
  async loadOAuthSignIn() {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);
    const [isOAuthSignIn, preferPrivateSession] = (await this.keyValueStorage.getItem(authKeys.oauthSignIn))?.split(",") ?? [];
    return {
      isOAuthSignIn: isOAuthSignIn === "true" || isLegacyHostedUISignIn === "true",
      preferPrivateSession: preferPrivateSession === "true"
    };
  }
  async storeOAuthSignIn(oauthSignIn2, preferPrivateSession = false) {
    assertTokenProviderConfig(this.cognitoConfig);
    const authKeys = createKeysForAuthStorage2(name, this.cognitoConfig.userPoolClientId);
    await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn2},${preferPrivateSession}`);
  }
};
var createKeysForAuthStorage2 = (provider, identifier) => {
  return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthStore.mjs
var oAuthStore = new DefaultOAuthStore(defaultStorage);

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/inflightPromise.mjs
var inflightPromises = [];
var addInflightPromise = (resolver) => {
  inflightPromises.push(resolver);
};
var resolveAndClearInflightPromises = () => {
  while (inflightPromises.length) {
    inflightPromises.pop()?.();
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenOrchestrator.mjs
var TokenOrchestrator = class {
  constructor() {
    this.waitForInflightOAuth = isBrowser() ? async () => {
      if (!await oAuthStore.loadOAuthInFlight()) {
        return;
      }
      if (this.inflightPromise) {
        return this.inflightPromise;
      }
      this.inflightPromise = new Promise((resolve, _reject) => {
        addInflightPromise(resolve);
      });
      return this.inflightPromise;
    } : async () => {
    };
  }
  setAuthConfig(authConfig) {
    oAuthStore.setAuthConfig(authConfig.Cognito);
    this.authConfig = authConfig;
  }
  setTokenRefresher(tokenRefresher) {
    this.tokenRefresher = tokenRefresher;
  }
  setAuthTokenStore(tokenStore) {
    this.tokenStore = tokenStore;
  }
  getTokenStore() {
    if (!this.tokenStore) {
      throw new AuthError({
        name: "EmptyTokenStoreException",
        message: "TokenStore not set"
      });
    }
    return this.tokenStore;
  }
  getTokenRefresher() {
    if (!this.tokenRefresher) {
      throw new AuthError({
        name: "EmptyTokenRefresherException",
        message: "TokenRefresher not set"
      });
    }
    return this.tokenRefresher;
  }
  async getTokens(options) {
    let tokens;
    try {
      assertTokenProviderConfig(this.authConfig?.Cognito);
    } catch (_err) {
      return null;
    }
    await this.waitForInflightOAuth();
    this.inflightPromise = void 0;
    tokens = await this.getTokenStore().loadTokens();
    const username = await this.getTokenStore().getLastAuthUser();
    if (tokens === null) {
      return null;
    }
    const idTokenExpired = !!tokens?.idToken && isTokenExpired({
      expiresAt: (tokens.idToken?.payload?.exp ?? 0) * 1e3,
      clockDrift: tokens.clockDrift ?? 0
    });
    const accessTokenExpired = isTokenExpired({
      expiresAt: (tokens.accessToken?.payload?.exp ?? 0) * 1e3,
      clockDrift: tokens.clockDrift ?? 0
    });
    if (options?.forceRefresh || idTokenExpired || accessTokenExpired) {
      tokens = await this.refreshTokens({
        tokens,
        username
      });
      if (tokens === null) {
        return null;
      }
    }
    return {
      accessToken: tokens?.accessToken,
      idToken: tokens?.idToken,
      signInDetails: tokens?.signInDetails
    };
  }
  async refreshTokens({ tokens, username }) {
    try {
      const { signInDetails } = tokens;
      const newTokens = await this.getTokenRefresher()({
        tokens,
        authConfig: this.authConfig,
        username
      });
      newTokens.signInDetails = signInDetails;
      await this.setTokens({ tokens: newTokens });
      Hub.dispatch("auth", { event: "tokenRefresh" }, "Auth", AMPLIFY_SYMBOL);
      return newTokens;
    } catch (err) {
      return this.handleErrors(err);
    }
  }
  handleErrors(err) {
    assertServiceError(err);
    if (err.name !== AmplifyErrorCode.NetworkError) {
      this.clearTokens();
    }
    Hub.dispatch("auth", {
      event: "tokenRefresh_failure",
      data: { error: err }
    }, "Auth", AMPLIFY_SYMBOL);
    if (err.name.startsWith("NotAuthorizedException")) {
      return null;
    }
    throw err;
  }
  async setTokens({ tokens }) {
    return this.getTokenStore().storeTokens(tokens);
  }
  async clearTokens() {
    return this.getTokenStore().clearTokens();
  }
  getDeviceMetadata(username) {
    return this.getTokenStore().getDeviceMetadata(username);
  }
  clearDeviceMetadata(username) {
    return this.getTokenStore().clearDeviceMetadata(username);
  }
  setOAuthMetadata(metadata) {
    return this.getTokenStore().setOAuthMetadata(metadata);
  }
  getOAuthMetadata() {
    return this.getTokenStore().getOAuthMetadata();
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/CognitoUserPoolsTokenProvider.mjs
var CognitoUserPoolsTokenProvider = class {
  constructor() {
    this.authTokenStore = new DefaultTokenStore();
    this.authTokenStore.setKeyValueStorage(defaultStorage);
    this.tokenOrchestrator = new TokenOrchestrator();
    this.tokenOrchestrator.setAuthTokenStore(this.authTokenStore);
    this.tokenOrchestrator.setTokenRefresher(refreshAuthTokens);
  }
  getTokens({ forceRefresh } = { forceRefresh: false }) {
    return this.tokenOrchestrator.getTokens({ forceRefresh });
  }
  setKeyValueStorage(keyValueStorage) {
    this.authTokenStore.setKeyValueStorage(keyValueStorage);
  }
  setAuthConfig(authConfig) {
    this.authTokenStore.setAuthConfig(authConfig);
    this.tokenOrchestrator.setAuthConfig(authConfig);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/tokenProvider.mjs
var cognitoUserPoolsTokenProvider = new CognitoUserPoolsTokenProvider();
var { tokenOrchestrator } = cognitoUserPoolsTokenProvider;

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/cacheTokens.mjs
async function cacheCognitoTokens(AuthenticationResult) {
  if (AuthenticationResult.AccessToken) {
    const accessToken = decodeJWT(AuthenticationResult.AccessToken);
    const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1e3;
    const currentTime = (/* @__PURE__ */ new Date()).getTime();
    const clockDrift = accessTokenIssuedAtInMillis > 0 ? accessTokenIssuedAtInMillis - currentTime : 0;
    let idToken;
    let refreshToken;
    let deviceMetadata;
    if (AuthenticationResult.RefreshToken) {
      refreshToken = AuthenticationResult.RefreshToken;
    }
    if (AuthenticationResult.IdToken) {
      idToken = decodeJWT(AuthenticationResult.IdToken);
    }
    if (AuthenticationResult?.NewDeviceMetadata) {
      deviceMetadata = AuthenticationResult.NewDeviceMetadata;
    }
    const tokens = {
      accessToken,
      idToken,
      refreshToken,
      clockDrift,
      deviceMetadata,
      username: AuthenticationResult.username
    };
    if (AuthenticationResult?.signInDetails) {
      tokens.signInDetails = AuthenticationResult.signInDetails;
    }
    await tokenOrchestrator.setTokens({
      tokens
    });
  } else {
    throw new AmplifyError({
      message: "Invalid tokens",
      name: "InvalidTokens",
      recoverySuggestion: "Check Cognito UserPool settings"
    });
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/dispatchSignedInHubEvent.mjs
var ERROR_MESSAGE = "Unable to get user session following successful sign-in.";
var dispatchSignedInHubEvent = async () => {
  try {
    Hub.dispatch("auth", {
      event: "signedIn",
      data: await getCurrentUser2()
    }, "Auth", AMPLIFY_SYMBOL);
  } catch (error) {
    if (error.name === USER_UNAUTHENTICATED_EXCEPTION) {
      throw new AuthError({
        name: UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION,
        message: ERROR_MESSAGE,
        recoverySuggestion: "This most likely is due to auth tokens not being persisted. If you are using cookie store, please ensure cookies can be correctly set from your server."
      });
    }
    throw error;
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/store/autoSignInStore.mjs
function defaultState() {
  return {
    active: false
  };
}
var autoSignInReducer = (state, action) => {
  switch (action.type) {
    case "SET_USERNAME":
      return {
        ...state,
        username: action.value
      };
    case "SET_SESSION":
      return {
        ...state,
        session: action.value
      };
    case "START":
      return {
        ...state,
        active: true
      };
    case "RESET":
      return defaultState();
    default:
      return state;
  }
};
var createAutoSignInStore = (reducer) => {
  let currentState = reducer(defaultState(), { type: "RESET" });
  return {
    getState: () => currentState,
    dispatch: (action) => {
      currentState = reducer(currentState, action);
    }
  };
};
var autoSignInStore = createAutoSignInStore(autoSignInReducer);

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/store/signInStore.mjs
var MS_TO_EXPIRY = 3 * 60 * 1e3;
var TGT_STATE = "CognitoSignInState";
var SIGN_IN_STATE_KEYS = {
  username: `${TGT_STATE}.username`,
  challengeName: `${TGT_STATE}.challengeName`,
  signInSession: `${TGT_STATE}.signInSession`,
  expiry: `${TGT_STATE}.expiry`
};
var signInReducer = (state, action) => {
  switch (action.type) {
    case "SET_SIGN_IN_SESSION":
      persistSignInState({ signInSession: action.value });
      return {
        ...state,
        signInSession: action.value
      };
    case "SET_SIGN_IN_STATE":
      persistSignInState(action.value);
      return {
        ...action.value
      };
    case "SET_CHALLENGE_NAME":
      persistSignInState({ challengeName: action.value });
      return {
        ...state,
        challengeName: action.value
      };
    case "SET_USERNAME":
      persistSignInState({ username: action.value });
      return {
        ...state,
        username: action.value
      };
    case "SET_INITIAL_STATE":
      return getInitialState();
    case "RESET_STATE":
      clearPersistedSignInState();
      return getDefaultState();
    // this state is never reachable
    default:
      return state;
  }
};
var isExpired = (expiryDate) => {
  const expiryTimestamp = Number(expiryDate);
  const currentTimestamp = Date.now();
  return expiryTimestamp <= currentTimestamp;
};
var resetActiveSignInState = () => {
  signInStore.dispatch({ type: "RESET_STATE" });
};
var clearPersistedSignInState = () => {
  for (const stateKey of Object.values(SIGN_IN_STATE_KEYS)) {
    syncSessionStorage.removeItem(stateKey);
  }
};
var getDefaultState = () => ({
  username: void 0,
  challengeName: void 0,
  signInSession: void 0
});
var getInitialState = () => {
  const expiry = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.expiry);
  if (!expiry || isExpired(expiry)) {
    clearPersistedSignInState();
    return getDefaultState();
  }
  const username = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.username) ?? void 0;
  const challengeName = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.challengeName) ?? void 0;
  const signInSession = syncSessionStorage.getItem(SIGN_IN_STATE_KEYS.signInSession) ?? void 0;
  return {
    username,
    challengeName,
    signInSession
  };
};
var createStore = (reducer) => {
  let currentState = reducer(getDefaultState(), { type: "SET_INITIAL_STATE" });
  return {
    getState: () => currentState,
    dispatch: (action) => {
      currentState = reducer(currentState, action);
    }
  };
};
var signInStore = createStore(signInReducer);
function setActiveSignInState(state) {
  signInStore.dispatch({
    type: "SET_SIGN_IN_STATE",
    value: state
  });
}
var persistSignInState = ({ challengeName, signInSession, username }) => {
  username && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.username, username);
  challengeName && syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.challengeName, challengeName);
  if (signInSession) {
    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.signInSession, signInSession);
    syncSessionStorage.setItem(SIGN_IN_STATE_KEYS.expiry, String(Date.now() + MS_TO_EXPIRY));
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/errors.mjs
var PasskeyError = class _PasskeyError extends AmplifyError {
  constructor(params) {
    super(params);
    this.constructor = _PasskeyError;
    Object.setPrototypeOf(this, _PasskeyError.prototype);
  }
};
var PasskeyErrorCode;
(function(PasskeyErrorCode2) {
  PasskeyErrorCode2["PasskeyNotSupported"] = "PasskeyNotSupported";
  PasskeyErrorCode2["PasskeyAlreadyExists"] = "PasskeyAlreadyExists";
  PasskeyErrorCode2["InvalidPasskeyRegistrationOptions"] = "InvalidPasskeyRegistrationOptions";
  PasskeyErrorCode2["InvalidPasskeyAuthenticationOptions"] = "InvalidPasskeyAuthenticationOptions";
  PasskeyErrorCode2["RelyingPartyMismatch"] = "RelyingPartyMismatch";
  PasskeyErrorCode2["PasskeyRegistrationFailed"] = "PasskeyRegistrationFailed";
  PasskeyErrorCode2["PasskeyRetrievalFailed"] = "PasskeyRetrievalFailed";
  PasskeyErrorCode2["PasskeyRegistrationCanceled"] = "PasskeyRegistrationCanceled";
  PasskeyErrorCode2["PasskeyAuthenticationCanceled"] = "PasskeyAuthenticationCanceled";
  PasskeyErrorCode2["PasskeyOperationAborted"] = "PasskeyOperationAborted";
})(PasskeyErrorCode || (PasskeyErrorCode = {}));
var notSupportedRecoverySuggestion = "Passkeys may not be supported on this device. Ensure your application is running in a secure context (HTTPS) and Web Authentication API is supported.";
var abortOrCancelRecoverySuggestion = "User may have canceled the ceremony or another interruption has occurred. Check underlying error for details.";
var misconfigurationRecoverySuggestion = "Ensure your user pool is configured to support the WEB_AUTHN as an authentication factor.";
var passkeyErrorMap = {
  [PasskeyErrorCode.PasskeyNotSupported]: {
    message: "Passkeys may not be supported on this device.",
    recoverySuggestion: notSupportedRecoverySuggestion
  },
  [PasskeyErrorCode.InvalidPasskeyRegistrationOptions]: {
    message: "Invalid passkey registration options.",
    recoverySuggestion: misconfigurationRecoverySuggestion
  },
  [PasskeyErrorCode.InvalidPasskeyAuthenticationOptions]: {
    message: "Invalid passkey authentication options.",
    recoverySuggestion: misconfigurationRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyRegistrationFailed]: {
    message: "Device failed to create passkey.",
    recoverySuggestion: notSupportedRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyRetrievalFailed]: {
    message: "Device failed to retrieve passkey.",
    recoverySuggestion: "Passkeys may not be available on this device. Try an alternative authentication factor like PASSWORD, EMAIL_OTP, or SMS_OTP."
  },
  [PasskeyErrorCode.PasskeyAlreadyExists]: {
    message: "Passkey already exists in authenticator.",
    recoverySuggestion: "Proceed with existing passkey or try again after deleting the credential."
  },
  [PasskeyErrorCode.PasskeyRegistrationCanceled]: {
    message: "Passkey registration ceremony has been canceled.",
    recoverySuggestion: abortOrCancelRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyAuthenticationCanceled]: {
    message: "Passkey authentication ceremony has been canceled.",
    recoverySuggestion: abortOrCancelRecoverySuggestion
  },
  [PasskeyErrorCode.PasskeyOperationAborted]: {
    message: "Passkey operation has been aborted.",
    recoverySuggestion: abortOrCancelRecoverySuggestion
  },
  [PasskeyErrorCode.RelyingPartyMismatch]: {
    message: "Relying party does not match current domain.",
    recoverySuggestion: "Ensure relying party identifier matches current domain."
  }
};
var assertPasskeyError = createAssertionFunction(passkeyErrorMap, PasskeyError);
var handlePasskeyAuthenticationError = (err) => {
  if (err instanceof PasskeyError) {
    return err;
  }
  if (err instanceof Error) {
    if (err.name === "NotAllowedError") {
      const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyAuthenticationCanceled];
      return new PasskeyError({
        name: PasskeyErrorCode.PasskeyAuthenticationCanceled,
        message,
        recoverySuggestion,
        underlyingError: err
      });
    }
  }
  return handlePasskeyError(err);
};
var handlePasskeyError = (err) => {
  if (err instanceof Error) {
    if (err.name === "AbortError") {
      const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.PasskeyOperationAborted];
      return new PasskeyError({
        name: PasskeyErrorCode.PasskeyOperationAborted,
        message,
        recoverySuggestion,
        underlyingError: err
      });
    }
    if (err.name === "SecurityError") {
      const { message, recoverySuggestion } = passkeyErrorMap[PasskeyErrorCode.RelyingPartyMismatch];
      return new PasskeyError({
        name: PasskeyErrorCode.RelyingPartyMismatch,
        message,
        recoverySuggestion,
        underlyingError: err
      });
    }
  }
  return new PasskeyError({
    name: AmplifyErrorCode.Unknown,
    message: "An unknown error has occurred.",
    underlyingError: err
  });
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/getIsPasskeySupported.mjs
var getIsPasskeySupported = () => {
  return isBrowser() && window.isSecureContext && "credentials" in navigator && typeof window.PublicKeyCredential === "function";
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/convert/base64url/convertArrayBufferToBase64Url.mjs
var convertArrayBufferToBase64Url = (buffer2) => {
  return base64Encoder.convert(new Uint8Array(buffer2), {
    urlSafe: true,
    skipPadding: true
  });
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/convert/base64url/convertBase64UrlToArrayBuffer.mjs
var convertBase64UrlToArrayBuffer = (base64url) => {
  return Uint8Array.from(base64Decoder.convert(base64url, { urlSafe: true }), (x) => x.charCodeAt(0)).buffer;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/serde.mjs
var deserializeJsonToPkcGetOptions = (input) => {
  const challengeBuffer = convertBase64UrlToArrayBuffer(input.challenge);
  const allowedCredentialsWithBuffer = (input.allowCredentials || []).map((allowedCred) => ({
    ...allowedCred,
    id: convertBase64UrlToArrayBuffer(allowedCred.id)
  }));
  return {
    ...input,
    challenge: challengeBuffer,
    allowCredentials: allowedCredentialsWithBuffer
  };
};
var serializePkcWithAssertionToJson = (input) => {
  const response = {
    clientDataJSON: convertArrayBufferToBase64Url(input.response.clientDataJSON),
    authenticatorData: convertArrayBufferToBase64Url(input.response.authenticatorData),
    signature: convertArrayBufferToBase64Url(input.response.signature)
  };
  if (input.response.userHandle) {
    response.userHandle = convertArrayBufferToBase64Url(input.response.userHandle);
  }
  const resultJson = {
    id: input.id,
    rawId: convertArrayBufferToBase64Url(input.rawId),
    type: input.type,
    clientExtensionResults: input.getClientExtensionResults(),
    response
  };
  if (input.authenticatorAttachment) {
    resultJson.authenticatorAttachment = input.authenticatorAttachment;
  }
  return resultJson;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/types/index.mjs
function assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential) {
  assertPasskeyError(credential && credential instanceof PublicKeyCredential && credential.response instanceof AuthenticatorAssertionResponse, PasskeyErrorCode.PasskeyRetrievalFailed);
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/getPasskey.mjs
var getPasskey = async (input) => {
  try {
    const isPasskeySupported = getIsPasskeySupported();
    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);
    const passkeyGetOptions = deserializeJsonToPkcGetOptions(input);
    const credential = await navigator.credentials.get({
      publicKey: passkeyGetOptions
    });
    assertCredentialIsPkcWithAuthenticatorAssertionResponse(credential);
    return serializePkcWithAssertionToJson(credential);
  } catch (err) {
    throw handlePasskeyAuthenticationError(err);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmDeviceClient.mjs
var createConfirmDeviceClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ConfirmDevice"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/textEncoder/index.mjs
var textEncoder = {
  convert(input) {
    return new TextEncoder().encode(input);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/BigInteger/BigInteger.mjs
function BigInteger(a, b) {
  if (a != null)
    this.fromString(a, b);
}
function nbi() {
  return new BigInteger(null, null);
}
var dbits;
var canary = 244837814094590;
var j_lm = (canary & 16777215) === 15715070;
function am1(i, x, w, j2, c, n) {
  while (--n >= 0) {
    const v = x * this[i++] + w[j2] + c;
    c = Math.floor(v / 67108864);
    w[j2++] = v & 67108863;
  }
  return c;
}
function am2(i, x, w, j2, c, n) {
  const xl2 = x & 32767;
  const xh2 = x >> 15;
  while (--n >= 0) {
    let l = this[i] & 32767;
    const h2 = this[i++] >> 15;
    const m = xh2 * l + h2 * xl2;
    l = xl2 * l + ((m & 32767) << 15) + w[j2] + (c & 1073741823);
    c = (l >>> 30) + (m >>> 15) + xh2 * h2 + (c >>> 30);
    w[j2++] = l & 1073741823;
  }
  return c;
}
function am3(i, x, w, j2, c, n) {
  const xl2 = x & 16383;
  const xh2 = x >> 14;
  while (--n >= 0) {
    let l = this[i] & 16383;
    const h2 = this[i++] >> 14;
    const m = xh2 * l + h2 * xl2;
    l = xl2 * l + ((m & 16383) << 14) + w[j2] + c;
    c = (l >> 28) + (m >> 14) + xh2 * h2;
    w[j2++] = l & 268435455;
  }
  return c;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName === "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;
  dbits = 30;
} else if (inBrowser && j_lm && navigator.appName !== "Netscape") {
  BigInteger.prototype.am = am1;
  dbits = 26;
} else {
  BigInteger.prototype.am = am3;
  dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP;
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = [];
var rr;
var vv;
rr = "0".charCodeAt(0);
for (vv = 0; vv <= 9; ++vv)
  BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for (vv = 10; vv < 36; ++vv)
  BI_RC[rr++] = vv;
function int2char(n) {
  return BI_RM.charAt(n);
}
function intAt(s, i) {
  const c = BI_RC[s.charCodeAt(i)];
  return c == null ? -1 : c;
}
function bnpCopyTo(r) {
  for (let i = this.t - 1; i >= 0; --i)
    r[i] = this[i];
  r.t = this.t;
  r.s = this.s;
}
function bnpFromInt(x) {
  this.t = 1;
  this.s = x < 0 ? -1 : 0;
  if (x > 0)
    this[0] = x;
  else if (x < -1)
    this[0] = x + this.DV;
  else
    this.t = 0;
}
function nbv(i) {
  const r = nbi();
  r.fromInt(i);
  return r;
}
function bnpFromString(s, b) {
  let k;
  if (b === 16)
    k = 4;
  else if (b === 8)
    k = 3;
  else if (b === 2)
    k = 1;
  else if (b === 32)
    k = 5;
  else if (b === 4)
    k = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  this.t = 0;
  this.s = 0;
  let i = s.length;
  let mi2 = false;
  let sh2 = 0;
  while (--i >= 0) {
    const x = intAt(s, i);
    if (x < 0) {
      if (s.charAt(i) === "-")
        mi2 = true;
      continue;
    }
    mi2 = false;
    if (sh2 === 0)
      this[this.t++] = x;
    else if (sh2 + k > this.DB) {
      this[this.t - 1] |= (x & (1 << this.DB - sh2) - 1) << sh2;
      this[this.t++] = x >> this.DB - sh2;
    } else
      this[this.t - 1] |= x << sh2;
    sh2 += k;
    if (sh2 >= this.DB)
      sh2 -= this.DB;
  }
  this.clamp();
  if (mi2)
    BigInteger.ZERO.subTo(this, this);
}
function bnpClamp() {
  const c = this.s & this.DM;
  while (this.t > 0 && this[this.t - 1] == c)
    --this.t;
}
function bnToString(b) {
  if (this.s < 0)
    return "-" + this.negate().toString(b);
  let k;
  if (b == 16)
    k = 4;
  else if (b === 8)
    k = 3;
  else if (b === 2)
    k = 1;
  else if (b === 32)
    k = 5;
  else if (b === 4)
    k = 2;
  else
    throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
  const km2 = (1 << k) - 1;
  let d;
  let m = false;
  let r = "";
  let i = this.t;
  let p = this.DB - i * this.DB % k;
  if (i-- > 0) {
    if (p < this.DB && (d = this[i] >> p) > 0) {
      m = true;
      r = int2char(d);
    }
    while (i >= 0) {
      if (p < k) {
        d = (this[i] & (1 << p) - 1) << k - p;
        d |= this[--i] >> (p += this.DB - k);
      } else {
        d = this[i] >> (p -= k) & km2;
        if (p <= 0) {
          p += this.DB;
          --i;
        }
      }
      if (d > 0)
        m = true;
      if (m)
        r += int2char(d);
    }
  }
  return m ? r : "0";
}
function bnNegate() {
  const r = nbi();
  BigInteger.ZERO.subTo(this, r);
  return r;
}
function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}
function bnCompareTo(a) {
  let r = this.s - a.s;
  if (r != 0)
    return r;
  let i = this.t;
  r = i - a.t;
  if (r != 0)
    return this.s < 0 ? -r : r;
  while (--i >= 0)
    if ((r = this[i] - a[i]) != 0)
      return r;
  return 0;
}
function nbits(x) {
  let r = 1;
  let t;
  if ((t = x >>> 16) !== 0) {
    x = t;
    r += 16;
  }
  if ((t = x >> 8) !== 0) {
    x = t;
    r += 8;
  }
  if ((t = x >> 4) !== 0) {
    x = t;
    r += 4;
  }
  if ((t = x >> 2) !== 0) {
    x = t;
    r += 2;
  }
  if ((t = x >> 1) !== 0) {
    x = t;
    r += 1;
  }
  return r;
}
function bnBitLength() {
  if (this.t <= 0)
    return 0;
  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}
function bnpDLShiftTo(n, r) {
  let i;
  for (i = this.t - 1; i >= 0; --i)
    r[i + n] = this[i];
  for (i = n - 1; i >= 0; --i)
    r[i] = 0;
  r.t = this.t + n;
  r.s = this.s;
}
function bnpDRShiftTo(n, r) {
  for (let i = n; i < this.t; ++i)
    r[i - n] = this[i];
  r.t = Math.max(this.t - n, 0);
  r.s = this.s;
}
function bnpLShiftTo(n, r) {
  const bs = n % this.DB;
  const cbs = this.DB - bs;
  const bm2 = (1 << cbs) - 1;
  const ds = Math.floor(n / this.DB);
  let c = this.s << bs & this.DM;
  let i;
  for (i = this.t - 1; i >= 0; --i) {
    r[i + ds + 1] = this[i] >> cbs | c;
    c = (this[i] & bm2) << bs;
  }
  for (i = ds - 1; i >= 0; --i)
    r[i] = 0;
  r[ds] = c;
  r.t = this.t + ds + 1;
  r.s = this.s;
  r.clamp();
}
function bnpRShiftTo(n, r) {
  r.s = this.s;
  const ds = Math.floor(n / this.DB);
  if (ds >= this.t) {
    r.t = 0;
    return;
  }
  const bs = n % this.DB;
  const cbs = this.DB - bs;
  const bm2 = (1 << bs) - 1;
  r[0] = this[ds] >> bs;
  for (let i = ds + 1; i < this.t; ++i) {
    r[i - ds - 1] |= (this[i] & bm2) << cbs;
    r[i - ds] = this[i] >> bs;
  }
  if (bs > 0)
    r[this.t - ds - 1] |= (this.s & bm2) << cbs;
  r.t = this.t - ds;
  r.clamp();
}
function bnpSubTo(a, r) {
  let i = 0;
  let c = 0;
  const m = Math.min(a.t, this.t);
  while (i < m) {
    c += this[i] - a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
  }
  if (a.t < this.t) {
    c -= a.s;
    while (i < this.t) {
      c += this[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while (i < a.t) {
      c -= a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c -= a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c < -1)
    r[i++] = this.DV + c;
  else if (c > 0)
    r[i++] = c;
  r.t = i;
  r.clamp();
}
function bnpMultiplyTo(a, r) {
  const x = this.abs();
  const y = a.abs();
  let i = x.t;
  r.t = i + y.t;
  while (--i >= 0)
    r[i] = 0;
  for (i = 0; i < y.t; ++i)
    r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
  r.s = 0;
  r.clamp();
  if (this.s !== a.s)
    BigInteger.ZERO.subTo(r, r);
}
function bnpSquareTo(r) {
  const x = this.abs();
  let i = r.t = 2 * x.t;
  while (--i >= 0)
    r[i] = 0;
  for (i = 0; i < x.t - 1; ++i) {
    const c = x.am(i, x[i], r, 2 * i, 0, 1);
    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
      r[i + x.t] -= x.DV;
      r[i + x.t + 1] = 1;
    }
  }
  if (r.t > 0)
    r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
  r.s = 0;
  r.clamp();
}
function bnpDivRemTo(m, q, r) {
  const pm2 = m.abs();
  if (pm2.t <= 0)
    return;
  const pt2 = this.abs();
  if (pt2.t < pm2.t) {
    if (q != null)
      q.fromInt(0);
    if (r != null)
      this.copyTo(r);
    return;
  }
  if (r === null)
    r = nbi();
  const y = nbi();
  const ts2 = this.s;
  const ms = m.s;
  const nsh = this.DB - nbits(pm2[pm2.t - 1]);
  if (nsh > 0) {
    pm2.lShiftTo(nsh, y);
    pt2.lShiftTo(nsh, r);
  } else {
    pm2.copyTo(y);
    pt2.copyTo(r);
  }
  const ys = y.t;
  const y0 = y[ys - 1];
  if (y0 === 0)
    return;
  const yt2 = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
  const d12 = this.FV / yt2;
  const d2 = (1 << this.F1) / yt2;
  const e = 1 << this.F2;
  let i = r.t;
  let j2 = i - ys;
  const t = q === null ? nbi() : q;
  y.dlShiftTo(j2, t);
  if (r.compareTo(t) >= 0) {
    r[r.t++] = 1;
    r.subTo(t, r);
  }
  BigInteger.ONE.dlShiftTo(ys, t);
  t.subTo(y, y);
  while (y.t < ys)
    y[y.t++] = 0;
  while (--j2 >= 0) {
    let qd2 = r[--i] === y0 ? this.DM : Math.floor(r[i] * d12 + (r[i - 1] + e) * d2);
    if ((r[i] += y.am(0, qd2, r, j2, 0, ys)) < qd2) {
      y.dlShiftTo(j2, t);
      r.subTo(t, r);
      while (r[i] < --qd2)
        r.subTo(t, r);
    }
  }
  if (q !== null) {
    r.drShiftTo(ys, q);
    if (ts2 !== ms)
      BigInteger.ZERO.subTo(q, q);
  }
  r.t = ys;
  r.clamp();
  if (nsh > 0)
    r.rShiftTo(nsh, r);
  if (ts2 < 0)
    BigInteger.ZERO.subTo(r, r);
}
function bnMod(a) {
  const r = nbi();
  this.abs().divRemTo(a, null, r);
  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
    a.subTo(r, r);
  return r;
}
function bnpInvDigit() {
  if (this.t < 1)
    return 0;
  const x = this[0];
  if ((x & 1) === 0)
    return 0;
  let y = x & 3;
  y = y * (2 - (x & 15) * y) & 15;
  y = y * (2 - (x & 255) * y) & 255;
  y = y * (2 - ((x & 65535) * y & 65535)) & 65535;
  y = y * (2 - x * y % this.DV) % this.DV;
  return y > 0 ? this.DV - y : -y;
}
function bnEquals(a) {
  return this.compareTo(a) === 0;
}
function bnpAddTo(a, r) {
  let i = 0;
  let c = 0;
  const m = Math.min(a.t, this.t);
  while (i < m) {
    c += this[i] + a[i];
    r[i++] = c & this.DM;
    c >>= this.DB;
  }
  if (a.t < this.t) {
    c += a.s;
    while (i < this.t) {
      c += this[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += this.s;
  } else {
    c += this.s;
    while (i < a.t) {
      c += a[i];
      r[i++] = c & this.DM;
      c >>= this.DB;
    }
    c += a.s;
  }
  r.s = c < 0 ? -1 : 0;
  if (c > 0)
    r[i++] = c;
  else if (c < -1)
    r[i++] = this.DV + c;
  r.t = i;
  r.clamp();
}
function bnAdd(a) {
  const r = nbi();
  this.addTo(a, r);
  return r;
}
function bnSubtract(a) {
  const r = nbi();
  this.subTo(a, r);
  return r;
}
function bnMultiply(a) {
  const r = nbi();
  this.multiplyTo(a, r);
  return r;
}
function bnDivide(a) {
  const r = nbi();
  this.divRemTo(a, r, null);
  return r;
}
function Montgomery(m) {
  this.m = m;
  this.mp = m.invDigit();
  this.mpl = this.mp & 32767;
  this.mph = this.mp >> 15;
  this.um = (1 << m.DB - 15) - 1;
  this.mt2 = 2 * m.t;
}
function montConvert(x) {
  const r = nbi();
  x.abs().dlShiftTo(this.m.t, r);
  r.divRemTo(this.m, null, r);
  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0)
    this.m.subTo(r, r);
  return r;
}
function montRevert(x) {
  const r = nbi();
  x.copyTo(r);
  this.reduce(r);
  return r;
}
function montReduce(x) {
  while (x.t <= this.mt2)
    x[x.t++] = 0;
  for (let i = 0; i < this.m.t; ++i) {
    let j2 = x[i] & 32767;
    const u0 = j2 * this.mpl + ((j2 * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM;
    j2 = i + this.m.t;
    x[j2] += this.m.am(0, u0, x, i, 0, this.m.t);
    while (x[j2] >= x.DV) {
      x[j2] -= x.DV;
      x[++j2]++;
    }
  }
  x.clamp();
  x.drShiftTo(this.m.t, x);
  if (x.compareTo(this.m) >= 0)
    x.subTo(this.m, x);
}
function montSqrTo(x, r) {
  x.squareTo(r);
  this.reduce(r);
}
function montMulTo(x, y, r) {
  x.multiplyTo(y, r);
  this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo;
function bnModPow(e, m, callback) {
  let i = e.bitLength();
  let k;
  let r = nbv(1);
  const z = new Montgomery(m);
  if (i <= 0)
    return r;
  else if (i < 18)
    k = 1;
  else if (i < 48)
    k = 3;
  else if (i < 144)
    k = 4;
  else if (i < 768)
    k = 5;
  else
    k = 6;
  const g = [];
  let n = 3;
  const k12 = k - 1;
  const km2 = (1 << k) - 1;
  g[1] = z.convert(this);
  if (k > 1) {
    const g2 = nbi();
    z.sqrTo(g[1], g2);
    while (n <= km2) {
      g[n] = nbi();
      z.mulTo(g2, g[n - 2], g[n]);
      n += 2;
    }
  }
  let j2 = e.t - 1;
  let w;
  let is1 = true;
  let r2 = nbi();
  let t;
  i = nbits(e[j2]) - 1;
  while (j2 >= 0) {
    if (i >= k12)
      w = e[j2] >> i - k12 & km2;
    else {
      w = (e[j2] & (1 << i + 1) - 1) << k12 - i;
      if (j2 > 0)
        w |= e[j2 - 1] >> this.DB + i - k12;
    }
    n = k;
    while ((w & 1) === 0) {
      w >>= 1;
      --n;
    }
    if ((i -= n) < 0) {
      i += this.DB;
      --j2;
    }
    if (is1) {
      g[w].copyTo(r);
      is1 = false;
    } else {
      while (n > 1) {
        z.sqrTo(r, r2);
        z.sqrTo(r2, r);
        n -= 2;
      }
      if (n > 0)
        z.sqrTo(r, r2);
      else {
        t = r;
        r = r2;
        r2 = t;
      }
      z.mulTo(r2, g[w], r);
    }
    while (j2 >= 0 && (e[j2] & 1 << i) === 0) {
      z.sqrTo(r, r2);
      t = r;
      r = r2;
      r2 = t;
      if (--i < 0) {
        i = this.DB - 1;
        --j2;
      }
    }
  }
  const result = z.revert(r);
  callback(null, result);
  return result;
}
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo;
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow;
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateS.mjs
var calculateS = async ({ a, g, k, x, B, N, U }) => {
  return new Promise((resolve, reject) => {
    g.modPow(x, N, (outerErr, outerResult) => {
      if (outerErr) {
        reject(outerErr);
        return;
      }
      B.subtract(k.multiply(outerResult)).modPow(a.add(U.multiply(x)), N, (innerErr, innerResult) => {
        if (innerErr) {
          reject(innerErr);
          return;
        }
        resolve(innerResult.mod(N));
      });
    });
  });
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/constants.mjs
var
var SHORT_TO_HEX2 = {};
var HEX_TO_SHORT2 = {};
for (let i = 0; i < 256; i++) {
  let encodedByte = i.toString(16).toLowerCase();
  if (encodedByte.length === 1) {
    encodedByte = `0${encodedByte}`;
  }
  SHORT_TO_HEX2[i] = encodedByte;
  HEX_TO_SHORT2[encodedByte] = i;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getBytesFromHex.mjs
var getBytesFromHex = (encoded) => {
  if (encoded.length % 2 !== 0) {
    throw new Error("Hex encoded strings must have an even number length");
  }
  const out = new Uint8Array(encoded.length / 2);
  for (let i = 0; i < encoded.length; i += 2) {
    const encodedByte = encoded.slice(i, i + 2).toLowerCase();
    if (encodedByte in HEX_TO_SHORT2) {
      out[i / 2] = HEX_TO_SHORT2[encodedByte];
    } else {
      throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
  }
  return out;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHexFromBytes.mjs
var getHexFromBytes = (bytes) => {
  let out = "";
  for (let i = 0; i < bytes.byteLength; i++) {
    out += SHORT_TO_HEX2[bytes[i]];
  }
  return out;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHashFromData.mjs
var getHashFromData = (data) => {
  const sha256 = new Sha256();
  sha256.update(data);
  const hashedData = sha256.digestSync();
  const hashHexFromUint8 = getHexFromBytes(hashedData);
  return new Array(64 - hashHexFromUint8.length).join("0") + hashHexFromUint8;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHashFromHex.mjs
var getHashFromHex = (hexStr) => getHashFromData(getBytesFromHex(hexStr));

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getPaddedHex.mjs
var HEX_MSB_REGEX = /^[89a-f]/i;
var getPaddedHex = (bigInt) => {
  if (!(bigInt instanceof BigInteger)) {
    throw new Error("Not a BigInteger");
  }
  const isNegative = bigInt.compareTo(BigInteger.ZERO) < 0;
  let hexStr = bigInt.abs().toString(16);
  hexStr = hexStr.length % 2 !== 0 ? `0${hexStr}` : hexStr;
  hexStr = HEX_MSB_REGEX.test(hexStr) ? `00${hexStr}` : hexStr;
  if (isNegative) {
    const invertedNibbles = hexStr.split("").map((x) => {
      const invertedNibble = ~parseInt(x, 16) & 15;
      return "0123456789ABCDEF".charAt(invertedNibble);
    }).join("");
    const flippedBitsBI = new BigInteger(invertedNibbles, 16).add(BigInteger.ONE);
    hexStr = flippedBitsBI.toString(16);
    if (hexStr.toUpperCase().startsWith("FF8")) {
      hexStr = hexStr.substring(2);
    }
  }
  return hexStr;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateU.mjs
var calculateU = ({ A, B }) => {
  const U = new BigInteger(getHashFromHex(getPaddedHex(A) + getPaddedHex(B)), 16);
  if (U.equals(BigInteger.ZERO)) {
    throw new Error("U cannot be zero.");
  }
  return U;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getHkdfKey.mjs
var getHkdfKey = (ikm, salt, info) => {
  const awsCryptoHash = new Sha256(salt);
  awsCryptoHash.update(ikm);
  const resultFromAWSCryptoPrk = awsCryptoHash.digestSync();
  const awsCryptoHashHmac = new Sha256(resultFromAWSCryptoPrk);
  awsCryptoHashHmac.update(info);
  const resultFromAWSCryptoHmac = awsCryptoHashHmac.digestSync();
  const hashHexFromAWSCrypto = resultFromAWSCryptoHmac;
  return hashHexFromAWSCrypto.slice(0, 16);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getRandomBytes.mjs
var getRandomBytes = (nBytes) => {
  const str = new WordArray().random(nBytes).toString();
  return getBytesFromHex(str);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getRandomString.mjs
var getRandomString = () => base64Encoder.convert(getRandomBytes(40));

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/AuthenticationHelper/AuthenticationHelper.mjs
var AuthenticationHelper = class {
  constructor({ userPoolName, a, g, A, N }) {
    this.encoder = textEncoder;
    this.userPoolName = userPoolName;
    this.a = a;
    this.g = g;
    this.A = A;
    this.N = N;
    this.k = new BigInteger(getHashFromHex(`${getPaddedHex(N)}${getPaddedHex(g)}`), 16);
  }
  /**
   * @returns {string} Generated random value included in password hash.
   */
  getRandomPassword() {
    if (!this.randomPassword) {
      throw new AuthError({
        name: "EmptyBigIntegerRandomPassword",
        message: "random password is empty"
      });
    }
    return this.randomPassword;
  }
  /**
   * @returns {string} Generated random value included in devices hash.
   */
  getSaltToHashDevices() {
    if (!this.saltToHashDevices) {
      throw new AuthError({
        name: "EmptyBigIntegersaltToHashDevices",
        message: "saltToHashDevices is empty"
      });
    }
    return this.saltToHashDevices;
  }
  /**
   * @returns {string} Value used to verify devices.
   */
  getVerifierDevices() {
    if (!this.verifierDevices) {
      throw new AuthError({
        name: "EmptyBigIntegerVerifierDevices",
        message: "verifyDevices is empty"
      });
    }
    return this.verifierDevices;
  }
  /**
   * Generate salts and compute verifier.
   *
   * @param {string} deviceGroupKey Devices to generate verifier for.
   * @param {string} username User to generate verifier for.
   *
   * @returns {Promise<void>}
   */
  async generateHashDevice(deviceGroupKey, username) {
    this.randomPassword = getRandomString();
    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;
    const hashedString = getHashFromData(combinedString);
    const hexRandom = getHexFromBytes(getRandomBytes(16));
    this.saltToHashDevices = getPaddedHex(new BigInteger(hexRandom, 16));
    return new Promise((resolve, reject) => {
      this.g.modPow(new BigInteger(getHashFromHex(this.saltToHashDevices + hashedString), 16), this.N, (err, result) => {
        if (err) {
          reject(err);
          return;
        }
        this.verifierDevices = getPaddedHex(result);
        resolve();
      });
    });
  }
  /**
   * Calculates the final HKDF key based on computed S value, computed U value and the key
   *
   * @param {String} username Username.
   * @param {String} password Password.
   * @param {AuthBigInteger} B Server B value.
   * @param {AuthBigInteger} salt Generated salt.
   */
  async getPasswordAuthenticationKey({ username, password, serverBValue, salt }) {
    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {
      throw new Error("B cannot be zero.");
    }
    const U = calculateU({
      A: this.A,
      B: serverBValue
    });
    const usernamePassword = `${this.userPoolName}${username}:${password}`;
    const usernamePasswordHash = getHashFromData(usernamePassword);
    const x = new BigInteger(getHashFromHex(getPaddedHex(salt) + usernamePasswordHash), 16);
    const S = await calculateS({
      a: this.a,
      g: this.g,
      k: this.k,
      x,
      B: serverBValue,
      N: this.N,
      U
    });
    const context2 = this.encoder.convert("Caldera Derived Key");
    const spacer = this.encoder.convert(String.fromCharCode(1));
    const info = new Uint8Array(context2.byteLength + spacer.byteLength);
    info.set(context2, 0);
    info.set(spacer, context2.byteLength);
    const hkdfKey = getHkdfKey(getBytesFromHex(getPaddedHex(S)), getBytesFromHex(getPaddedHex(U)), info);
    return hkdfKey;
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/calculate/calculateA.mjs
var calculateA = async ({ a, g, N }) => {
  return new Promise((resolve, reject) => {
    g.modPow(a, N, (err, A) => {
      if (err) {
        reject(err);
        return;
      }
      if (A.mod(N).equals(BigInteger.ZERO)) {
        reject(new Error("Illegal parameter. A mod N cannot be 0."));
        return;
      }
      resolve(A);
    });
  });
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getAuthenticationHelper.mjs
var getAuthenticationHelper = async (userPoolName) => {
  const N = new BigInteger(INIT_N, 16);
  const g = new BigInteger("2", 16);
  const a = generateRandomBigInteger();
  const A = await calculateA({ a, g, N });
  return new AuthenticationHelper({ userPoolName, a, g, A, N });
};
var generateRandomBigInteger = () => {
  const hexRandom = getHexFromBytes(getRandomBytes(128));
  return new BigInteger(hexRandom, 16);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/getNewDeviceMetadata.mjs
async function getNewDeviceMetadata({ userPoolId, userPoolEndpoint, newDeviceMetadata, accessToken }) {
  if (!newDeviceMetadata)
    return void 0;
  const userPoolName = userPoolId.split("_")[1] || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const deviceKey = newDeviceMetadata?.DeviceKey;
  const deviceGroupKey = newDeviceMetadata?.DeviceGroupKey;
  try {
    await authenticationHelper.generateHashDevice(deviceGroupKey ?? "", deviceKey ?? "");
  } catch (errGenHash) {
    return void 0;
  }
  const deviceSecretVerifierConfig = {
    Salt: base64Encoder.convert(getBytesFromHex(authenticationHelper.getSaltToHashDevices())),
    PasswordVerifier: base64Encoder.convert(getBytesFromHex(authenticationHelper.getVerifierDevices()))
  };
  const randomPassword = authenticationHelper.getRandomPassword();
  try {
    const confirmDevice = createConfirmDeviceClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    await confirmDevice({ region: getRegionFromUserPoolId(userPoolId) }, {
      AccessToken: accessToken,
      DeviceName: await getDeviceName(),
      DeviceKey: newDeviceMetadata?.DeviceKey,
      DeviceSecretVerifierConfig: deviceSecretVerifierConfig
    });
    return {
      deviceKey,
      deviceGroupKey,
      randomPassword
    };
  } catch (error) {
    return void 0;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleWebAuthnSignInResult.mjs
async function handleWebAuthnSignInResult(challengeParameters) {
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { username, signInSession, signInDetails, challengeName } = signInStore.getState();
  if (challengeName !== "WEB_AUTHN" || !username) {
    throw new AuthError({
      name: AuthErrorCodes.SignInException,
      message: "Unable to proceed due to invalid sign in state."
    });
  }
  const { CREDENTIAL_REQUEST_OPTIONS: credentialRequestOptions } = challengeParameters;
  assertPasskeyError(!!credentialRequestOptions, PasskeyErrorCode.InvalidPasskeyAuthenticationOptions);
  const cred = await getPasskey(JSON.parse(credentialRequestOptions));
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: authConfig.userPoolEndpoint
    })
  });
  const { ChallengeName: nextChallengeName, ChallengeParameters: nextChallengeParameters, AuthenticationResult: authenticationResult, Session: nextSession } = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "WEB_AUTHN",
    ChallengeResponses: {
      USERNAME: username,
      CREDENTIAL: JSON.stringify(cred)
    },
    ClientId: authConfig.userPoolClientId,
    Session: signInSession
  });
  setActiveSignInState({
    signInSession: nextSession,
    username,
    challengeName: nextChallengeName,
    signInDetails
  });
  if (authenticationResult) {
    await cacheCognitoTokens({
      ...authenticationResult,
      username,
      NewDeviceMetadata: await getNewDeviceMetadata({
        userPoolId: authConfig.userPoolId,
        userPoolEndpoint: authConfig.userPoolEndpoint,
        newDeviceMetadata: authenticationResult.NewDeviceMetadata,
        accessToken: authenticationResult.AccessToken
      }),
      signInDetails
    });
    signInStore.dispatch({ type: "RESET_STATE" });
    await dispatchSignedInHubEvent();
    return {
      isSignedIn: true,
      nextStep: { signInStep: "DONE" }
    };
  }
  if (nextChallengeName === "WEB_AUTHN") {
    throw new AuthError({
      name: AuthErrorCodes.SignInException,
      message: "Sequential WEB_AUTHN challenges returned from underlying service cannot be handled."
    });
  }
  return {
    challengeName: nextChallengeName,
    challengeParameters: nextChallengeParameters
  };
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getNowString.mjs
var MONTH_NAMES = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
var WEEK_NAMES = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
var getNowString = () => {
  const now = /* @__PURE__ */ new Date();
  const weekDay = WEEK_NAMES[now.getUTCDay()];
  const month = MONTH_NAMES[now.getUTCMonth()];
  const day = now.getUTCDate();
  let hours = now.getUTCHours();
  if (hours < 10) {
    hours = `0${hours}`;
  }
  let minutes = now.getUTCMinutes();
  if (minutes < 10) {
    minutes = `0${minutes}`;
  }
  let seconds = now.getUTCSeconds();
  if (seconds < 10) {
    seconds = `0${seconds}`;
  }
  const year = now.getUTCFullYear();
  const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;
  return dateNow;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/srp/getSignatureString.mjs
var getSignatureString = ({ userPoolName, username, challengeParameters, dateNow, hkdf }) => {
  const bufUPIDaToB = textEncoder.convert(userPoolName);
  const bufUNaToB = textEncoder.convert(username);
  const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);
  const bufDNaToB = textEncoder.convert(dateNow);
  const bufConcat = new Uint8Array(bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength + bufDNaToB.byteLength);
  bufConcat.set(bufUPIDaToB, 0);
  bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);
  bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);
  bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);
  const awsCryptoHash = new Sha256(hkdf);
  awsCryptoHash.update(bufConcat);
  const resultFromAWSCrypto = awsCryptoHash.digestSync();
  const signatureString = base64Encoder.convert(resultFromAWSCrypto);
  return signatureString;
};
var urlB64ToUint8Array = (base64String) => {
  const padding = "=".repeat((4 - base64String.length % 4) % 4);
  const base64 = (base64String + padding).replace(/-/g, "+").replace(/_/g, "/");
  const rawData = base64Decoder.convert(base64);
  const outputArray = new Uint8Array(rawData.length);
  for (let i = 0; i < rawData.length; ++i) {
    outputArray[i] = rawData.charCodeAt(i);
  }
  return outputArray;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/handleDeviceSRPAuth.mjs
async function handleDeviceSRPAuth({ username, config: config2, clientMetadata, session, tokenOrchestrator: tokenOrchestrator2 }) {
  const { userPoolId, userPoolEndpoint } = config2;
  const clientId = config2.userPoolClientId;
  const deviceMetadata = await tokenOrchestrator2?.getDeviceMetadata(username);
  assertDeviceMetadata(deviceMetadata);
  const authenticationHelper = await getAuthenticationHelper(deviceMetadata.deviceGroupKey);
  const challengeResponses = {
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16),
    DEVICE_KEY: deviceMetadata.deviceKey
  };
  const jsonReqResponseChallenge = {
    ChallengeName: "DEVICE_SRP_AUTH",
    ClientId: clientId,
    ChallengeResponses: challengeResponses,
    ClientMetadata: clientMetadata,
    Session: session
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { ChallengeParameters: respondedChallengeParameters, Session } = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);
  return handleDevicePasswordVerifier(username, respondedChallengeParameters, clientMetadata, Session, authenticationHelper, config2, tokenOrchestrator2);
}
async function handleDevicePasswordVerifier(username, challengeParameters, clientMetadata, session, authenticationHelper, { userPoolId, userPoolClientId, userPoolEndpoint }, tokenOrchestrator2) {
  const deviceMetadata = await tokenOrchestrator2?.getDeviceMetadata(username);
  assertDeviceMetadata(deviceMetadata);
  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);
  const salt = new BigInteger(challengeParameters?.SALT, 16);
  const { deviceKey } = deviceMetadata;
  const { deviceGroupKey } = deviceMetadata;
  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({
    username: deviceMetadata.deviceKey,
    password: deviceMetadata.randomPassword,
    serverBValue,
    salt
  });
  const dateNow = getNowString();
  const challengeResponses = {
    USERNAME: challengeParameters?.USERNAME ?? username,
    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,
    TIMESTAMP: dateNow,
    PASSWORD_CLAIM_SIGNATURE: getSignatureString({
      username: deviceKey,
      userPoolName: deviceGroupKey,
      challengeParameters,
      dateNow,
      hkdf
    }),
    DEVICE_KEY: deviceKey
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReqResponseChallenge = {
    ChallengeName: "DEVICE_PASSWORD_VERIFIER",
    ClientId: userPoolClientId,
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/handlePasswordVerifierChallenge.mjs
async function handlePasswordVerifierChallenge(password, challengeParameters, clientMetadata, session, authenticationHelper, config2, tokenOrchestrator2) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = userPoolId?.split("_")[1] || "";
  const serverBValue = new BigInteger(challengeParameters?.SRP_B, 16);
  const salt = new BigInteger(challengeParameters?.SALT, 16);
  const username = challengeParameters?.USER_ID_FOR_SRP;
  if (!username)
    throw new AuthError({
      name: "EmptyUserIdForSRPException",
      message: "USER_ID_FOR_SRP was not found in challengeParameters"
    });
  const hkdf = await authenticationHelper.getPasswordAuthenticationKey({
    username,
    password,
    serverBValue,
    salt
  });
  const dateNow = getNowString();
  const challengeResponses = {
    USERNAME: username,
    PASSWORD_CLAIM_SECRET_BLOCK: challengeParameters?.SECRET_BLOCK,
    TIMESTAMP: dateNow,
    PASSWORD_CLAIM_SIGNATURE: getSignatureString({
      username,
      userPoolName,
      challengeParameters,
      dateNow,
      hkdf
    })
  };
  const deviceMetadata = await tokenOrchestrator2.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReqResponseChallenge = {
    ChallengeName: "PASSWORD_VERIFIER",
    ChallengeResponses: challengeResponses,
    ClientMetadata: clientMetadata,
    Session: session,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({ region: getRegionFromUserPoolId(userPoolId) }, jsonReqResponseChallenge);
  if (response.ChallengeName === "DEVICE_SRP_AUTH")
    return handleDeviceSRPAuth({
      username,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  return response;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/retryOnResourceNotFoundException.mjs
async function retryOnResourceNotFoundException(func, args, username, tokenOrchestrator2) {
  try {
    return await func(...args);
  } catch (error) {
    if (error instanceof AuthError && error.name === "ResourceNotFoundException" && error.message.includes("Device does not exist.")) {
      await tokenOrchestrator2.clearDeviceMetadata(username);
      return func(...args);
    }
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/setActiveSignInUsername.mjs
function setActiveSignInUsername(username) {
  const { dispatch } = signInStore;
  dispatch({ type: "SET_USERNAME", value: username });
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/flows/shared/handlePasswordSRP.mjs
async function handlePasswordSRP({ username, password, clientMetadata, config: config2, tokenOrchestrator: tokenOrchestrator2, authFlow, preferredChallenge }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = userPoolId?.split("_")[1] || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const authParameters = {
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16)
  };
  if (authFlow === "USER_AUTH" && preferredChallenge) {
    authParameters.PREFERRED_CHALLENGE = preferredChallenge;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: authFlow,
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const resp = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const { ChallengeParameters: challengeParameters, Session: session } = resp;
  const activeUsername = challengeParameters?.USERNAME ?? username;
  setActiveSignInUsername(activeUsername);
  if (resp.ChallengeName === "PASSWORD_VERIFIER") {
    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [
      password,
      challengeParameters,
      clientMetadata,
      session,
      authenticationHelper,
      config2,
      tokenOrchestrator2
    ], activeUsername, tokenOrchestrator2);
  }
  return resp;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallenge.mjs
async function initiateSelectedChallenge({ username, session, selectedChallenge, config: config2, clientMetadata }) {
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: config2.userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(config2.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "SELECT_CHALLENGE",
    ChallengeResponses: {
      USERNAME: username,
      ANSWER: selectedChallenge
    },
    ClientId: config2.userPoolClientId,
    Session: session,
    ClientMetadata: clientMetadata
  });
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallengeWithPassword.mjs
async function handleSelectChallengeWithPassword(username, password, clientMetadata, config2, session) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const authParameters = {
    ANSWER: "PASSWORD",
    USERNAME: username,
    PASSWORD: password
  };
  const userContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "SELECT_CHALLENGE",
    ChallengeResponses: authParameters,
    ClientId: userPoolClientId,
    ClientMetadata: clientMetadata,
    Session: session,
    UserContextData: userContextData
  });
  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;
  setActiveSignInUsername(activeUsername);
  return response;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleSelectChallengeWithPasswordSRP.mjs
async function handleSelectChallengeWithPasswordSRP(username, password, clientMetadata, config2, session, tokenOrchestrator2) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = userPoolId.split("_")[1] || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const authParameters = {
    ANSWER: "PASSWORD_SRP",
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16)
  };
  const userContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, {
    ChallengeName: "SELECT_CHALLENGE",
    ChallengeResponses: authParameters,
    ClientId: userPoolClientId,
    ClientMetadata: clientMetadata,
    Session: session,
    UserContextData: userContextData
  });
  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;
  setActiveSignInUsername(activeUsername);
  if (response.ChallengeName === "PASSWORD_VERIFIER") {
    return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [
      password,
      response.ChallengeParameters,
      clientMetadata,
      response.Session,
      authenticationHelper,
      config2,
      tokenOrchestrator2
    ], activeUsername, tokenOrchestrator2);
  }
  return response;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInHelpers.mjs
var USER_ATTRIBUTES = "userAttributes.";
function isWebAuthnResultAuthSignInOutput(result) {
  return "isSignedIn" in result && "nextStep" in result;
}
async function handleCustomChallenge({ challengeResponse, clientMetadata, session, username, config: config2, tokenOrchestrator: tokenOrchestrator2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const challengeResponses = {
    USERNAME: username,
    ANSWER: challengeResponse
  };
  const deviceMetadata = await tokenOrchestrator2?.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    challengeResponses.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: "CUSTOM_CHALLENGE",
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
  if (response.ChallengeName === "DEVICE_SRP_AUTH") {
    return handleDeviceSRPAuth({
      username,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  }
  return response;
}
async function handleMFASetupChallenge({ challengeResponse, username, clientMetadata, session, deviceName, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  if (challengeResponse === "EMAIL") {
    return {
      ChallengeName: "MFA_SETUP",
      Session: session,
      ChallengeParameters: {
        MFAS_CAN_SETUP: '["EMAIL_OTP"]'
      },
      $metadata: {}
    };
  }
  if (challengeResponse === "TOTP") {
    return {
      ChallengeName: "MFA_SETUP",
      Session: session,
      ChallengeParameters: {
        MFAS_CAN_SETUP: '["SOFTWARE_TOKEN_MFA"]'
      },
      $metadata: {}
    };
  }
  const challengeResponses = {
    USERNAME: username
  };
  const isTOTPCode = /^\d+$/.test(challengeResponse);
  if (isTOTPCode) {
    const verifySoftwareToken = createVerifySoftwareTokenClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    const { Session } = await verifySoftwareToken({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
    }, {
      UserCode: challengeResponse,
      Session: session,
      FriendlyDeviceName: deviceName
    });
    signInStore.dispatch({
      type: "SET_SIGN_IN_SESSION",
      value: Session
    });
    const jsonReq = {
      ChallengeName: "MFA_SETUP",
      ChallengeResponses: challengeResponses,
      Session,
      ClientMetadata: clientMetadata,
      ClientId: userPoolClientId
    };
    const respondToAuthChallenge = createRespondToAuthChallengeClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    return respondToAuthChallenge({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
    }, jsonReq);
  }
  const isEmail = challengeResponse.includes("@");
  if (isEmail) {
    challengeResponses.EMAIL = challengeResponse;
    const jsonReq = {
      ChallengeName: "MFA_SETUP",
      ChallengeResponses: challengeResponses,
      Session: session,
      ClientMetadata: clientMetadata,
      ClientId: userPoolClientId
    };
    const respondToAuthChallenge = createRespondToAuthChallengeClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    return respondToAuthChallenge({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
    }, jsonReq);
  }
  throw new AuthError({
    name: AuthErrorCodes.SignInException,
    message: `Cannot proceed with MFA setup using challengeResponse: ${challengeResponse}`,
    recoverySuggestion: 'Try passing "EMAIL", "TOTP", a valid email, or OTP code as the challengeResponse.'
  });
}
async function handleSelectMFATypeChallenge({ challengeResponse, username, clientMetadata, session, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  assertValidationError(challengeResponse === "TOTP" || challengeResponse === "SMS" || challengeResponse === "EMAIL", AuthValidationErrorCode.IncorrectMFAMethod);
  const challengeResponses = {
    USERNAME: username,
    ANSWER: mapMfaType(challengeResponse)
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: "SELECT_MFA_TYPE",
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
}
async function handleCompleteNewPasswordChallenge({ challengeResponse, clientMetadata, session, username, requiredAttributes, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const challengeResponses = {
    ...createAttributes(requiredAttributes),
    NEW_PASSWORD: challengeResponse,
    USERNAME: username
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: "NEW_PASSWORD_REQUIRED",
    ChallengeResponses: challengeResponses,
    ClientMetadata: clientMetadata,
    Session: session,
    ClientId: userPoolClientId,
    UserContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
}
async function handleUserPasswordAuthFlow(username, password, clientMetadata, config2, tokenOrchestrator2) {
  const { userPoolClientId, userPoolId, userPoolEndpoint } = config2;
  const authParameters = {
    USERNAME: username,
    PASSWORD: password
  };
  const deviceMetadata = await tokenOrchestrator2.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: "USER_PASSWORD_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const activeUsername = response.ChallengeParameters?.USERNAME ?? response.ChallengeParameters?.USER_ID_FOR_SRP ?? username;
  setActiveSignInUsername(activeUsername);
  if (response.ChallengeName === "DEVICE_SRP_AUTH")
    return handleDeviceSRPAuth({
      username: activeUsername,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  return response;
}
async function handleUserSRPAuthFlow(username, password, clientMetadata, config2, tokenOrchestrator2) {
  return handlePasswordSRP({
    username,
    password,
    clientMetadata,
    config: config2,
    tokenOrchestrator: tokenOrchestrator2,
    authFlow: "USER_SRP_AUTH"
  });
}
async function handleCustomAuthFlowWithoutSRP(username, clientMetadata, config2, tokenOrchestrator2) {
  const { userPoolClientId, userPoolId, userPoolEndpoint } = config2;
  const authParameters = {
    USERNAME: username
  };
  const deviceMetadata = await tokenOrchestrator2.getDeviceMetadata(username);
  if (deviceMetadata && deviceMetadata.deviceKey) {
    authParameters.DEVICE_KEY = deviceMetadata.deviceKey;
  }
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: "CUSTOM_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const activeUsername = response.ChallengeParameters?.USERNAME ?? username;
  setActiveSignInUsername(activeUsername);
  if (response.ChallengeName === "DEVICE_SRP_AUTH")
    return handleDeviceSRPAuth({
      username: activeUsername,
      config: config2,
      clientMetadata,
      session: response.Session,
      tokenOrchestrator: tokenOrchestrator2
    });
  return response;
}
async function handleCustomSRPAuthFlow(username, password, clientMetadata, config2, tokenOrchestrator2) {
  assertTokenProviderConfig(config2);
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const userPoolName = userPoolId?.split("_")[1] || "";
  const authenticationHelper = await getAuthenticationHelper(userPoolName);
  const authParameters = {
    USERNAME: username,
    SRP_A: authenticationHelper.A.toString(16),
    CHALLENGE_NAME: "SRP_A"
  };
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    AuthFlow: "CUSTOM_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { ChallengeParameters: challengeParameters, Session: session } = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  const activeUsername = challengeParameters?.USERNAME ?? username;
  setActiveSignInUsername(activeUsername);
  return retryOnResourceNotFoundException(handlePasswordVerifierChallenge, [
    password,
    challengeParameters,
    clientMetadata,
    session,
    authenticationHelper,
    config2,
    tokenOrchestrator2
  ], activeUsername, tokenOrchestrator2);
}
async function getSignInResult(params) {
  const { challengeName, challengeParameters, availableChallenges } = params;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  switch (challengeName) {
    case "CUSTOM_CHALLENGE":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE",
          additionalInfo: challengeParameters
        }
      };
    case "MFA_SETUP": {
      const { signInSession, username } = signInStore.getState();
      const mfaSetupTypes = getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_SETUP)) || [];
      const allowedMfaSetupTypes = getAllowedMfaSetupTypes(mfaSetupTypes);
      const isTotpMfaSetupAvailable = allowedMfaSetupTypes.includes("TOTP");
      const isEmailMfaSetupAvailable = allowedMfaSetupTypes.includes("EMAIL");
      if (isTotpMfaSetupAvailable && isEmailMfaSetupAvailable) {
        return {
          isSignedIn: false,
          nextStep: {
            signInStep: "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION",
            allowedMFATypes: allowedMfaSetupTypes
          }
        };
      }
      if (isEmailMfaSetupAvailable) {
        return {
          isSignedIn: false,
          nextStep: {
            signInStep: "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP"
          }
        };
      }
      if (isTotpMfaSetupAvailable) {
        const associateSoftwareToken = createAssociateSoftwareTokenClient({
          endpointResolver: createCognitoUserPoolEndpointResolver({
            endpointOverride: authConfig.userPoolEndpoint
          })
        });
        const { Session, SecretCode: secretCode } = await associateSoftwareToken({ region: getRegionFromUserPoolId(authConfig.userPoolId) }, {
          Session: signInSession
        });
        signInStore.dispatch({
          type: "SET_SIGN_IN_SESSION",
          value: Session
        });
        return {
          isSignedIn: false,
          nextStep: {
            signInStep: "CONTINUE_SIGN_IN_WITH_TOTP_SETUP",
            totpSetupDetails: getTOTPSetupDetails(secretCode, username)
          }
        };
      }
      throw new AuthError({
        name: AuthErrorCodes.SignInException,
        message: `Cannot initiate MFA setup from available types: ${mfaSetupTypes}`
      });
    }
    case "NEW_PASSWORD_REQUIRED":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED",
          missingAttributes: parseAttributes(challengeParameters.requiredAttributes)
        }
      };
    case "SELECT_MFA_TYPE":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONTINUE_SIGN_IN_WITH_MFA_SELECTION",
          allowedMFATypes: getMFATypes(parseMFATypes(challengeParameters.MFAS_CAN_CHOOSE))
        }
      };
    case "SMS_OTP":
    case "SMS_MFA":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_SMS_CODE",
          codeDeliveryDetails: {
            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,
            destination: challengeParameters.CODE_DELIVERY_DESTINATION
          }
        }
      };
    case "SOFTWARE_TOKEN_MFA":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_TOTP_CODE"
        }
      };
    case "EMAIL_OTP":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_EMAIL_CODE",
          codeDeliveryDetails: {
            deliveryMedium: challengeParameters.CODE_DELIVERY_DELIVERY_MEDIUM,
            destination: challengeParameters.CODE_DELIVERY_DESTINATION
          }
        }
      };
    case "WEB_AUTHN": {
      const result = await handleWebAuthnSignInResult(challengeParameters);
      if (isWebAuthnResultAuthSignInOutput(result)) {
        return result;
      }
      return getSignInResult(result);
    }
    case "PASSWORD":
    case "PASSWORD_SRP":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONFIRM_SIGN_IN_WITH_PASSWORD"
        }
      };
    case "SELECT_CHALLENGE":
      return {
        isSignedIn: false,
        nextStep: {
          signInStep: "CONTINUE_SIGN_IN_WITH_FIRST_FACTOR_SELECTION",
          availableChallenges
        }
      };
  }
  throw new AuthError({
    name: AuthErrorCodes.SignInException,
    message: `An error occurred during the sign in process. ${challengeName} challengeName returned by the underlying service was not addressed.`
  });
}
function getTOTPSetupDetails(secretCode, username) {
  return {
    sharedSecret: secretCode,
    getSetupUri: (appName, accountName) => {
      const totpUri = `otpauth://totp/${appName}:${accountName ?? username}?secret=${secretCode}&issuer=${appName}`;
      return new AmplifyUrl(totpUri);
    }
  };
}
function getSignInResultFromError(errorName) {
  if (errorName === InitiateAuthException.PasswordResetRequiredException) {
    return {
      isSignedIn: false,
      nextStep: { signInStep: "RESET_PASSWORD" }
    };
  } else if (errorName === InitiateAuthException.UserNotConfirmedException) {
    return {
      isSignedIn: false,
      nextStep: { signInStep: "CONFIRM_SIGN_UP" }
    };
  }
}
function parseAttributes(attributes) {
  if (!attributes)
    return [];
  const parsedAttributes = JSON.parse(attributes).map((att) => att.includes(USER_ATTRIBUTES) ? att.replace(USER_ATTRIBUTES, "") : att);
  return parsedAttributes;
}
function createAttributes(attributes) {
  if (!attributes)
    return {};
  const newAttributes = {};
  Object.entries(attributes).forEach(([key, value]) => {
    if (value)
      newAttributes[`${USER_ATTRIBUTES}${key}`] = value;
  });
  return newAttributes;
}
async function handleChallengeName(username, challengeName, session, challengeResponse, config2, tokenOrchestrator2, clientMetadata, options) {
  const userAttributes = options?.userAttributes;
  const deviceName = options?.friendlyDeviceName;
  switch (challengeName) {
    case "WEB_AUTHN":
    case "SELECT_CHALLENGE":
      if (challengeResponse === "PASSWORD_SRP" || challengeResponse === "PASSWORD") {
        return {
          ChallengeName: challengeResponse,
          Session: session,
          $metadata: {}
        };
      }
      return initiateSelectedChallenge({
        username,
        session,
        selectedChallenge: challengeResponse,
        config: config2,
        clientMetadata
      });
    case "SELECT_MFA_TYPE":
      return handleSelectMFATypeChallenge({
        challengeResponse,
        clientMetadata,
        session,
        username,
        config: config2
      });
    case "MFA_SETUP":
      return handleMFASetupChallenge({
        challengeResponse,
        clientMetadata,
        session,
        username,
        deviceName,
        config: config2
      });
    case "NEW_PASSWORD_REQUIRED":
      return handleCompleteNewPasswordChallenge({
        challengeResponse,
        clientMetadata,
        session,
        username,
        requiredAttributes: userAttributes,
        config: config2
      });
    case "CUSTOM_CHALLENGE":
      return retryOnResourceNotFoundException(handleCustomChallenge, [
        {
          challengeResponse,
          clientMetadata,
          session,
          username,
          config: config2,
          tokenOrchestrator: tokenOrchestrator2
        }
      ], username, tokenOrchestrator2);
    case "SMS_MFA":
    case "SOFTWARE_TOKEN_MFA":
    case "SMS_OTP":
    case "EMAIL_OTP":
      return handleMFAChallenge({
        challengeName,
        challengeResponse,
        clientMetadata,
        session,
        username,
        config: config2
      });
    case "PASSWORD":
      return handleSelectChallengeWithPassword(username, challengeResponse, clientMetadata, config2, session);
    case "PASSWORD_SRP":
      return handleSelectChallengeWithPasswordSRP(
        username,
        challengeResponse,
        // This is the actual password
        clientMetadata,
        config2,
        session,
        tokenOrchestrator2
      );
  }
  throw new AuthError({
    name: AuthErrorCodes.SignInException,
    message: `An error occurred during the sign in process.
		${challengeName} challengeName returned by the underlying service was not addressed.`
  });
}
function mapMfaType(mfa) {
  let mfaType = "SMS_MFA";
  if (mfa === "TOTP")
    mfaType = "SOFTWARE_TOKEN_MFA";
  if (mfa === "EMAIL")
    mfaType = "EMAIL_OTP";
  return mfaType;
}
function getMFAType(type) {
  if (type === "SMS_MFA")
    return "SMS";
  if (type === "SOFTWARE_TOKEN_MFA")
    return "TOTP";
  if (type === "EMAIL_OTP")
    return "EMAIL";
}
function getMFATypes(types) {
  if (!types)
    return void 0;
  return types.map(getMFAType).filter(Boolean);
}
function parseMFATypes(mfa) {
  if (!mfa)
    return [];
  return JSON.parse(mfa);
}
function getAllowedMfaSetupTypes(availableMfaSetupTypes) {
  return availableMfaSetupTypes.filter((authMfaType) => authMfaType === "EMAIL" || authMfaType === "TOTP");
}
async function assertUserNotAuthenticated() {
  let authUser;
  try {
    authUser = await getCurrentUser2();
  } catch (error) {
  }
  if (authUser && authUser.userId && authUser.username) {
    throw new AuthError({
      name: USER_ALREADY_AUTHENTICATED_EXCEPTION,
      message: "There is already a signed in user.",
      recoverySuggestion: "Call signOut before calling signIn again."
    });
  }
}
function getActiveSignInUsername(username) {
  const state = signInStore.getState();
  return state.username ?? username;
}
async function handleMFAChallenge({ challengeName, challengeResponse, clientMetadata, session, username, config: config2 }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const challengeResponses = {
    USERNAME: username
  };
  if (challengeName === "EMAIL_OTP") {
    challengeResponses.EMAIL_OTP_CODE = challengeResponse;
  }
  if (challengeName === "SMS_MFA") {
    challengeResponses.SMS_MFA_CODE = challengeResponse;
  }
  if (challengeName === "SMS_OTP") {
    challengeResponses.SMS_OTP_CODE = challengeResponse;
  }
  if (challengeName === "SOFTWARE_TOKEN_MFA") {
    challengeResponses.SOFTWARE_TOKEN_MFA_CODE = challengeResponse;
  }
  const userContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const jsonReq = {
    ChallengeName: challengeName,
    ChallengeResponses: challengeResponses,
    Session: session,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData: userContextData
  };
  const respondToAuthChallenge = createRespondToAuthChallengeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  return respondToAuthChallenge({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignIn)
  }, jsonReq);
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithCustomAuth.mjs
async function signInWithCustomAuth(input) {
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { username, password, options } = input;
  const signInDetails = {
    loginId: username,
    authFlowType: "CUSTOM_WITHOUT_SRP"
  };
  const metadata = options?.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!password, AuthValidationErrorCode.CustomAuthSignInPassword);
  try {
    const { ChallengeName: retriedChallengeName, ChallengeParameters: retiredChallengeParameters, AuthenticationResult, Session } = await retryOnResourceNotFoundException(handleCustomAuthFlowWithoutSRP, [username, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: retriedChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: retriedChallengeName,
      challengeParameters: retiredChallengeParameters
    });
  } catch (error) {
    resetActiveSignInState();
    assertServiceError(error);
    const result = getSignInResultFromError(error.name);
    if (result)
      return result;
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithCustomSRPAuth.mjs
async function signInWithCustomSRPAuth(input) {
  const { username, password, options } = input;
  const signInDetails = {
    loginId: username,
    authFlowType: "CUSTOM_WITH_SRP"
  };
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const metadata = options?.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
  try {
    const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session } = await handleCustomSRPAuthFlow(username, password, metadata, authConfig, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: handledChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: handledChallengeName,
      challengeParameters: handledChallengeParameters
    });
  } catch (error) {
    resetActiveSignInState();
    assertServiceError(error);
    const result = getSignInResultFromError(error.name);
    if (result)
      return result;
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/autoSignIn.mjs
var initialAutoSignIn = async () => {
  throw new AuthError({
    name: AUTO_SIGN_IN_EXCEPTION,
    message: "The autoSignIn flow has not started, or has been cancelled/completed.",
    recoverySuggestion: "Please try to use the signIn API or log out before starting a new autoSignIn flow."
  });
};
var autoSignIn = initialAutoSignIn;
function setAutoSignIn(callback) {
  autoSignIn = callback;
}
function resetAutoSignIn(resetCallback = true) {
  if (resetCallback) {
    autoSignIn = initialAutoSignIn;
  }
  autoSignInStore.dispatch({ type: "RESET" });
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithSRP.mjs
async function signInWithSRP(input) {
  const { username, password } = input;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  const signInDetails = {
    loginId: username,
    authFlowType: "USER_SRP_AUTH"
  };
  assertTokenProviderConfig(authConfig);
  const clientMetaData = input.options?.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
  try {
    const { ChallengeName: handledChallengeName, ChallengeParameters: handledChallengeParameters, AuthenticationResult, Session } = await handleUserSRPAuthFlow(username, password, clientMetaData, authConfig, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: handledChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      resetAutoSignIn();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: handledChallengeName,
      challengeParameters: handledChallengeParameters
    });
  } catch (error) {
    resetActiveSignInState();
    resetAutoSignIn();
    assertServiceError(error);
    const result = getSignInResultFromError(error.name);
    if (result)
      return result;
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithUserPassword.mjs
async function signInWithUserPassword(input) {
  const { username, password, options } = input;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  const signInDetails = {
    loginId: username,
    authFlowType: "USER_PASSWORD_AUTH"
  };
  assertTokenProviderConfig(authConfig);
  const metadata = options?.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
  try {
    const { ChallengeName: retiredChallengeName, ChallengeParameters: retriedChallengeParameters, AuthenticationResult, Session } = await retryOnResourceNotFoundException(handleUserPasswordAuthFlow, [username, password, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: Session,
      username: activeUsername,
      challengeName: retiredChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        ...AuthenticationResult,
        username: activeUsername,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      resetAutoSignIn();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: retiredChallengeName,
      challengeParameters: retriedChallengeParameters
    });
  } catch (error) {
    resetActiveSignInState();
    resetAutoSignIn();
    assertServiceError(error);
    const result = getSignInResultFromError(error.name);
    if (result)
      return result;
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/client/flows/userAuth/handleUserAuthFlow.mjs
async function handleUserAuthFlow({ username, clientMetadata, config: config2, tokenOrchestrator: tokenOrchestrator2, preferredChallenge, password, session }) {
  const { userPoolId, userPoolClientId, userPoolEndpoint } = config2;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const authParameters = { USERNAME: username };
  if (preferredChallenge) {
    if (preferredChallenge === "PASSWORD_SRP") {
      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
      return handlePasswordSRP({
        username,
        password,
        clientMetadata,
        config: config2,
        tokenOrchestrator: tokenOrchestrator2,
        authFlow: "USER_AUTH",
        preferredChallenge
      });
    }
    if (preferredChallenge === "PASSWORD") {
      assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);
      authParameters.PASSWORD = password;
    }
    authParameters.PREFERRED_CHALLENGE = preferredChallenge;
  }
  const jsonReq = {
    AuthFlow: "USER_AUTH",
    AuthParameters: authParameters,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  };
  if (session) {
    jsonReq.Session = session;
  }
  const initiateAuth = createInitiateAuthClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const response = await initiateAuth({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignIn)
  }, jsonReq);
  setActiveSignInUsername(username);
  return response;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithUserAuth.mjs
async function signInWithUserAuth(input) {
  const { username, password, options } = input;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  const signInDetails = {
    loginId: username,
    authFlowType: "USER_AUTH"
  };
  assertTokenProviderConfig(authConfig);
  const clientMetaData = options?.clientMetadata;
  const preferredChallenge = options?.preferredChallenge;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);
  try {
    const handleUserAuthFlowInput = {
      username,
      config: authConfig,
      tokenOrchestrator,
      clientMetadata: clientMetaData,
      preferredChallenge,
      password
    };
    const autoSignInStoreState = autoSignInStore.getState();
    if (autoSignInStoreState.active && autoSignInStoreState.username === username) {
      handleUserAuthFlowInput.session = autoSignInStoreState.session;
    }
    const response = await handleUserAuthFlow(handleUserAuthFlowInput);
    const activeUsername = getActiveSignInUsername(username);
    setActiveSignInState({
      signInSession: response.Session,
      username: activeUsername,
      challengeName: response.ChallengeName,
      signInDetails
    });
    if (response.AuthenticationResult) {
      await cacheCognitoTokens({
        username: activeUsername,
        ...response.AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: response.AuthenticationResult.NewDeviceMetadata,
          accessToken: response.AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      resetAutoSignIn();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: response.ChallengeName,
      challengeParameters: response.ChallengeParameters,
      availableChallenges: "AvailableChallenges" in response ? response.AvailableChallenges : void 0
    });
  } catch (error) {
    resetActiveSignInState();
    resetAutoSignIn();
    assertServiceError(error);
    const result = getSignInResultFromError(error.name);
    if (result)
      return result;
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signIn.mjs
async function signIn(input) {
  resetAutoSignIn(false);
  const authFlowType = input.options?.authFlowType;
  await assertUserNotAuthenticated();
  switch (authFlowType) {
    case "USER_SRP_AUTH":
      return signInWithSRP(input);
    case "USER_PASSWORD_AUTH":
      return signInWithUserPassword(input);
    case "CUSTOM_WITHOUT_SRP":
      return signInWithCustomAuth(input);
    case "CUSTOM_WITH_SRP":
      return signInWithCustomSRPAuth(input);
    case "USER_AUTH":
      return signInWithUserAuth(input);
    default:
      return signInWithSRP(input);
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signUpHelpers.mjs
var MAX_AUTOSIGNIN_POLLING_MS = 3 * 60 * 1e3;
function handleCodeAutoSignIn(signInInput) {
  const stopHubListener = HubInternal.listen("auth-internal", async ({ payload }) => {
    switch (payload.event) {
      case "confirmSignUp": {
        const response = payload.data;
        if (response?.isSignUpComplete) {
          HubInternal.dispatch("auth-internal", {
            event: "autoSignIn"
          });
          setAutoSignIn(autoSignInWithCode(signInInput));
          stopHubListener();
        }
      }
    }
  });
  const timeOutId = setTimeout(() => {
    stopHubListener();
    clearTimeout(timeOutId);
    resetAutoSignIn();
  }, MAX_AUTOSIGNIN_POLLING_MS);
}
function debounce2(fun, delay2) {
  let timer2;
  return (args) => {
    if (!timer2) {
      fun(...args);
    }
    clearTimeout(timer2);
    timer2 = setTimeout(() => {
      timer2 = void 0;
    }, delay2);
  };
}
function handleAutoSignInWithLink(signInInput, resolve, reject) {
  const start = Date.now();
  const autoSignInPollingIntervalId = setInterval(async () => {
    const elapsedTime = Date.now() - start;
    const maxTime = MAX_AUTOSIGNIN_POLLING_MS;
    if (elapsedTime > maxTime) {
      clearInterval(autoSignInPollingIntervalId);
      reject(new AuthError({
        name: AUTO_SIGN_IN_EXCEPTION,
        message: "The account was not confirmed on time.",
        recoverySuggestion: "Try to verify your account by clicking the link sent your email or phone and then login manually."
      }));
      resetAutoSignIn();
    } else {
      try {
        const signInOutput = await signIn(signInInput);
        if (signInOutput.nextStep.signInStep !== "CONFIRM_SIGN_UP") {
          resolve(signInOutput);
          clearInterval(autoSignInPollingIntervalId);
          resetAutoSignIn();
        }
      } catch (error) {
        clearInterval(autoSignInPollingIntervalId);
        reject(error);
        resetAutoSignIn();
      }
    }
  }, 5e3);
}
var debouncedAutoSignInWithLink = debounce2(handleAutoSignInWithLink, 300);
var debouncedAutoSignWithCodeOrUserConfirmed = debounce2(handleAutoSignInWithCodeOrUserConfirmed, 300);
function autoSignInWhenUserIsConfirmedWithLink(signInInput) {
  return async () => {
    return new Promise((resolve, reject) => {
      debouncedAutoSignInWithLink([signInInput, resolve, reject]);
    });
  };
}
async function handleAutoSignInWithCodeOrUserConfirmed(signInInput, resolve, reject) {
  try {
    const output = signInInput?.options?.authFlowType === "USER_AUTH" ? await signInWithUserAuth(signInInput) : await signIn(signInInput);
    resolve(output);
    resetAutoSignIn();
  } catch (error) {
    reject(error);
    resetAutoSignIn();
  }
}
function autoSignInWithCode(signInInput) {
  return async () => {
    return new Promise((resolve, reject) => {
      debouncedAutoSignWithCodeOrUserConfirmed([signInInput, resolve, reject]);
    });
  };
}
var autoSignInUserConfirmed = autoSignInWithCode;

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createSignUpClient.mjs
var createSignUpClientDeserializer = () => async (response) => {
  if (response.statusCode >= 300) {
    const error = await parseJsonError(response);
    assertServiceError(error);
    if (
      // Missing Password Error
      // 1 validation error detected: Value at 'password'failed to satisfy constraint: Member must not be null
      error.name === SignUpException.InvalidParameterException && /'password'/.test(error.message) && /Member must not be null/.test(error.message)
    ) {
      const name2 = AuthValidationErrorCode.EmptySignUpPassword;
      const { message, recoverySuggestion } = validationErrorMap[name2];
      throw new AuthError({
        name: name2,
        message,
        recoverySuggestion
      });
    }
    throw new AuthError({ name: error.name, message: error.message });
  }
  return parseJsonBody(response);
};
var createSignUpClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("SignUp"), createSignUpClientDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signUp.mjs
async function signUp(input) {
  const { username, password, options } = input;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? "code";
  const { clientMetadata, validationData, autoSignIn: autoSignIn2 } = input.options ?? {};
  assertTokenProviderConfig(authConfig);
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);
  const signInServiceOptions = typeof autoSignIn2 !== "boolean" ? autoSignIn2 : void 0;
  const signInInput = {
    username,
    options: signInServiceOptions
  };
  if (signInServiceOptions?.authFlowType !== "CUSTOM_WITHOUT_SRP") {
    signInInput.password = password;
  }
  const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;
  const signUpClient = createSignUpClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const signUpClientInput = {
    Username: username,
    Password: void 0,
    UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),
    ClientMetadata: clientMetadata,
    ValidationData: validationData && toAttributeType(validationData),
    ClientId: userPoolClientId,
    UserContextData: getUserContextData({
      username,
      userPoolId,
      userPoolClientId
    })
  };
  if (password) {
    signUpClientInput.Password = password;
  }
  const { UserSub: userId, CodeDeliveryDetails: cdd, UserConfirmed: userConfirmed, Session: session } = await signUpClient({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)
  }, signUpClientInput);
  if (signInServiceOptions || autoSignIn2 === true) {
    autoSignInStore.dispatch({ type: "START" });
    autoSignInStore.dispatch({ type: "SET_USERNAME", value: username });
    autoSignInStore.dispatch({ type: "SET_SESSION", value: session });
  }
  const codeDeliveryDetails = {
    destination: cdd?.Destination,
    deliveryMedium: cdd?.DeliveryMedium,
    attributeName: cdd?.AttributeName
  };
  const isSignUpComplete = !!userConfirmed;
  const isAutoSignInStarted = autoSignInStore.getState().active;
  if (isSignUpComplete) {
    if (isAutoSignInStarted) {
      setAutoSignIn(autoSignInUserConfirmed(signInInput));
      return {
        isSignUpComplete: true,
        nextStep: {
          signUpStep: "COMPLETE_AUTO_SIGN_IN"
        },
        userId
      };
    }
    return {
      isSignUpComplete: true,
      nextStep: {
        signUpStep: "DONE"
      },
      userId
    };
  }
  if (isAutoSignInStarted) {
    if (signUpVerificationMethod === "link") {
      setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));
      return {
        isSignUpComplete: false,
        nextStep: {
          signUpStep: "COMPLETE_AUTO_SIGN_IN",
          codeDeliveryDetails
        },
        userId
      };
    }
    handleCodeAutoSignIn(signInInput);
  }
  return {
    isSignUpComplete: false,
    nextStep: {
      signUpStep: "CONFIRM_SIGN_UP",
      codeDeliveryDetails
    },
    userId
  };
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createForgotPasswordClient.mjs
var createForgotPasswordClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ForgotPassword"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resetPassword.mjs
async function resetPassword(input) {
  const { username } = input;
  assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
  const clientMetadata = input.options?.clientMetadata;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const forgotPassword = createForgotPasswordClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const res = await forgotPassword({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword)
  }, {
    Username: username,
    ClientMetadata: clientMetadata,
    ClientId: userPoolClientId,
    UserContextData
  });
  const codeDeliveryDetails = res.CodeDeliveryDetails;
  return {
    isPasswordReset: false,
    nextStep: {
      resetPasswordStep: "CONFIRM_RESET_PASSWORD_WITH_CODE",
      codeDeliveryDetails: {
        deliveryMedium: codeDeliveryDetails?.DeliveryMedium,
        destination: codeDeliveryDetails?.Destination,
        attributeName: codeDeliveryDetails?.AttributeName
      }
    }
  };
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmForgotPasswordClient.mjs
var createConfirmForgotPasswordClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ConfirmForgotPassword"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmResetPassword.mjs
async function confirmResetPassword(input) {
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
  const { username, newPassword } = input;
  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmResetPasswordUsername);
  assertValidationError(!!newPassword, AuthValidationErrorCode.EmptyConfirmResetPasswordNewPassword);
  const code = input.confirmationCode;
  assertValidationError(!!code, AuthValidationErrorCode.EmptyConfirmResetPasswordConfirmationCode);
  const metadata = input.options?.clientMetadata;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const confirmForgotPassword = createConfirmForgotPasswordClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  await confirmForgotPassword({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmResetPassword)
  }, {
    Username: username,
    ConfirmationCode: code,
    Password: newPassword,
    ClientMetadata: metadata,
    ClientId: authConfig.userPoolClientId,
    UserContextData
  });
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createResendConfirmationCodeClient.mjs
var createResendConfirmationCodeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ResendConfirmationCode"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/resendSignUpCode.mjs
async function resendSignUpCode(input) {
  const { username } = input;
  assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolClientId, userPoolId, userPoolEndpoint } = authConfig;
  const clientMetadata = input.options?.clientMetadata;
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const resendConfirmationCode = createResendConfirmationCodeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { CodeDeliveryDetails } = await resendConfirmationCode({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ResendSignUpCode)
  }, {
    Username: username,
    ClientMetadata: clientMetadata,
    ClientId: authConfig.userPoolClientId,
    UserContextData
  });
  const { DeliveryMedium, AttributeName, Destination } = {
    ...CodeDeliveryDetails
  };
  return {
    destination: Destination,
    deliveryMedium: DeliveryMedium,
    attributeName: AttributeName ? AttributeName : void 0
  };
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs
var createConfirmSignUpClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("ConfirmSignUp"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignUp.mjs
async function confirmSignUp(input) {
  const { username, confirmationCode, options } = input;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;
  const clientMetadata = options?.clientMetadata;
  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);
  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);
  const UserContextData = getUserContextData({
    username,
    userPoolId,
    userPoolClientId
  });
  const confirmSignUpClient = createConfirmSignUpClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { Session: session } = await confirmSignUpClient({
    region: getRegionFromUserPoolId(authConfig.userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp)
  }, {
    Username: username,
    ConfirmationCode: confirmationCode,
    ClientMetadata: clientMetadata,
    ForceAliasCreation: options?.forceAliasCreation,
    ClientId: authConfig.userPoolClientId,
    UserContextData
  });
  return new Promise((resolve, reject) => {
    try {
      const signUpOut = {
        isSignUpComplete: true,
        nextStep: {
          signUpStep: "DONE"
        }
      };
      const autoSignInStoreState = autoSignInStore.getState();
      if (!autoSignInStoreState.active || autoSignInStoreState.username !== username) {
        resolve(signUpOut);
        resetAutoSignIn();
        return;
      }
      autoSignInStore.dispatch({ type: "SET_SESSION", value: session });
      const stopListener = HubInternal.listen("auth-internal", ({ payload }) => {
        switch (payload.event) {
          case "autoSignIn":
            resolve({
              isSignUpComplete: true,
              nextStep: {
                signUpStep: "COMPLETE_AUTO_SIGN_IN"
              }
            });
            stopListener();
        }
      });
      HubInternal.dispatch("auth-internal", {
        event: "confirmSignUp",
        data: signUpOut
      });
    } catch (error) {
      reject(error);
    }
  });
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmSignIn.mjs
async function confirmSignIn(input) {
  const { challengeResponse, options } = input;
  const { username, challengeName, signInSession, signInDetails } = signInStore.getState();
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const clientMetaData = options?.clientMetadata;
  assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);
  if (!username || !challengeName || !signInSession)
    throw new AuthError({
      name: AuthErrorCodes.SignInException,
      message: `
			An error occurred during the sign in process.

			This most likely occurred due to:
			1. signIn was not called before confirmSignIn.
			2. signIn threw an exception.
			3. page was refreshed during the sign in flow and session has expired.
			`,
      recoverySuggestion: "Make sure a successful call to signIn is made before calling confirmSignInand that the session has not expired."
    });
  try {
    const { Session, ChallengeName: handledChallengeName, AuthenticationResult, ChallengeParameters: handledChallengeParameters } = await handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);
    setActiveSignInState({
      signInSession: Session,
      username,
      challengeName: handledChallengeName,
      signInDetails
    });
    if (AuthenticationResult) {
      await cacheCognitoTokens({
        username,
        ...AuthenticationResult,
        NewDeviceMetadata: await getNewDeviceMetadata({
          userPoolId: authConfig.userPoolId,
          userPoolEndpoint: authConfig.userPoolEndpoint,
          newDeviceMetadata: AuthenticationResult.NewDeviceMetadata,
          accessToken: AuthenticationResult.AccessToken
        }),
        signInDetails
      });
      resetActiveSignInState();
      await dispatchSignedInHubEvent();
      return {
        isSignedIn: true,
        nextStep: { signInStep: "DONE" }
      };
    }
    return getSignInResult({
      challengeName: handledChallengeName,
      challengeParameters: handledChallengeParameters
    });
  } catch (error) {
    assertServiceError(error);
    const result = getSignInResultFromError(error.name);
    if (result)
      return result;
    throw error;
  }
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserClient.mjs
var createGetUserClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("GetUser"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createVerifyUserAttributeClient.mjs
var createVerifyUserAttributeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("VerifyUserAttribute"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/confirmUserAttribute.mjs
async function confirmUserAttribute(input) {
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { confirmationCode, userAttributeKey } = input;
  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmUserAttributeCode);
  const { tokens } = await fetchAuthSession2({ forceRefresh: false });
  assertAuthTokens(tokens);
  const verifyUserAttribute = createVerifyUserAttributeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  await verifyUserAttribute({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmUserAttribute)
  }, {
    AccessToken: tokens.accessToken.toString(),
    AttributeName: userAttributeKey,
    Code: confirmationCode
  });
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/Errors.mjs
var logger12 = new ConsoleLogger("AuthError");
var authErrorMessages = {
  oauthSignInError: {
    message: AuthErrorStrings.OAUTH_ERROR,
    log: "Make sure Cognito Hosted UI has been configured correctly"
  },
  noConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: `
            Error: Amplify has not been configured correctly.
            This error is typically caused by one of the following scenarios:

            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point
                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information
            
            2. There might be multiple conflicting versions of amplify packages in your node_modules.
				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)
        `
  },
  missingAuthConfig: {
    message: AuthErrorStrings.DEFAULT_MSG,
    log: `
            Error: Amplify has not been configured correctly. 
            The configuration object is missing required auth properties.
            This error is typically caused by one of the following scenarios:

            1. Did you run \`amplify push\` after adding auth via \`amplify add auth\`?
                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information

            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.
        `
  },
  emptyUsername: {
    message: AuthErrorStrings.EMPTY_USERNAME
  },
  // TODO: should include a list of valid sign-in types
  invalidUsername: {
    message: AuthErrorStrings.INVALID_USERNAME
  },
  emptyPassword: {
    message: AuthErrorStrings.EMPTY_PASSWORD
  },
  emptyCode: {
    message: AuthErrorStrings.EMPTY_CODE
  },
  signUpError: {
    message: AuthErrorStrings.SIGN_UP_ERROR,
    log: "The first parameter should either be non-null string or object"
  },
  noMFA: {
    message: AuthErrorStrings.NO_MFA
  },
  invalidMFA: {
    message: AuthErrorStrings.INVALID_MFA
  },
  emptyChallengeResponse: {
    message: AuthErrorStrings.EMPTY_CHALLENGE
  },
  noUserSession: {
    message: AuthErrorStrings.NO_USER_SESSION
  },
  deviceConfig: {
    message: AuthErrorStrings.DEVICE_CONFIG
  },
  networkError: {
    message: AuthErrorStrings.NETWORK_ERROR
  },
  autoSignInError: {
    message: AuthErrorStrings.AUTOSIGNIN_ERROR
  },
  default: {
    message: AuthErrorStrings.DEFAULT_MSG
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/createOAuthError.mjs
var createOAuthError = (message, recoverySuggestion) => new AuthError({
  message: message ?? "An error has occurred during the oauth process.",
  name: AuthErrorCodes.OAuthSignInError,
  recoverySuggestion: recoverySuggestion ?? authErrorMessages.oauthSignInError.log
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/types/Auth.mjs
var AuthErrorTypes;
(function(AuthErrorTypes2) {
  AuthErrorTypes2["NoConfig"] = "noConfig";
  AuthErrorTypes2["MissingAuthConfig"] = "missingAuthConfig";
  AuthErrorTypes2["EmptyUsername"] = "emptyUsername";
  AuthErrorTypes2["InvalidUsername"] = "invalidUsername";
  AuthErrorTypes2["EmptyPassword"] = "emptyPassword";
  AuthErrorTypes2["EmptyCode"] = "emptyCode";
  AuthErrorTypes2["SignUpError"] = "signUpError";
  AuthErrorTypes2["NoMFA"] = "noMFA";
  AuthErrorTypes2["InvalidMFA"] = "invalidMFA";
  AuthErrorTypes2["EmptyChallengeResponse"] = "emptyChallengeResponse";
  AuthErrorTypes2["NoUserSession"] = "noUserSession";
  AuthErrorTypes2["Default"] = "default";
  AuthErrorTypes2["DeviceConfig"] = "deviceConfig";
  AuthErrorTypes2["NetworkError"] = "networkError";
  AuthErrorTypes2["AutoSignInError"] = "autoSignInError";
  AuthErrorTypes2["OAuthSignInError"] = "oauthSignInError";
})(AuthErrorTypes || (AuthErrorTypes = {}));

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/validateState.mjs
var flowCancelledMessage = "`signInWithRedirect` has been canceled.";
var validationFailedMessage = "An error occurred while validating the state.";
var validationRecoverySuggestion = "Try to initiate an OAuth flow from Amplify";
var validateState = async (state) => {
  const savedState = await oAuthStore.loadOAuthState();
  const validatedState = state === savedState ? savedState : void 0;
  if (!validatedState) {
    throw new AuthError({
      name: AuthErrorTypes.OAuthSignInError,
      message: state === null ? flowCancelledMessage : validationFailedMessage,
      recoverySuggestion: state === null ? void 0 : validationRecoverySuggestion
    });
  }
  return validatedState;
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/completeOAuthFlow.mjs
var completeOAuthFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, responseType, domain, preferPrivateSession }) => {
  const urlParams = new AmplifyUrl(currentUrl);
  const error = urlParams.searchParams.get("error");
  const errorMessage = urlParams.searchParams.get("error_description");
  if (error) {
    throw createOAuthError(errorMessage ?? error);
  }
  if (responseType === "code") {
    return handleCodeFlow({
      currentUrl,
      userAgentValue,
      clientId,
      redirectUri,
      domain,
      preferPrivateSession
    });
  }
  return handleImplicitFlow({
    currentUrl,
    redirectUri,
    preferPrivateSession
  });
};
var handleCodeFlow = async ({ currentUrl, userAgentValue, clientId, redirectUri, domain, preferPrivateSession }) => {
  const url = new AmplifyUrl(currentUrl);
  const code = url.searchParams.get("code");
  const state = url.searchParams.get("state");
  if (!code || !state) {
    throw createOAuthError("User cancelled OAuth flow.");
  }
  const validatedState = await validateState(state);
  const oAuthTokenEndpoint = "https://" + domain + "/oauth2/token";
  const codeVerifier = await oAuthStore.loadPKCE();
  const oAuthTokenBody = {
    grant_type: "authorization_code",
    code,
    client_id: clientId,
    redirect_uri: redirectUri,
    ...codeVerifier ? { code_verifier: codeVerifier } : {}
  };
  const body = Object.entries(oAuthTokenBody).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join("&");
  const { access_token, refresh_token: refreshToken, id_token, error, error_message: errorMessage, token_type, expires_in } = await (await fetch(oAuthTokenEndpoint, {
    method: "POST",
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      [USER_AGENT_HEADER]: userAgentValue
    },
    body
  })).json();
  if (error) {
    throw createOAuthError(errorMessage ?? error);
  }
  const username = (access_token && decodeJWT(access_token).payload.username) ?? "username";
  await cacheCognitoTokens({
    username,
    AccessToken: access_token,
    IdToken: id_token,
    RefreshToken: refreshToken
  });
  return completeFlow({
    redirectUri,
    state: validatedState,
    preferPrivateSession
  });
};
var handleImplicitFlow = async ({ currentUrl, redirectUri, preferPrivateSession }) => {
  const url = new AmplifyUrl(currentUrl);
  const { id_token, access_token, state, token_type, expires_in, error_description, error } = (url.hash ?? "#").substring(1).split("&").map((pairings) => pairings.split("=")).reduce((accum, [k, v]) => ({ ...accum, [k]: v }), {
    id_token: void 0,
    access_token: void 0,
    state: void 0,
    token_type: void 0,
    expires_in: void 0,
    error_description: void 0,
    error: void 0
  });
  if (error) {
    throw createOAuthError(error_description ?? error);
  }
  if (!access_token) {
    throw createOAuthError("No access token returned from OAuth flow.");
  }
  const validatedState = await validateState(state);
  const username = (access_token && decodeJWT(access_token).payload.username) ?? "username";
  await cacheCognitoTokens({
    username,
    AccessToken: access_token,
    IdToken: id_token
  });
  return completeFlow({
    redirectUri,
    state: validatedState,
    preferPrivateSession
  });
};
var completeFlow = async ({ redirectUri, state, preferPrivateSession }) => {
  await tokenOrchestrator.setOAuthMetadata({
    oauthSignIn: true
  });
  await oAuthStore.clearOAuthData();
  await oAuthStore.storeOAuthSignIn(true, preferPrivateSession);
  resolveAndClearInflightPromises();
  clearHistory(redirectUri);
  if (isCustomState(state)) {
    Hub.dispatch("auth", {
      event: "customOAuthState",
      data: urlSafeDecode(getCustomState(state))
    }, "Auth", AMPLIFY_SYMBOL);
  }
  Hub.dispatch("auth", { event: "signInWithRedirect" }, "Auth", AMPLIFY_SYMBOL);
  await dispatchSignedInHubEvent();
};
var isCustomState = (state) => {
  return /-/.test(state);
};
var getCustomState = (state) => {
  return state.split("-").splice(1).join("-");
};
var clearHistory = (redirectUri) => {
  if (typeof window !== "undefined" && typeof window.history !== "undefined") {
    window.history.replaceState(window.history.state, "", redirectUri);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/getRedirectUrl.mjs
function getRedirectUrl2(redirects, preferredRedirectUrl) {
  if (preferredRedirectUrl) {
    const redirectUrl = redirects?.find((redirect) => redirect === preferredRedirectUrl);
    if (!redirectUrl) {
      throw invalidPreferredRedirectUrlException;
    }
    return redirectUrl;
  } else {
    const redirectUrlFromTheSameOrigin = redirects?.find(isSameOriginAndPathName) ?? redirects?.find(isTheSameDomain);
    const redirectUrlFromDifferentOrigin = redirects?.find(isHttps) ?? redirects?.find(isHttp);
    if (redirectUrlFromTheSameOrigin) {
      return redirectUrlFromTheSameOrigin;
    } else if (redirectUrlFromDifferentOrigin) {
      throw invalidOriginException;
    }
    throw invalidRedirectException;
  }
}
var isSameOriginAndPathName = (redirect) => redirect.startsWith(String(window.location.origin + (window.location.pathname || "/")));
var isTheSameDomain = (redirect) => redirect.includes(String(window.location.hostname));
var isHttp = (redirect) => redirect.startsWith("http://");
var isHttps = (redirect) => redirect.startsWith("https://");

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/handleFailure.mjs
var handleFailure = async (error) => {
  resolveAndClearInflightPromises();
  await oAuthStore.clearOAuthInflightData();
  Hub.dispatch("auth", { event: "signInWithRedirect_failure", data: { error } }, "Auth", AMPLIFY_SYMBOL);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/attemptCompleteOAuthFlow.mjs
var attemptCompleteOAuthFlow = async (authConfig) => {
  try {
    assertTokenProviderConfig(authConfig);
    assertOAuthConfig(authConfig);
    oAuthStore.setAuthConfig(authConfig);
  } catch (_) {
    return;
  }
  if (!await oAuthStore.loadOAuthInFlight()) {
    return;
  }
  try {
    const currentUrl = window.location.href;
    const { loginWith, userPoolClientId } = authConfig;
    const { domain, redirectSignIn, responseType } = loginWith.oauth;
    const redirectUri = getRedirectUrl2(redirectSignIn);
    await completeOAuthFlow({
      currentUrl,
      clientId: userPoolClientId,
      domain,
      redirectUri,
      responseType,
      userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect)
    });
  } catch (err) {
    await handleFailure(err);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/enableOAuthListener.mjs
isBrowser() && (() => {
  Amplify[ADD_OAUTH_LISTENER](attemptCompleteOAuthFlow);
})();

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/types/models.mjs
var cognitoHostedUIIdentityProviderMap = {
  Google: "Google",
  Facebook: "Facebook",
  Amazon: "LoginWithAmazon",
  Apple: "SignInWithApple"
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/utils/openAuthSession.mjs
var openAuthSession = async (url) => {
  if (!window?.location) {
    return;
  }
  window.location.href = url.replace("http://", "https://");
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/generateCodeVerifier.mjs
var CODE_VERIFIER_CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
var generateCodeVerifier = (length) => {
  const randomBytes = new Uint8Array(length);
  getCrypto().getRandomValues(randomBytes);
  let value = "";
  let codeChallenge;
  for (const byte of randomBytes) {
    value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);
  }
  return {
    value,
    method: "S256",
    toCodeChallenge() {
      if (codeChallenge) {
        return codeChallenge;
      }
      codeChallenge = generateCodeChallenge(value);
      return codeChallenge;
    }
  };
};
function generateCodeChallenge(codeVerifier) {
  const awsCryptoHash = new Sha256();
  awsCryptoHash.update(codeVerifier);
  const codeChallenge = removePaddingChar(base64Encoder.convert(awsCryptoHash.digestSync(), { urlSafe: true }));
  return codeChallenge;
}
function removePaddingChar(base64Encoded) {
  return base64Encoded.replace(/=/g, "");
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/generateState.mjs
var generateState = () => {
  return generateRandomString(32);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/cancelOAuthFlow.mjs
var listenForOAuthFlowCancellation = (store) => {
  async function handleCancelOAuthFlow(event2) {
    const isBfcache = event2.persisted;
    if (isBfcache && await store.loadOAuthInFlight()) {
      const error = createOAuthError("User cancelled OAuth flow.");
      await handleFailure(error);
    }
    window.removeEventListener("pageshow", handleCancelOAuthFlow);
  }
  window.addEventListener("pageshow", handleCancelOAuthFlow);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signInWithRedirect.mjs
async function signInWithRedirect(input) {
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  assertOAuthConfig(authConfig);
  oAuthStore.setAuthConfig(authConfig);
  await assertUserNotAuthenticated();
  let provider = "COGNITO";
  if (typeof input?.provider === "string") {
    provider = cognitoHostedUIIdentityProviderMap[input.provider];
  } else if (input?.provider?.custom) {
    provider = input.provider.custom;
  }
  return oauthSignIn({
    oauthConfig: authConfig.loginWith.oauth,
    clientId: authConfig.userPoolClientId,
    provider,
    customState: input?.customState,
    preferPrivateSession: input?.options?.preferPrivateSession,
    options: {
      loginHint: input?.options?.loginHint,
      lang: input?.options?.lang,
      nonce: input?.options?.nonce
    }
  });
}
var oauthSignIn = async ({ oauthConfig, provider, clientId, customState, preferPrivateSession, options }) => {
  const { domain, redirectSignIn, responseType, scopes } = oauthConfig;
  const { loginHint, lang, nonce } = options ?? {};
  const randomState = generateState();
  const state = customState ? `${randomState}-${urlSafeEncode(customState)}` : randomState;
  const { value, method, toCodeChallenge } = generateCodeVerifier(128);
  const redirectUri = getRedirectUrl2(oauthConfig.redirectSignIn);
  if (isBrowser())
    oAuthStore.storeOAuthInFlight(true);
  oAuthStore.storeOAuthState(state);
  oAuthStore.storePKCE(value);
  const queryString = Object.entries({
    redirect_uri: redirectUri,
    response_type: responseType,
    client_id: clientId,
    identity_provider: provider,
    scope: scopes.join(" "),
    // eslint-disable-next-line camelcase
    ...loginHint && { login_hint: loginHint },
    ...lang && { lang },
    ...nonce && { nonce },
    state,
    ...responseType === "code" && {
      code_challenge: toCodeChallenge(),
      code_challenge_method: method
    }
  }).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join("&");
  const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;
  listenForOAuthFlowCancellation(oAuthStore);
  const { type, error, url } = await openAuthSession(oAuthUrl) ?? {};
  try {
    if (type === "error") {
      throw createOAuthError(String(error));
    }
    if (type === "success" && url) {
      await completeOAuthFlow({
        currentUrl: url,
        clientId,
        domain,
        redirectUri,
        responseType,
        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),
        preferPrivateSession
      });
    }
  } catch (err) {
    await handleFailure(err);
    throw err;
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/internal/fetchUserAttributes.mjs
var fetchUserAttributes = async (amplify) => {
  const authConfig = amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { tokens } = await fetchAuthSession(amplify, {
    forceRefresh: false
  });
  assertAuthTokens(tokens);
  const getUser = createGetUserClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { UserAttributes } = await getUser({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.FetchUserAttributes)
  }, {
    AccessToken: tokens.accessToken.toString()
  });
  return toAuthUserAttribute(UserAttributes);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/fetchUserAttributes.mjs
var fetchUserAttributes2 = () => {
  return fetchUserAttributes(Amplify);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/completeOAuthSignOut.mjs
var completeOAuthSignOut = async (store) => {
  await store.clearOAuthData();
  tokenOrchestrator.clearTokens();
  await clearCredentials();
  Hub.dispatch("auth", { event: "signedOut" }, "Auth", AMPLIFY_SYMBOL);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthSignOutRedirect.mjs
var oAuthSignOutRedirect = async (authConfig, preferPrivateSession = false, redirectUrl) => {
  assertOAuthConfig(authConfig);
  const { loginWith, userPoolClientId } = authConfig;
  const { domain, redirectSignOut } = loginWith.oauth;
  const signoutUri = getRedirectUrl2(redirectSignOut, redirectUrl);
  const oAuthLogoutEndpoint = `https://${domain}/logout?${Object.entries({
    client_id: userPoolClientId,
    logout_uri: encodeURIComponent(signoutUri)
  }).map(([k, v]) => `${k}=${v}`).join("&")}`;
  return openAuthSession(oAuthLogoutEndpoint);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/handleOAuthSignOut.mjs
var handleOAuthSignOut = async (cognitoConfig, store, tokenOrchestrator2, redirectUrl) => {
  const { isOAuthSignIn } = await store.loadOAuthSignIn();
  const oauthMetadata = await tokenOrchestrator2.getOAuthMetadata();
  await completeOAuthSignOut(store);
  if (isOAuthSignIn || oauthMetadata?.oauthSignIn) {
    return oAuthSignOutRedirect(cognitoConfig, false, redirectUrl);
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createRevokeTokenClient.mjs
var createRevokeTokenClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("RevokeToken"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGlobalSignOutClient.mjs
var createGlobalSignOutClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("GlobalSignOut"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/signOut.mjs
var logger13 = new ConsoleLogger("Auth");
async function signOut(input) {
  const cognitoConfig = Amplify.getConfig().Auth?.Cognito;
  assertTokenProviderConfig(cognitoConfig);
  if (input?.global) {
    await globalSignOut(cognitoConfig);
  } else {
    await clientSignOut(cognitoConfig);
  }
  let hasOAuthConfig;
  try {
    assertOAuthConfig(cognitoConfig);
    hasOAuthConfig = true;
  } catch (err) {
    hasOAuthConfig = false;
  }
  if (hasOAuthConfig) {
    const oAuthStore2 = new DefaultOAuthStore(defaultStorage);
    oAuthStore2.setAuthConfig(cognitoConfig);
    const { type } = await handleOAuthSignOut(cognitoConfig, oAuthStore2, tokenOrchestrator, input?.oauth?.redirectUrl) ?? {};
    if (type === "error") {
      throw new AuthError({
        name: OAUTH_SIGNOUT_EXCEPTION,
        message: `An error occurred when attempting to log out from OAuth provider.`
      });
    }
  } else {
    tokenOrchestrator.clearTokens();
    await clearCredentials();
    Hub.dispatch("auth", { event: "signedOut" }, "Auth", AMPLIFY_SYMBOL);
  }
}
async function clientSignOut(cognitoConfig) {
  try {
    const { userPoolEndpoint, userPoolId, userPoolClientId } = cognitoConfig;
    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();
    assertAuthTokensWithRefreshToken(authTokens);
    if (isSessionRevocable(authTokens.accessToken)) {
      const revokeToken = createRevokeTokenClient({
        endpointResolver: createCognitoUserPoolEndpointResolver({
          endpointOverride: userPoolEndpoint
        })
      });
      await revokeToken({
        region: getRegionFromUserPoolId(userPoolId),
        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)
      }, {
        ClientId: userPoolClientId,
        Token: authTokens.refreshToken
      });
    }
  } catch (err) {
    logger13.debug("Client signOut error caught but will proceed with token removal");
  }
}
async function globalSignOut(cognitoConfig) {
  try {
    const { userPoolEndpoint, userPoolId } = cognitoConfig;
    const authTokens = await tokenOrchestrator.getTokenStore().loadTokens();
    assertAuthTokens(authTokens);
    const globalSignOutClient = createGlobalSignOutClient({
      endpointResolver: createCognitoUserPoolEndpointResolver({
        endpointOverride: userPoolEndpoint
      })
    });
    await globalSignOutClient({
      region: getRegionFromUserPoolId(userPoolId),
      userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)
    }, {
      AccessToken: authTokens.accessToken.toString()
    });
  } catch (err) {
    logger13.debug("Global signOut error caught but will proceed with token removal");
  }
}
var isSessionRevocable = (token) => !!token?.payload?.origin_jti;

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetUserAttributeVerificationCodeClient.mjs
var createGetUserAttributeVerificationCodeClient = (config2) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer("GetUserAttributeVerificationCode"), createUserPoolDeserializer(), {
  ...DEFAULT_SERVICE_CLIENT_API_CONFIG2,
  ...config2
});

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/apis/sendUserAttributeVerificationCode.mjs
var sendUserAttributeVerificationCode = async (input) => {
  const { userAttributeKey, options } = input;
  const authConfig = Amplify.getConfig().Auth?.Cognito;
  const clientMetadata = options?.clientMetadata;
  assertTokenProviderConfig(authConfig);
  const { userPoolEndpoint, userPoolId } = authConfig;
  const { tokens } = await fetchAuthSession2({ forceRefresh: false });
  assertAuthTokens(tokens);
  const getUserAttributeVerificationCode = createGetUserAttributeVerificationCodeClient({
    endpointResolver: createCognitoUserPoolEndpointResolver({
      endpointOverride: userPoolEndpoint
    })
  });
  const { CodeDeliveryDetails } = await getUserAttributeVerificationCode({
    region: getRegionFromUserPoolId(userPoolId),
    userAgentValue: getAuthUserAgentValue(AuthAction.SendUserAttributeVerificationCode)
  }, {
    AccessToken: tokens.accessToken.toString(),
    ClientMetadata: clientMetadata,
    AttributeName: userAttributeKey
  });
  const { DeliveryMedium, AttributeName, Destination } = {
    ...CodeDeliveryDetails
  };
  return {
    destination: Destination,
    deliveryMedium: DeliveryMedium,
    attributeName: AttributeName
  };
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/types.mjs
var IdentityIdStorageKeys = {
  identityId: "identityId"
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdStore.mjs
var logger14 = new ConsoleLogger("DefaultIdentityIdStore");
var DefaultIdentityIdStore = class {
  setAuthConfig(authConfigParam) {
    assertIdentityPoolIdConfig(authConfigParam.Cognito);
    this.authConfig = authConfigParam;
    this._authKeys = createKeysForAuthStorage3("Cognito", authConfigParam.Cognito.identityPoolId);
  }
  constructor(keyValueStorage) {
    this._authKeys = {};
    this._hasGuestIdentityId = false;
    this.keyValueStorage = keyValueStorage;
  }
  async loadIdentityId() {
    assertIdentityPoolIdConfig(this.authConfig?.Cognito);
    try {
      if (this._primaryIdentityId) {
        return {
          id: this._primaryIdentityId,
          type: "primary"
        };
      } else {
        const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);
        if (storedIdentityId) {
          this._hasGuestIdentityId = true;
          return {
            id: storedIdentityId,
            type: "guest"
          };
        }
        return null;
      }
    } catch (err) {
      logger14.log("Error getting stored IdentityId.", err);
      return null;
    }
  }
  async storeIdentityId(identity2) {
    assertIdentityPoolIdConfig(this.authConfig?.Cognito);
    if (identity2.type === "guest") {
      this.keyValueStorage.setItem(this._authKeys.identityId, identity2.id);
      this._primaryIdentityId = void 0;
      this._hasGuestIdentityId = true;
    } else {
      this._primaryIdentityId = identity2.id;
      if (this._hasGuestIdentityId) {
        this.keyValueStorage.removeItem(this._authKeys.identityId);
        this._hasGuestIdentityId = false;
      }
    }
  }
  async clearIdentityId() {
    this._primaryIdentityId = void 0;
    await this.keyValueStorage.removeItem(this._authKeys.identityId);
  }
};
var createKeysForAuthStorage3 = (provider, identifier) => {
  return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoIdentityPoolEndpointResolver.mjs
var createCognitoIdentityPoolEndpointResolver = ({ endpointOverride }) => (input) => {
  if (endpointOverride) {
    return { url: new AmplifyUrl(endpointOverride) };
  }
  return cognitoIdentityPoolEndpointResolver(input);
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/utils.mjs
function formLoginsMap(idToken) {
  const issuer = decodeJWT(idToken).payload.iss;
  const res = {};
  if (!issuer) {
    throw new AuthError({
      name: "InvalidIdTokenException",
      message: "Invalid Idtoken."
    });
  }
  const domainName = issuer.replace(/(^\w+:|^)\/\//, "");
  res[domainName] = idToken;
  return res;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdProvider.mjs
async function cognitoIdentityIdProvider({ tokens, authConfig, identityIdStore }) {
  identityIdStore.setAuthConfig({ Cognito: authConfig });
  const identityId = await identityIdStore.loadIdentityId();
  if (identityId) {
    return identityId.id;
  }
  const logins = tokens?.idToken ? formLoginsMap(tokens.idToken.toString()) : {};
  const generatedIdentityId = await generateIdentityId(logins, authConfig);
  identityIdStore.storeIdentityId({
    id: generatedIdentityId,
    type: tokens ? "primary" : "guest"
  });
  return generatedIdentityId;
}
async function generateIdentityId(logins, authConfig) {
  const identityPoolId = authConfig?.identityPoolId;
  const region = getRegionFromIdentityPoolId(identityPoolId);
  const getId = createGetIdClient({
    endpointResolver: createCognitoIdentityPoolEndpointResolver({
      endpointOverride: authConfig.identityPoolEndpoint
    })
  });
  let idResult;
  try {
    idResult = (await getId({
      region
    }, {
      IdentityPoolId: identityPoolId,
      Logins: logins
    })).IdentityId;
  } catch (e) {
    assertServiceError(e);
    throw new AuthError(e);
  }
  if (!idResult) {
    throw new AuthError({
      name: "GetIdResponseException",
      message: "Received undefined response from getId operation",
      recoverySuggestion: "Make sure to pass a valid identityPoolId in the configuration."
    });
  }
  return idResult;
}

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/credentialsProvider.mjs
var logger15 = new ConsoleLogger("CognitoCredentialsProvider");
var CREDENTIALS_TTL = 50 * 60 * 1e3;
var CognitoAWSCredentialsAndIdentityIdProvider = class {
  constructor(identityIdStore) {
    this._nextCredentialsRefresh = 0;
    this._identityIdStore = identityIdStore;
  }
  async clearCredentialsAndIdentityId() {
    logger15.debug("Clearing out credentials and identityId");
    this._credentialsAndIdentityId = void 0;
    await this._identityIdStore.clearIdentityId();
  }
  async clearCredentials() {
    logger15.debug("Clearing out in-memory credentials");
    this._credentialsAndIdentityId = void 0;
  }
  async getCredentialsAndIdentityId(getCredentialsOptions) {
    const isAuthenticated2 = getCredentialsOptions.authenticated;
    const { tokens } = getCredentialsOptions;
    const { authConfig } = getCredentialsOptions;
    try {
      assertIdentityPoolIdConfig(authConfig?.Cognito);
    } catch {
      return;
    }
    if (!isAuthenticated2 && !authConfig.Cognito.allowGuestAccess) {
      return;
    }
    const { forceRefresh } = getCredentialsOptions;
    const tokenHasChanged = this.hasTokenChanged(tokens);
    const identityId = await cognitoIdentityIdProvider({
      tokens,
      authConfig: authConfig.Cognito,
      identityIdStore: this._identityIdStore
    });
    if (forceRefresh || tokenHasChanged) {
      this.clearCredentials();
    }
    if (!isAuthenticated2) {
      return this.getGuestCredentials(identityId, authConfig.Cognito);
    } else {
      assertIdTokenInAuthTokens(tokens);
      return this.credsForOIDCTokens(authConfig.Cognito, tokens, identityId);
    }
  }
  async getGuestCredentials(identityId, authConfig) {
    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === false) {
      logger15.info("returning stored credentials as they neither past TTL nor expired.");
      return this._credentialsAndIdentityId;
    }
    this.clearCredentials();
    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);
    const getCredentialsForIdentity = createGetCredentialsForIdentityClient({
      endpointResolver: createCognitoIdentityPoolEndpointResolver({
        endpointOverride: authConfig.identityPoolEndpoint
      })
    });
    let clientResult;
    try {
      clientResult = await getCredentialsForIdentity({ region }, {
        IdentityId: identityId
      });
    } catch (e) {
      assertServiceError(e);
      throw new AuthError(e);
    }
    if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {
      this._nextCredentialsRefresh = (/* @__PURE__ */ new Date()).getTime() + CREDENTIALS_TTL;
      const res = {
        credentials: {
          accessKeyId: clientResult.Credentials.AccessKeyId,
          secretAccessKey: clientResult.Credentials.SecretKey,
          sessionToken: clientResult.Credentials.SessionToken,
          expiration: clientResult.Credentials.Expiration
        },
        identityId
      };
      if (clientResult.IdentityId) {
        res.identityId = clientResult.IdentityId;
        this._identityIdStore.storeIdentityId({
          id: clientResult.IdentityId,
          type: "guest"
        });
      }
      this._credentialsAndIdentityId = {
        ...res,
        isAuthenticatedCreds: false
      };
      return res;
    } else {
      throw new AuthError({
        name: "CredentialsNotFoundException",
        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`
      });
    }
  }
  async credsForOIDCTokens(authConfig, authTokens, identityId) {
    if (this._credentialsAndIdentityId && !this.isPastTTL() && this._credentialsAndIdentityId.isAuthenticatedCreds === true) {
      logger15.debug("returning stored credentials as they neither past TTL nor expired.");
      return this._credentialsAndIdentityId;
    }
    this.clearCredentials();
    const logins = authTokens.idToken ? formLoginsMap(authTokens.idToken.toString()) : {};
    const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);
    const getCredentialsForIdentity = createGetCredentialsForIdentityClient({
      endpointResolver: createCognitoIdentityPoolEndpointResolver({
        endpointOverride: authConfig.identityPoolEndpoint
      })
    });
    let clientResult;
    try {
      clientResult = await getCredentialsForIdentity({ region }, {
        IdentityId: identityId,
        Logins: logins
      });
    } catch (e) {
      assertServiceError(e);
      throw new AuthError(e);
    }
    if (clientResult?.Credentials?.AccessKeyId && clientResult?.Credentials?.SecretKey) {
      this._nextCredentialsRefresh = (/* @__PURE__ */ new Date()).getTime() + CREDENTIALS_TTL;
      const res = {
        credentials: {
          accessKeyId: clientResult.Credentials.AccessKeyId,
          secretAccessKey: clientResult.Credentials.SecretKey,
          sessionToken: clientResult.Credentials.SessionToken,
          expiration: clientResult.Credentials.Expiration
        },
        identityId
      };
      if (clientResult.IdentityId) {
        res.identityId = clientResult.IdentityId;
        this._identityIdStore.storeIdentityId({
          id: clientResult.IdentityId,
          type: "primary"
        });
      }
      this._credentialsAndIdentityId = {
        ...res,
        isAuthenticatedCreds: true,
        associatedIdToken: authTokens.idToken?.toString()
      };
      return res;
    } else {
      throw new AuthError({
        name: "CredentialsException",
        message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`
      });
    }
  }
  isPastTTL() {
    return this._nextCredentialsRefresh === void 0 ? true : this._nextCredentialsRefresh <= Date.now();
  }
  hasTokenChanged(tokens) {
    return !!tokens && !!this._credentialsAndIdentityId?.associatedIdToken && tokens.idToken?.toString() !== this._credentialsAndIdentityId.associatedIdToken;
  }
};

// node_modules/.pnpm/@aws-amplify+auth@6.13.3_@aws-amplify+core@6.12.3/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/index.mjs
var cognitoCredentialsProvider = new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(defaultStorage));

// node_modules/.pnpm/aws-amplify@6.15.3/node_modules/aws-amplify/dist/esm/initSingleton.mjs
var DefaultAmplify = {
  /**
   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.
   *
   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the
   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.
   * @param libraryOptions The {@link LibraryOptions} additional options for the library.
   *
   * @example
   * import config from './amplifyconfiguration.json';
   *
   * Amplify.configure(config);
   */
  configure(resourceConfig, libraryOptions) {
    const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);
    const cookieBasedKeyValueStorage = new CookieStorage({ sameSite: "lax" });
    const resolvedKeyValueStorage = libraryOptions?.ssr ? cookieBasedKeyValueStorage : defaultStorage;
    const resolvedCredentialsProvider = libraryOptions?.ssr ? new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(cookieBasedKeyValueStorage)) : cognitoCredentialsProvider;
    if (!resolvedResourceConfig.Auth) {
      Amplify.configure(resolvedResourceConfig, libraryOptions);
      return;
    }
    if (libraryOptions?.Auth) {
      Amplify.configure(resolvedResourceConfig, libraryOptions);
      return;
    }
    if (!Amplify.libraryOptions.Auth) {
      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);
      cognitoUserPoolsTokenProvider.setKeyValueStorage(
        // TODO: allow configure with a public interface
        resolvedKeyValueStorage
      );
      Amplify.configure(resolvedResourceConfig, {
        ...libraryOptions,
        Auth: {
          tokenProvider: cognitoUserPoolsTokenProvider,
          credentialsProvider: resolvedCredentialsProvider
        }
      });
      return;
    }
    if (libraryOptions) {
      const authLibraryOptions = Amplify.libraryOptions.Auth;
      if (libraryOptions.ssr !== void 0) {
        cognitoUserPoolsTokenProvider.setKeyValueStorage(
          // TODO: allow configure with a public interface
          resolvedKeyValueStorage
        );
        authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;
      }
      Amplify.configure(resolvedResourceConfig, {
        Auth: authLibraryOptions,
        ...libraryOptions
      });
      return;
    }
    Amplify.configure(resolvedResourceConfig);
  },
  /**
   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling
   * `Amplify.configure`.
   *
   * @returns An {@link ResourcesConfig} object.
   */
  getConfig() {
    return Amplify.getConfig();
  }
};

// node_modules/.pnpm/@aws-amplify+ui-vue@4.3.3_@aws-amplify+core@6.12.3_aws-amplify@6.15.3_vue@3.5.17_typescript@5.8.3_/node_modules/@aws-amplify/ui-vue/dist/index.js
var Ie = defineComponent({
  __name: "base-footer",
  setup(e) {
    const t = useSlots();
    return (n, r) => renderSlot(n.$slots, "footert", mergeProps(n.$attrs, {
      slotData: unref(t).default && unref(t).default()
    }), () => [
      createBaseVNode("footer", normalizeProps(guardReactiveProps(n.$attrs)), [
        renderSlot(n.$slots, "default")
      ], 16)
    ]);
  }
});
var Pe = defineComponent({
  __name: "base-form",
  setup(e) {
    const t = useSlots();
    return (n, r) => renderSlot(n.$slots, "formt", mergeProps(n.$attrs, {
      slotData: unref(t).default && unref(t).default()
    }), () => [
      createBaseVNode("form", mergeProps({ "data-amplify-form": "" }, n.$attrs), [
        renderSlot(n.$slots, "default")
      ], 16)
    ]);
  }
});
var Mn = (e, t) => {
  const n = e.__vccOpts || e;
  for (const [r, o] of t)
    n[r] = o;
  return n;
};
var xs = {};
function Ds(e, t) {
  return openBlock(), createElementBlock("div", null, [
    renderSlot(e.$slots, "default")
  ]);
}
var me = Mn(xs, [["render", Ds]]);
var Ls = ["type", "data-fullwidth", "data-size", "data-fontWeight", "data-variation", "data-loading", "data-disabled", "disabled"];
var _e = defineComponent({
  __name: "amplify-button",
  props: {
    type: null,
    fullWidth: { type: [Boolean, String] },
    size: null,
    variation: null,
    fontWeight: null,
    loading: { type: [Boolean, String] },
    disabled: { type: [Boolean, String] }
  },
  setup(e) {
    const t = e, { type: n, fullWidth: r, size: o, variation: i, fontWeight: a } = toRefs(t);
    return (s, l) => renderSlot(s.$slots, "buttont", normalizeProps(guardReactiveProps(s.$attrs)), () => [
      createBaseVNode("button", mergeProps({
        class: ["amplify-button amplify-field-group__control", {
          [`amplify-button--${unref(i)}`]: unref(i),
          [`amplify-button--${unref(o)}`]: unref(o),
          "amplify-button--fullwidth": unref(r),
          "amplify-button--loading": e.loading,
          "amplify-button--disabled": e.disabled
        }],
        type: unref(n),
        style: { fontWeight: unref(a) },
        "data-fullwidth": unref(r),
        "data-size": unref(o),
        "data-fontWeight": unref(a),
        "data-variation": unref(i),
        "data-loading": e.loading,
        "data-disabled": e.disabled,
        disabled: e.disabled
      }, s.$attrs, { "data-amplify-button": "" }), [
        renderSlot(s.$slots, "default")
      ], 16, Ls)
    ]);
  }
});
var Nr = (e) => {
  var t;
  return (t = e.context.actorRef) == null ? void 0 : t.getSnapshot();
};
var Ur = (e) => {
  var t;
  return (t = Nr(e)) == null ? void 0 : t.context;
};
var Bs = {
  category: Category.AI,
  apis: [
    AiAction.CreateConversation,
    AiAction.DeleteConversation,
    AiAction.ListConversations,
    AiAction.UpdateConversation,
    AiAction.OnMessage,
    AiAction.SendMessage,
    AiAction.Generation
  ]
};
var zs = {
  apis: [AuthAction.DeleteUser, AuthAction.UpdatePassword],
  category: Category.Auth
};
var Gs = {
  apis: [
    AuthAction.SignUp,
    AuthAction.ConfirmSignUp,
    AuthAction.ResendSignUpCode,
    AuthAction.SignIn,
    AuthAction.ConfirmSignIn,
    AuthAction.FetchUserAttributes,
    AuthAction.SignOut,
    AuthAction.ResetPassword,
    AuthAction.ConfirmResetPassword,
    AuthAction.SignInWithRedirect
  ],
  category: Category.Auth
};
var Ws = {
  apis: [StorageAction.UploadData],
  category: Category.Storage
};
var Vs = {
  apis: [InAppMessagingAction.NotifyMessageInteraction],
  category: Category.InAppMessaging
};
var js = {
  category: Category.Geo,
  apis: [
    GeoAction.SearchByText,
    GeoAction.SearchForSuggestions,
    GeoAction.SearchByPlaceId
  ]
};
var Hs = {
  category: Category.Geo,
  apis: []
};
var Ks = {
  apis: [StorageAction.UploadData],
  category: Category.Storage
};
var Ys = {
  apis: [
    StorageAction.UploadData,
    StorageAction.Copy,
    StorageAction.GetUrl,
    StorageAction.List,
    StorageAction.Remove,
    StorageAction.GetDataAccess,
    StorageAction.ListCallerAccessGrants
  ],
  category: Category.Storage
};
function Bt(e) {
  return e != null && !Array.isArray(e) && typeof e == "object";
}
function Ci(e) {
  return typeof e == "string" || typeof e == "object" && Object.prototype.toString.call(e) === "[object String]";
}
function qs(e) {
  return Bt(e) && Object.prototype.toString.call(e) === "[object Map]";
}
function Js(e) {
  return Bt(e) && Object.prototype.toString.call(e) === "[object Set]";
}
function Ai(e) {
  if (e == null)
    return true;
  if (Bt(e) && (qs(e) || Js(e)))
    return !e.size;
  if (Bt(e) && (Ci(e) || Array.isArray(e)))
    return !e.length;
  for (const t in e)
    if (Qs(e, t))
      return false;
  return true;
}
function Zs(e) {
  return Bt(e) && Ai(e);
}
function Qs(e, t) {
  return e != null && Object.prototype.hasOwnProperty.call(e, t);
}
function go(e) {
  return typeof e == "function";
}
function Xs(...e) {
}
var Ei = ({ payload: e }, t, n) => {
  var l;
  const { data: r, event: o } = e, { send: i } = t, { onSignIn: a, onSignOut: s } = n ?? {};
  switch (o) {
    case "signedIn": {
      go(a) && a(e);
      break;
    }
    case "signInWithRedirect": {
      i("SIGN_IN_WITH_REDIRECT");
      break;
    }
    case "signedOut": {
      go(s) && s(), i("SIGN_OUT");
      break;
    }
    case "tokenRefresh_failure": {
      if (((l = r == null ? void 0 : r.error) == null ? void 0 : l.name) === AmplifyErrorCode.NetworkError)
        return;
      i("SIGN_OUT");
      break;
    }
  }
};
var el = (e, t = Ei) => {
  const n = (r) => t(r, e);
  return Hub.listen("auth", n, "authenticator-hub-handler");
};
var tl = [
  "+1",
  "+7",
  "+20",
  "+27",
  "+30",
  "+31",
  "+32",
  "+33",
  "+34",
  "+36",
  "+39",
  "+40",
  "+41",
  "+43",
  "+44",
  "+45",
  "+46",
  "+47",
  "+48",
  "+49",
  "+51",
  "+52",
  "+53",
  "+54",
  "+55",
  "+56",
  "+57",
  "+58",
  "+60",
  "+61",
  "+62",
  "+63",
  "+64",
  "+65",
  "+66",
  "+81",
  "+82",
  "+84",
  "+86",
  "+90",
  "+91",
  "+92",
  "+93",
  "+94",
  "+95",
  "+98",
  "+212",
  "+213",
  "+216",
  "+218",
  "+220",
  "+221",
  "+222",
  "+223",
  "+224",
  "+225",
  "+226",
  "+227",
  "+228",
  "+229",
  "+230",
  "+231",
  "+232",
  "+233",
  "+234",
  "+235",
  "+236",
  "+237",
  "+238",
  "+239",
  "+240",
  "+241",
  "+242",
  "+243",
  "+244",
  "+245",
  "+246",
  "+248",
  "+249",
  "+250",
  "+251",
  "+252",
  "+253",
  "+254",
  "+255",
  "+256",
  "+257",
  "+258",
  "+260",
  "+261",
  "+262",
  "+263",
  "+264",
  "+265",
  "+266",
  "+267",
  "+268",
  "+269",
  "+290",
  "+291",
  "+297",
  "+298",
  "+299",
  "+345",
  "+350",
  "+351",
  "+352",
  "+353",
  "+354",
  "+355",
  "+356",
  "+357",
  "+358",
  "+359",
  "+370",
  "+371",
  "+372",
  "+373",
  "+374",
  "+375",
  "+376",
  "+377",
  "+378",
  "+379",
  "+380",
  "+381",
  "+382",
  "+385",
  "+386",
  "+387",
  "+389",
  "+420",
  "+421",
  "+423",
  "+500",
  "+501",
  "+502",
  "+503",
  "+504",
  "+505",
  "+506",
  "+507",
  "+508",
  "+509",
  "+537",
  "+590",
  "+591",
  "+593",
  "+594",
  "+595",
  "+596",
  "+597",
  "+598",
  "+599",
  "+670",
  "+672",
  "+673",
  "+674",
  "+675",
  "+676",
  "+677",
  "+678",
  "+679",
  "+680",
  "+681",
  "+682",
  "+683",
  "+685",
  "+686",
  "+687",
  "+688",
  "+689",
  "+690",
  "+691",
  "+692",
  "+850",
  "+852",
  "+853",
  "+855",
  "+856",
  "+872",
  "+880",
  "+886",
  "+960",
  "+961",
  "+962",
  "+963",
  "+964",
  "+965",
  "+966",
  "+967",
  "+968",
  "+970",
  "+971",
  "+972",
  "+973",
  "+974",
  "+975",
  "+976",
  "+977",
  "+992",
  "+993",
  "+994",
  "+995",
  "+996",
  "+998"
];
var zt = {
  birthdate: {
    label: "Birthdate",
    placeholder: "Enter your Birthdate",
    type: "date",
    autocomplete: "bday",
    isRequired: true
  },
  confirmation_code: {
    label: "Confirmation Code",
    placeholder: "Enter your Confirmation Code",
    type: "text",
    autocomplete: "one-time-code",
    isRequired: true
  },
  confirm_password: {
    label: "Confirm Password",
    placeholder: "Please confirm your Password",
    type: "password",
    autocomplete: "new-password",
    isRequired: true
  },
  email: {
    label: "Email",
    placeholder: "Enter your Email",
    type: "email",
    autocomplete: "username",
    isRequired: true
  },
  family_name: {
    label: "Family Name",
    placeholder: "Enter your Family Name",
    type: "text",
    autocomplete: "family-name",
    isRequired: true
  },
  given_name: {
    label: "Given Name",
    placeholder: "Enter your Given Name",
    type: "text",
    autocomplete: "given-name",
    isRequired: true
  },
  middle_name: {
    label: "Middle Name",
    placeholder: "Enter your Middle Name",
    type: "text",
    autocomplete: "additional-name",
    isRequired: true
  },
  name: {
    label: "Name",
    placeholder: "Enter your Name",
    type: "text",
    autocomplete: "name",
    isRequired: true
  },
  nickname: {
    label: "Nickname",
    placeholder: "Enter your Nickname",
    type: "text",
    autocomplete: "tel",
    isRequired: true
  },
  password: {
    label: "Password",
    placeholder: "Enter your Password",
    type: "password",
    autocomplete: "new-password",
    isRequired: true
  },
  phone_number: {
    label: "Phone Number",
    placeholder: "Enter your Phone Number",
    type: "tel",
    autocomplete: "tel",
    dialCode: "+1",
    dialCodeList: tl,
    isRequired: true
  },
  preferred_username: {
    label: "Preferred Username",
    placeholder: "Enter your Preferred Username",
    type: "text",
    isRequired: true
  },
  profile: {
    label: "Profile",
    placeholder: "Add your Profile",
    type: "url",
    autocomplete: "url",
    isRequired: true
  },
  website: {
    label: "Website",
    placeholder: "Add your Website",
    type: "url",
    autocomplete: "url",
    isRequired: true
  },
  username: {
    label: "Username",
    placeholder: "Enter your Username",
    type: "text",
    autocomplete: "username",
    isRequired: true
  }
};
var nl = [
  "^",
  "$",
  "*",
  ".",
  "[",
  "]",
  "{",
  "}",
  "(",
  ")",
  "?",
  '"',
  "!",
  "@",
  "#",
  "%",
  "&",
  "/",
  "\\",
  ",",
  ">",
  "<",
  "'",
  ":",
  ";",
  "|",
  "_",
  "~",
  "`",
  "=",
  "+",
  "-",
  " "
];
var rl = (e, t) => {
  if (t != null && t.matches("federatedSignIn")) {
    if (e.matches("signUpActor"))
      return "signUp";
    if (e.matches("signInActor"))
      return "signIn";
  }
  switch (true) {
    case e.matches("idle"):
      return "idle";
    case e.matches("setup"):
      return "setup";
    case e.matches("signOut"):
      return "signOut";
    case e.matches("authenticated"):
      return "authenticated";
    case (t == null ? void 0 : t.matches("confirmSignUp")):
    case (t == null ? void 0 : t.matches("resendSignUpCode")):
      return "confirmSignUp";
    case (t == null ? void 0 : t.matches("confirmSignIn")):
      return "confirmSignIn";
    case (t == null ? void 0 : t.matches("setupTotp.edit")):
    case (t == null ? void 0 : t.matches("setupTotp.submit")):
      return "setupTotp";
    case (t == null ? void 0 : t.matches("signIn")):
      return "signIn";
    case (t == null ? void 0 : t.matches("signUp")):
    case (t == null ? void 0 : t.matches("autoSignIn")):
      return "signUp";
    case (t == null ? void 0 : t.matches("forceChangePassword")):
      return "forceNewPassword";
    case (t == null ? void 0 : t.matches("forgotPassword")):
      return "forgotPassword";
    case (t == null ? void 0 : t.matches("confirmResetPassword")):
      return "confirmResetPassword";
    case (t == null ? void 0 : t.matches("selectUserAttributes")):
      return "verifyUser";
    case (t == null ? void 0 : t.matches("confirmVerifyUserAttribute")):
      return "confirmVerifyUser";
    case (t == null ? void 0 : t.matches("setupEmail")):
      return "setupEmail";
    case (t == null ? void 0 : t.matches("selectMfaType")):
      return "selectMfaType";
    case e.matches("getCurrentUser"):
    case (t == null ? void 0 : t.matches("fetchUserAttributes")):
      return "transition";
    default:
      return null;
  }
};
var ol = (e) => {
  const t = (n) => (r) => e({ type: n, data: r });
  return {
    initializeMachine: t("INIT"),
    resendCode: t("RESEND"),
    signOut: t("SIGN_OUT"),
    submitForm: t("SUBMIT"),
    updateForm: t("CHANGE"),
    updateBlur: t("BLUR"),
    // Actions that don't immediately invoke a service but instead transition to a screen
    // are prefixed with `to*`
    toFederatedSignIn: t("FEDERATED_SIGN_IN"),
    toForgotPassword: t("FORGOT_PASSWORD"),
    toSignIn: t("SIGN_IN"),
    toSignUp: t("SIGN_UP"),
    skipVerification: t("SKIP")
  };
};
var il = (e) => {
  var S, v;
  const t = Ur(e) ?? {}, { allowedMfaTypes: n, challengeName: r, codeDeliveryDetails: o, remoteError: i, validationError: a, totpSecretCode: s = null, unverifiedUserAttributes: l, username: c } = t, { socialProviders: d = [] } = ((S = e.context) == null ? void 0 : S.config) ?? {}, m = (t == null ? void 0 : t.user) ?? ((v = e.context) == null ? void 0 : v.user), f2 = !!(a && Object.keys(a).length > 0), p = Nr(e), y = e.hasTag("pending") || (p == null ? void 0 : p.hasTag("pending")), _ = rl(e, p), b = ((w) => {
    switch (w) {
      case "idle":
      case "setup":
        return "configuring";
      case "authenticated":
        return "authenticated";
      default:
        return "unauthenticated";
    }
  })(_);
  return {
    allowedMfaTypes: n,
    authStatus: b,
    challengeName: r,
    codeDeliveryDetails: o,
    error: i,
    hasValidationErrors: f2,
    isPending: y,
    route: _,
    socialProviders: d,
    totpSecretCode: s,
    unverifiedUserAttributes: l,
    user: m,
    username: c,
    validationErrors: a
    // @v6-migration-note
    // While most of the properties
    // on `AuthenticatorServiceContextFacade` can resolve to `undefined`, updating
    // the interface requires material changes in consumers (namely `useAuthenticator`)
    // which will have implications on the UI layer as typeguards and non-null checks
    // are required to pass type checking. As the `Authenticator` is behaving as expected
    // with the `AuthenticatorServiceContextFacade` interface, prefer to cast
  };
};
var al = ({ send: e, state: t }) => {
  const n = ol(e), r = il(t);
  return {
    ...n,
    ...r
  };
};
var fr;
(function(e) {
  e.Apple = "Apple", e.Amazon = "Amazon", e.Facebook = "Facebook", e.Google = "Google";
})(fr || (fr = {}));
var ho;
(function(e) {
  e.Email = "email", e.PhoneNumber = "phone_number";
})(ho || (ho = {}));
var sl = [
  "birthdate",
  "email",
  "family_name",
  "given_name",
  "middle_name",
  "name",
  "nickname",
  "phone_number",
  "preferred_username",
  "profile",
  "website"
];
var ll = [
  "username",
  "email",
  "phone_number"
];
var Ti = [
  ...ll,
  ...sl,
  "confirmation_code",
  "password",
  "confirm_password"
];
var cl = (e) => Ti.includes(e);
var ke = (e) => {
  const t = new FormData(e.target);
  return Object.fromEntries(t);
};
var Ii = (e) => Ti.includes(e);
var ul = (e) => Array.isArray(e);
var dl = (e) => e ? ul(e) ? e : [e] : null;
var fl = (e) => {
  const t = e.trim().split("");
  for (let n = 0; n < t.length; n++)
    n > 0 && n < t.length - 1 && (t[n] = "*");
  return t.join("");
};
var pl = (e) => {
  if (e.length < 4)
    return e;
  const t = e.split("");
  for (let n = 0; n < t.length - 4; n++)
    t[n] = "*";
  return t.join("");
};
var ml = (e) => {
  const t = e.split("@");
  return `${fl(t[0])}@${t[1]}`;
};
var gl = (e, t) => e === "Phone Number" ? pl(t) : ml(t);
var hl = (e) => nl.some((t) => e.includes(t));
var yl = (e, t, n) => encodeURI(`otpauth://totp/${e}:${t}?secret=${n}&issuer=${e}`);
function vl(e, ...t) {
  return Object.entries(e).reduce((n, [r, o]) => ({
    ...n,
    [r]: t.includes(r) ? o : o == null ? void 0 : o.trim()
  }), {});
}
var _l = {
  "Account recovery requires verified contact information": "Zurücksetzen des Accounts benötigt einen verifizierten Account",
  "Add your Profile": "Ihr Profil hinzufügen",
  "Add your Website": "Ihre Website hinzufügen",
  "Authenticator App (TOTP)": "Authentifikator-App (TOTP)",
  "Back to Sign In": "Zurück zur Anmeldung",
  "Change Password": "Passwort ändern",
  Changing: "Ändern von",
  Code: "Code",
  "Confirm Email Code": "E-Mail-Code bestätigen",
  "Confirm Password": "Passwort bestätigen",
  "Please confirm your Password": "Bitte bestätigen Sie Ihr Passwort",
  "Confirm Sign Up": "Registrierung bestätigen",
  "Confirm SMS Code": "SMS-Code bestätigen",
  "Confirm TOTP Code": "TOTP-Code bestätigen",
  Confirm: "Bestätigen",
  "Confirmation Code": "Bestätigungs-Code",
  Confirming: "Wird bestätigt",
  "Create a new account": "Einen neuen Account erstellen",
  "Create Account": "Account erstellen",
  "Creating Account": "Account wird erstellt",
  "Dismiss alert": "Warnung verwerfen",
  Email: "E-Mail",
  "Email Message": "E-Mail-Nachricht",
  "Enter your Birthdate": "Geben Sie Ihr Geburtsdatum ein",
  "Enter your code": "Geben Sie Ihren Code ein",
  "Enter your Confirmation Code": "Geben Sie Ihren Bestätigungs-Code ein",
  "Enter your Email": "Geben Sie Ihre E-Mail ein",
  "Enter your Family Name": "Geben Sie Ihren Nachnamen ein",
  "Enter your Given Name": "Geben Sie Ihren Vornamen ein",
  "Enter your Middle Name": "Geben Sie Ihren zweiten Vornamen ein",
  "Enter your Name": "Geben Sie Ihren Namen ein",
  "Enter your Nickname": "Geben Sie Ihren Spitznamen ein",
  "Enter your Password": "Geben Sie Ihr Passwort ein",
  "Enter your password": "Geben Sie Ihr Passwort ein",
  "Enter your email": "Geben Sie Ihre E-Mail ein",
  "Enter your phone number": "Geben Sie Ihre Telefonnummer ein",
  "Enter your Preferred Username": "Geben Sie Ihren bevorzugten Benutzernamen ein",
  "Enter your username": "Geben Sie Ihren Benutzernamen ein",
  "Forgot password?": "Passwort vergessen?",
  "Forgot your password?": "Passwort vergessen? ",
  "Hide password": "Passwort verbergen",
  "It may take a minute to arrive": "Es kann eine Minute dauern, bis er ankommt",
  Loading: "Wird geladen",
  "Multi-Factor Authentication": "Multifaktor-Authentifizierung",
  "Multi-Factor Authentication Setup": "Einrichtung der Multifaktor-Authentifizierung",
  "New password": "Neues Passwort",
  or: "oder",
  Password: "Passwort",
  "Phone Number": "Telefonnummer",
  "Resend Code": "Code erneut senden",
  "Reset your Password": "Zurücksetzen des Passworts",
  "Reset your password": "Zurücksetzen des passworts",
  "Select MFA Type": "MFA-Typ auswählen",
  "Send code": "Code senden",
  "Send Code": "Code senden",
  Sending: "Wird gesendet",
  "Setup Email": "E-Mail einrichten",
  "Setup TOTP": "TOTP einrichten",
  "Show password": "Passwort anzeigen",
  "Sign in to your account": "Melden Sie sich mit Ihrem Account an",
  "Sign In with Amazon": "Mit Amazon anmelden",
  "Sign In with Apple": "Mit Apple anmelden",
  "Sign In with Facebook": "Mit Facebook anmelden",
  "Sign In with Google": "Mit Google anmelden",
  "Sign in": "Anmelden",
  "Sign In": "Anmelden",
  "Signing in": "Wird angemeldet",
  Skip: "Überspringen",
  Submit: "Abschicken",
  Submitting: "Wird gesendet",
  "Text Message (SMS)": "Textnachricht (SMS)",
  Username: "Benutzername",
  "Verify Contact": "Kontakt verifizieren",
  Verify: "Verifizieren",
  "We Emailed You": "E-Mail wurde versendet",
  "We Sent A Code": "Wir haben einen Code gesendet",
  "We Texted You": "Wir haben Ihnen eine SMS gesendet",
  "Your code is on the way. To log in, enter the code we emailed to": "Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir per E-Mail verschickt haben",
  "Your code is on the way. To log in, enter the code we sent you": "Ihr Code ist unterwegs. Um sich anzumelden, geben Sie den Code ein, den wir Ihnen gesendet haben",
  "Your code is on the way. To log in, enter the code we texted to": "Ihr Bestätigungscode ist unterwegs. Um sich einzuloggen geben Sie den Code ein, den wir per SMS verschickt haben",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Ein Account mit dieser E-Mail existiert bereits.",
  "Confirm a Code": "Code bestätigen",
  "Confirm Sign In": "Anmeldung bestätigen",
  "Create account": "Hier registrieren",
  "Sign Up with Facebook": "Mit Facebook registrieren",
  "Sign Up with Google": "Mit Google registrieren",
  "Forgot Password": "Passwort vergessen",
  "Have an account? ": "Schon registriert? ",
  "Incorrect username or password": "Falscher Benutzername oder falsches Passwort",
  "Invalid password format": "Ungültiges Passwort-Format",
  "Invalid phone number format": "Ungültiges Telefonummern-Format. Benutze eine Nummer im Format: +12345678900",
  "It may take a minute to arrive.": "Es könnte eine Minute dauern, bis der Code eintrifft.",
  "Lost your code? ": "Code verloren? ",
  "New Password": "Neues Passwort",
  "No account? ": "Kein Account? ",
  "Password attempts exceeded": "Die maximale Anzahl der fehlerhaften Anmeldeversuche wurde erreicht",
  "Reset password": "Passwort zurücksetzen",
  "Reset Password": "Passwort Zurücksetzen",
  "Sign Out": "Abmelden",
  "Sign Up": "Registrieren",
  "User already exists": "Dieser Benutzer existiert bereits",
  "User does not exist": "Dieser Benutzer existiert nicht",
  "Username cannot be empty": "Benutzername darf nicht leer sein"
};
var Sl = {
  "Account recovery requires verified contact information": "Account recovery requires verified contact information",
  "Add your Profile": "Add your Profile",
  "Add your Website": "Add your Website",
  "Authenticator App (TOTP)": "Authenticator App (TOTP)",
  "Back to Sign In": "Back to Sign In",
  "Change Password": "Change Password",
  Changing: "Changing",
  Code: "Code",
  "Confirm Email Code": "Confirm Email Code",
  "Confirm Password": "Confirm Password",
  "Confirm Sign Up": "Confirm Sign Up",
  "Confirm SMS Code": "Confirm SMS Code",
  "Confirm MFA Code": "Confirm MFA Code",
  "Confirm TOTP Code": "Confirm TOTP Code",
  Confirm: "Confirm",
  "Confirmation Code": "Confirmation Code",
  Confirming: "Confirming",
  "Create a new account": "Create a new account",
  "Create Account": "Create Account",
  "Creating Account": "Creating Account",
  "Dismiss alert": "Dismiss alert",
  Email: "Email",
  "Email Message": "Email Message",
  "Enter your Birthdate": "Enter your Birthdate",
  "Enter your code": "Enter your code",
  "Enter your Confirmation Code": "Enter your Confirmation Code",
  "Enter your Email": "Enter your Email",
  "Enter your Family Name": "Enter your Family Name",
  "Enter your Given Name": "Enter your Given Name",
  "Enter your Middle Name": "Enter your Middle Name",
  "Enter your Name": "Enter your Name",
  "Enter your Nickname": "Enter your Nickname",
  "Enter your Password": "Enter your Password",
  "Enter your phone number": "Enter your phone number",
  "Enter your Preferred Username": "Enter your Preferred Username",
  "Enter your username": "Enter your username",
  "Forgot password?": "Forgot password?",
  "Forgot your password?": "Forgot your password?",
  "Hide password": "Hide password",
  "It may take a minute to arrive": "It may take a minute to arrive",
  Loading: "Loading",
  "Multi-Factor Authentication": "Multi-Factor Authentication",
  "Multi-Factor Authentication Setup": "Multi-Factor Authentication Setup",
  "New password": "New password",
  or: "or",
  Password: "Password",
  "Phone Number": "Phone Number",
  "Please confirm your Password": "Please confirm your Password",
  "Resend Code": "Resend Code",
  "Reset your password": "Reset your password",
  "Reset your Password": "Reset your Password",
  "Select MFA Type": "Select MFA Type",
  "Send code": "Send code",
  "Send Code": "Send Code",
  Sending: "Sending",
  "Setup Email": "Setup Email",
  "Setup TOTP": "Setup TOTP",
  "Show password": "Show password",
  "Sign in to your account": "Sign in to your account",
  "Sign In with Amazon": "Sign In with Amazon",
  "Sign In with Apple": "Sign In with Apple",
  "Sign In with Facebook": "Sign In with Facebook",
  "Sign In with Google": "Sign In with Google",
  "Sign in": "Sign in",
  "Sign In": "Sign In",
  "Signing in": "Signing in",
  Skip: "Skip",
  Submit: "Submit",
  Submitting: "Submitting",
  "Text Message (SMS)": "Text Message (SMS)",
  Username: "Username",
  "Verify Contact": "Verify Contact",
  Verify: "Verify",
  "We Emailed You": "We Emailed You",
  "We Sent A Code": "We Sent A Code",
  "We Texted You": "We Texted You",
  "Your code is on the way. To log in, enter the code we emailed to": "Your code is on the way. To log in, enter the code we emailed to",
  "Your code is on the way. To log in, enter the code we sent you": "Your code is on the way. To log in, enter the code we sent you",
  "Your code is on the way. To log in, enter the code we texted to": "Your code is on the way. To log in, enter the code we texted to"
};
var wl = {
  "Account recovery requires verified contact information": "La recuperación de la cuenta requiere información de contacto verificada",
  "Authenticator App (TOTP)": "Aplicación de autenticación (TOTP)",
  "Back to Sign In": "Volver a inicio de sesión",
  "Change Password": "Cambiar contraseña",
  Changing: "Cambiando",
  Code: "Código",
  "Code *": "Código *",
  "Confirm Email Code": "Confirmar el código de correo electrónico",
  "Confirm Password": "Confirmar contraseña",
  "Confirm Sign Up": "Confirmar registro",
  "Confirm SMS Code": "Confirmar el código de SMS",
  "Confirm TOTP Code": "Confirmar código TOTP",
  Confirm: "Confirmar",
  "Confirmation Code": "Código de confirmación",
  Confirming: "Confirmando",
  "Create a new account": "Crear una cuenta nueva",
  "Create Account": "Crear cuenta",
  "Creating Account": "Creando cuenta",
  "Dismiss alert": "Descartar alerta",
  Email: "Email",
  "Email Message": "Mensaje de correo electrónico",
  "Enter your code": "Ingrese el código",
  "Enter your Email": "Escriba su Email",
  "Enter your email": "Escriba su email",
  "Enter your Password": "Escriba su Contraseña",
  "Enter your phone number": "Ingrese el número de teléfono",
  "Enter your username": "Ingrese el nombre de usuario",
  "Forgot your password?": "¿Olvidó su contraseña?",
  "Hide password": "Ocultar contraseña",
  "It may take a minute to arrive": "Es posible que tarde un minuto en llegar",
  Loading: "Cargando",
  "Multi-Factor Authentication": "Autenticación multifactor",
  "Multi-Factor Authentication Setup": "Configuración de autenticación multifactor",
  "New password": "Nueva contraseña",
  or: "o",
  Password: "Contraseña",
  "Phone Number": "Número de teléfono",
  "Resend Code": "Reenviar código",
  "Reset your password": "Restablecer su contraseña",
  "Reset your Password": "Restablecer su Contraseña",
  "Select MFA Type": "Seleccionar el tipo de MFA",
  "Send code": "Enviar código",
  "Send Code": "Enviar código",
  Sending: "Enviando",
  "Setup Email": "Configurar correo electrónico",
  "Setup TOTP": "Configurar TOTP",
  "Show password": "Mostrar contraseña",
  "Sign in to your account": "Iniciar sesión en tu cuenta",
  "Sign In with Amazon": "Iniciar Sesión con Amazon",
  "Sign In with Apple": "Iniciar Sesión con Apple",
  "Sign In with Facebook": "Iniciar Sesión con Facebook",
  "Sign In with Google": "Iniciar Sesión con Google",
  "Sign in": "Iniciar sesión",
  "Sign In": "Iniciar Sesión",
  "Signing in": "Iniciando sesión",
  Skip: "Omitir",
  Submit: "Enviar",
  Submitting: "Enviando",
  "Text Message (SMS)": "Mensaje de texto (SMS)",
  Username: "Nombre de usuario",
  "Verify Contact": "Verificar contacto",
  Verify: "Verificar",
  "We Emailed You": "Le hemos enviado un correo electrónico",
  "We Sent A Code": "Hemos enviado un código",
  "We Texted You": "Le hemos enviado un mensaje de texto",
  "Your code is on the way. To log in, enter the code we emailed to": "El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por correo electrónico a",
  "Your code is on the way. To log in, enter the code we sent you": "El código está en camino. Para iniciar sesión, escriba el código que le hemos enviado",
  "Your code is on the way. To log in, enter the code we texted to": "El código está en camino. Para iniciar sesión, escriba el código que hemos enviado por mensaje de texto a",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Ya existe una cuenta con el correo ingresado.",
  "Confirm a Code": "Confirmar un código",
  "Confirm Sign In": "Confirmar inicio de sesión",
  "Forgot Password": "Olvidé mi contraseña",
  "Incorrect username or password.": "Nombre de usuario o contraseña incorrecta",
  "Enter your Family Name": "Escriba su apellido",
  "Enter your Given Name": "Escriba su nombre",
  "Given Name": "Nombre",
  "Family Name": "Apellido",
  "Reset Password": "Restablecer contraseña",
  "Please confirm your Password": "Confirme su contraseña",
  "Invalid password format": "Formato de contraseña inválido",
  "Invalid phone number format": "Formato de número de teléfono inválido",
  "Loading...": "Cargando...",
  "New Password": "Nueva contraseña",
  "Resend a Code": "Reenviar un código",
  "Sign Out": "Cerrar sesión",
  "Sign Up with Amazon": "Crear cuenta con Amazon",
  "Sign Up with Apple": "Crear cuenta con Apple",
  "Sign Up with Facebook": "Crear cuenta con Facebook",
  "Sign Up with Google": "Crear cuenta con Google",
  "Sign Up": "Crear cuenta",
  "User already exists": "El usuario ya existe",
  "User does not exist": "El usuario no existe",
  "Username/client id combination not found.": "El usuario no existe",
  "Username cannot be empty": "El nombre de usuario no puede estar vacío",
  "Your passwords must match": "Las contraseñas deben coincidir",
  "Password must have at least 8 characters": "La contraseña debe tener al menos 8 caracteres",
  "Password did not conform with policy: Password must have uppercase characters": "La contraseña debe tener al menos un carácter en mayúscula",
  "Password did not conform with policy: Password must have numeric characters": "La contraseña debe tener al menos un carácter numérico",
  "Password did not conform with policy: Password must have symbol characters": "La contraseña debe tener al menos un símbolo",
  "Password did not conform with policy: Password must have lowercase characters": "La contraseña debe tener al menos un carácter en minúsculas",
  "Invalid verification code provided, please try again.": "Código de verificación no válido, inténtelo de nuevo.",
  "Attempt limit exceeded, please try after some time.": "Número máximo de intentos excedido, por favor inténtelo de nuevo más tarde.",
  "A network error has occurred.": "Se ha producido un error de red."
};
var bl = {
  "Account recovery requires verified contact information": "La récupération du compte nécessite des informations de contact vérifiées",
  "Authenticator App (TOTP)": "Application d’authentification (TOTP)",
  "Back to Sign In": "Retour à la connexion",
  "Change Password": "Modifier le mot de passe",
  Changing: "Modification en cours",
  Code: "Code",
  "Confirm Email Code": "Confirmer le code e-mail",
  "Confirm Password": "Confirmez le mot de passe",
  "Confirm Sign Up": "Confirmer l'inscription",
  "Confirm SMS Code": "Confirmer le code SMS",
  "Confirm TOTP Code": "Confirmer le code TOTP",
  Confirm: "Confirmer",
  "Confirmation Code": "Code de confirmation",
  Confirming: "Confirmation",
  "Create a new account": "Créer un nouveau compte",
  "Create Account": "Créer un compte",
  "Creating Account": "Création d'un compte",
  "Dismiss alert": "Supprimer l'alerte",
  Email: "Email",
  "Email Message": "Message de l’e-mail",
  "Enter your code": "Saisissez cotre code de confirmation",
  "Enter your Email": "Saisissez votre adresse e-mail",
  "Enter your email": "Saisissez votre adresse e-mail",
  "Enter your phone number": "Saisissez votre numéro de téléphone",
  "Enter your username": "Saisissez votre nom d'utilisateur",
  "Forgot your password?": "Mot de passe oublié ? ",
  "Hide password": "Masquer le mot de passe",
  "It may take a minute to arrive": "Cela peut prendre une minute",
  Loading: "Chargement en cours",
  "Multi-Factor Authentication": "Authentification multifactorielle",
  "Multi-Factor Authentication Setup": "Configuration de l’authentification multifactorielle",
  "New password": "Nouveau mot de passe",
  or: "ou",
  Password: "Mot de passe",
  "Phone Number": "Numéro de téléphone",
  "Resend Code": "Renvoyer le code",
  "Reset your Password": "Réinitialiser votre mot de passe",
  "Reset your password": "Réinitialisez votre mot de passe",
  "Select MFA Type": "Sélectionner le type de MFA",
  "Send code": "Envoyer le code",
  "Send Code": "M'envoyer un code",
  Sending: "Envoi en cours",
  "Setup Email": "E-mail de configuration",
  "Setup TOTP": "Configuration de TOTP",
  "Show password": "Afficher le mot de passe",
  "Sign in to your account": "Connexion à votre compte",
  "Sign In with Amazon": "Se connecter avec Amazon",
  "Sign In with Apple": "Se connecter avec Apple",
  "Sign In with Facebook": "Se connecter avec Facebook",
  "Sign In with Google": "Se connecter avec Google",
  "Sign in": "Se connecter",
  "Sign In": "Se connecter",
  "Signing in": "Connexion en cours",
  Skip: "Passer",
  Submit: "Soumettre",
  Submitting: "Envoi en cours",
  "Text Message (SMS)": "Message texte (SMS)",
  Username: "Nom d'utilisateur",
  "Verify Contact": "Vérifier le contact",
  Verify: "Vérifier",
  "We Sent A Code": "Nous avons envoyé un code",
  "We Texted You": "Nous vous avons envoyé un SMS",
  "Your code is on the way. To log in, enter the code we sent you": "Votre code est en cours d'envoi. Pour vous connecter, saisissez le code que nous vous avons envoyé",
  // Additional translations provided by customers
  "Add your Profile": "Ajoutez votre profil",
  "Add your Website": "Ajoutez votre site web",
  "An account with the given email already exists.": "Un utilisateur avec cette adresse email existe déjà.",
  Birthdate: "Date de naissance",
  Change: "Modifier",
  "Confirm a Code": "Confirmer un code",
  "Confirm Sign In": "Confirmer la connexion",
  "Create account": "Créer un compte",
  "Enter your Birthdate": "Saisissez votre date de naissance",
  "Enter your Confirmation Code": "Saisissez votre code de confirmation",
  "Enter your Family Name": "Saisissez votre nom de famille",
  "Enter your Given Name": "Saisissez votre prénom",
  "Enter your Middle Name": "Saisissez votre deuxième prénom",
  "Enter your Name": "Saisissez votre nom",
  "Enter your Nickname": "Saisissez votre surnom",
  "Enter your Password": "Saisissez votre mot de passe",
  "Enter your Phone Number": "Saisissez votre numéro de téléphone",
  "Enter your Preferred Username": "Saisissez votre nom d'utilisateur",
  "Enter your password": "Saisissez votre mot de passe",
  "Given Name": "Prénom",
  "Family Name": "Nom de famille",
  "Forgot Password": "Mot de passe oublié",
  "Forgot Password?": "Mot de passe oublié ?",
  "Incorrect username or password.": "Identifiant ou mot de passe incorrect.",
  "Have an account? ": "Déjà un compte ? ",
  Hello: "Bonjour",
  "Incorrect username or password": "Identifiant ou mot de passe incorrect",
  "Invalid password format": "Format de mot de passe invalide",
  "Invalid phone number format": "Format de numéro de téléphone invalide. Veuillez utiliser un format +12345678900",
  "Loading...": "Chargement...",
  "Lost your code? ": "Vous avez perdu votre code ? ",
  "Network error": "Erreur réseau",
  "New Password": "Nouveau mot de passe",
  Name: "Nom",
  "No account? ": "Pas de compte ? ",
  "Please confirm your Password": "Confirmez votre mot de passe",
  "Preferred Username": "Nom d'utilisateur préféré",
  Profile: "Profil",
  "Resend a Code": "Renvoyer un code",
  "Reset password": "Réinitialiser le mot de passe",
  "Reset Password": "Réinitialiser le mot de passe",
  Send: "Envoyer",
  "Sign In with AWS": "Se connecter avec AWS",
  "Sign Out": "Déconnexion",
  "Sign Up": "S'inscrire",
  SMS: "SMS",
  "User already exists": "L'utilisateur existe déjà",
  "User does not exist": "L'utilisateur n'existe pas",
  "Username cannot be empty": "Le nom d'utilisateur doit être renseigné",
  "Username/client id combination not found.": "L'utilisateur n'existe pas",
  "We Emailed You": "Nous vous avons envoyé un code",
  "Your code is on the way. To log in, enter the code we emailed to": "Votre code est en route. Pour vous connecter entrez le code reçu sur cette adresse email",
  "Your code is on the way. To log in, enter the code we texted to": "Votre code est en route. Pour vous connecter entrez le code reçu sur ce numéro de téléphone",
  "Your passwords must match": "Vos mots de passe doivent être identiques",
  "It may take a minute to arrive.": "Cela peut prendre quelques minutes.",
  Website: "Site web",
  "Password must have at least 8 characters": "Le mot de passe doit comporter au moins 8 caractères",
  "Password did not conform with policy: Password must have uppercase characters": "Le mot de passe doit comporter des caractères majuscules",
  "Password did not conform with policy: Password must have numeric characters": "Le mot de passe doit comporter des caractères numériques",
  "Password did not conform with policy: Password must have symbol characters": "Le mot de passe doit comporter des symboles",
  "Password did not conform with policy: Password must have lowercase characters": "Le mot de passe doit comporter des caractères minuscules",
  "Invalid verification code provided, please try again.": "Code de vérification invalide, veuillez réessayer.",
  "Attempt limit exceeded, please try after some time.": "Nombre maximum de tentatives dépassé, veuillez réessayer plus tard.",
  "A network error has occurred.": "Une erreur de réseau s'est produite."
};
var Cl = {
  "Account recovery requires verified contact information": "Il ripristino dell'account richiede informazioni di contatto verificate",
  "Authenticator App (TOTP)": "App di autenticazione (TOTP)",
  "Back to Sign In": "Torna alla schermata di accesso",
  "Change Password": "Cambia la password",
  Changing: "Modifica in corso",
  Code: "Codice",
  "Confirm Email Code": "Conferma codice e-mail",
  "Confirm Password": "Conferma la password",
  "Confirm Sign Up": "Conferma registrazione",
  "Confirm SMS Code": "Conferma codice SMS",
  "Confirm TOTP Code": "Conferma codice TOTP",
  Confirm: "Conferma",
  "Confirmation Code": "Codice di verifica",
  Confirming: "Conferma in corso",
  "Create a new account": "Crea un nuovo account",
  "Create Account": "Crea Account",
  "Creating Account": "Creazione account in corso",
  "Dismiss alert": "Ignora l'avviso",
  Email: "Email",
  "Email Message": "Messaggio e-mail",
  "Enter your code": "Inserisci il tuo codice",
  "Enter your Email": "Inserisci la tua e-mail",
  "Enter your phone number": 'Inserisci il tuo numero di telefono"',
  "Enter your username": "Inserisci il tuo nome utente",
  "Forgot your password?": "Password dimenticata?",
  "Hide password": "Nascondi password",
  "It may take a minute to arrive": "L'arrivo potrebbe richiedere qualche minuto",
  Loading: "Caricamento in corso",
  "Multi-Factor Authentication": "Autenticazione a più fattori",
  "Multi-Factor Authentication Setup": "Configurazione dell'autenticazione a più fattori",
  "New password": "Nuova password",
  or: "oppure",
  Password: "Password",
  "Phone Number": "Numero di telefono",
  "Resend Code": "Invia nuovamente il codice",
  "Reset your Password": "Reimposta la tua Password",
  "Reset your password": "Reimposta la tua password",
  "Select MFA Type": "Seleziona il tipo di MFA",
  "Send code": "Invia codice",
  "Send Code": "Invia codice",
  Sending: "Invio in corso",
  "Setup Email": "Configura l'e-mail",
  "Setup TOTP": "Configura TOTP",
  "Show password": "Mostra password",
  "Sign in to your account": "Accedi al tuo account",
  "Sign In with Amazon": "Accedi con Amazon",
  "Sign In with Apple": "Accedi con Apple",
  "Sign In with Facebook": "Accedi con Facebook",
  "Sign In with Google": "Accedi con Google",
  "Sign in": "Accedi",
  "Sign In": "Accedi",
  "Signing in": "Accesso in corso",
  Skip: "Salta",
  Submit: "Invia",
  Submitting: "Invio in corso",
  "Text Message (SMS)": "Messaggio di testo (SMS)",
  Username: "Nome utente",
  "Verify Contact": "Verifica contatto",
  Verify: "Verifica",
  "We Emailed You": "Ti abbiamo inviato un'e-mail",
  "We Sent A Code": "Ti abbiamo inviato un codice",
  "We Texted You": "Ti abbiamo inviato un SMS",
  "Your code is on the way. To log in, enter the code we emailed to": "Il codice è in arrivo. Per effettuare l'accesso, immetti il codice che ti abbiamo inviato via e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Il codice è in arrivo. Per accedere, immetti il codice che ti abbiamo inviato",
  "Your code is on the way. To log in, enter the code we texted to": "Il codice è in arrivo. Per accedere, immetti il codice che abbiamo inviato tramite SMS",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Questa email è già utilizzata da un altro account.",
  "Confirm a Code": "Conferma un codice",
  "Confirm Sign In": "Conferma l'accesso",
  "Create account": "Crea account",
  "Enter your password": "Inserisci la tua password",
  "Forgot Password?": "Password dimenticata?",
  "Have an account? ": "Già registrato?",
  "Incorrect username or password": "Nome utente o password errati",
  "Invalid password format": "Formato della password non valido",
  "Invalid phone number format": "Formato del numero di telefono non valido",
  "Lost your code?": "Codice smarrito?",
  "New Password": "Nuova password",
  "No account? ": "Non hai un account?",
  "Password attempts exceeded": "Il numero massimo di tentativi di accesso falliti è stato raggiunto",
  "Reset password": "Reimposta password",
  "Sign Out": "Esci",
  "Sign Up": "Registrati",
  "User already exists": "Utente già esistente",
  "User does not exist": "Utente inesistente",
  "Username cannot be empty": "Il nome utente non può essere vuoto"
};
var Al = {
  "Account recovery requires verified contact information": "アカウントの復旧には確認済みの連絡先が必要です",
  "Authenticator App (TOTP)": "認証アプリ (TOTP)",
  "Back to Sign In": "サインインに戻る",
  "Change Password": "パスワードを変える ",
  Changing: "変更中",
  Code: "コード",
  "Confirm Email Code": "E メールコードを確認",
  "Confirm Password": "パスワードの確認",
  "Confirm Sign Up": "登録する",
  "Confirm SMS Code": "SMS コードを確認",
  "Confirm TOTP Code": "TOTP コードを確認",
  Confirm: "確定",
  "Confirmation Code": "確認コード",
  Confirming: "確認中",
  "Create a new account": "新しいアカウントを作る",
  "Create Account": "アカウントを作る",
  "Creating Account": "アカウントの作成中",
  "Dismiss alert": "アラートを閉じる",
  Email: "メールアドレス",
  "Email Message": "E メールメッセージ",
  "Enter your code": "コードを入力",
  "Enter your Email": "メールアドレスを入力",
  "Enter your phone number": "電話番号を入力",
  "Enter your username": "ユーザー名を入力 ",
  "Enter your Username": "ユーザー名を入力 ",
  "Forgot your password?": "パスワードを忘れましたか？ ",
  "Hide password": "パスワードを非表示",
  "It may take a minute to arrive": "到着するまでに 1 分かかることがあります",
  Loading: "ロード中",
  "Multi-Factor Authentication": "多要素認証",
  "Multi-Factor Authentication Setup": "多要素認証のセットアップ",
  "New password": "新しいパスワード",
  or: "又は",
  Password: "パスワード ",
  "Phone Number": "電話番号",
  "Resend Code": "コードを再送信",
  "Reset your Password": "パスワードをリセット",
  "Reset your password": "パスワードをリセットする",
  "Select MFA Type": "MFA タイプを選択",
  "Send code": "コードを送信",
  "Send Code": "コードを送信",
  Sending: "送信中",
  "Setup Email": "E メールをセットアップ",
  "Setup TOTP": "TOTP をセットアップ",
  "Show password": "パスワードを表示",
  "Sign in to your account": "アカウントにサインイン ",
  "Sign In with Amazon": "Amazonでサインイン",
  "Sign In with Apple": "Apple でサインイン",
  "Sign In with Facebook": "Facebookでサインイン",
  "Sign In with Google": "Googleでサインイン",
  "Sign In": "サインイン ",
  "Sign in": "サインイン",
  "Signing in": "サインイン中",
  Skip: "スキップ",
  Submit: "送信",
  Submitting: "送信中",
  "Text Message (SMS)": "テキストメッセージ (SMS)",
  Username: "ユーザー名 ",
  "Verify Contact": "連絡先を確認",
  Verify: "確認",
  "We Sent A Code": "コードが送信されました",
  "We Texted You": "テキストが送信されました",
  "Your code is on the way. To log in, enter the code we sent you": "コードが途中です。ログインするには、送信したコードを入力してください",
  // Additional translations provided by customers
  "An account with the given email already exists.": "入力されたメールアドレスのアカウントが既に存在します",
  "Confirm a Code": "コードを確認",
  "Confirm Sign In": "サインインする",
  "Create account": "アカウントを作る ",
  "Enter your password": "パスワードを入力 ",
  "Enter your Password": "パスワードを入力",
  "Please confirm your Password": "パスワードを入力",
  "Forgot Password": "パスワードを忘れた ",
  "Have an account? ": "アカウントを持っていますか？",
  "Incorrect username or password": "ユーザー名かパスワードが異なります ",
  "Invalid password format": "パスワードの形式が無効です ",
  "Invalid phone number format": `不正な電話番号の形式です。
+12345678900 の形式で入力してください`,
  "It may take a minute to arrive.": "コードを受信するまで数分かかる場合があります。",
  "Lost your code? ": "コードを失くしましたか？",
  "New Password": "新しいパスワード",
  "No account? ": "アカウントが無いとき ",
  "Password attempts exceeded": "サインインの試行回数が上限に達しました",
  "Reset password": "パスワードをリセット ",
  "Reset Password": "パスワードをリセット",
  "Sign Out": "サインアウト ",
  "Sign Up": "登録 ",
  "User already exists": "既にユーザーが存在しています ",
  "User does not exist": "ユーザーが存在しません ",
  "Username cannot be empty": "ユーザー名は入力必須です",
  "We Emailed You": "コードを送信しました",
  "Your code is on the way. To log in, enter the code we emailed to": "ログインするには、メールに記載されたコードを入力してください。送信先:",
  "Your code is on the way. To log in, enter the code we texted to": "ログインするには、テキストメッセージに記載されたコードを入力してください。送信先:"
};
var El = {
  "Account recovery requires verified contact information": "계정 복구를 위해 연락처 확인이 필요합니다",
  "Authenticator App (TOTP)": "인증 앱(TOTP)",
  "Back to Sign In": "로그인으로 돌아가기",
  "Change Password": "비밀번호 변경하기",
  Changing: "변경중",
  Code: "코드",
  "Confirm Email Code": "이메일 코드 확인",
  "Confirm Password": "비밀번호 재확인",
  "Confirm Sign Up": "회원가입 확인",
  "Confirm SMS Code": "휴대폰 본인 확인",
  "Confirm TOTP Code": "TOTP 인증번호 확인",
  Confirm: "확인",
  "Confirmation Code": "인증번호",
  Confirming: "확인중",
  "Create a new account": "회원가입",
  "Create Account": "회원가입",
  "Creating Account": "회원가입중",
  "Dismiss alert": "알림 무시",
  Email: "이메일",
  "Email Message": "이메일 메시지",
  "Enter your Birthdate": "생년월일 입력",
  "Enter your code": "인증번호를 입력해주세요",
  "Enter your Confirmation Code": "확인 코드 입력",
  "Enter your Email": "이메일 입력",
  "Enter your Family Name": "성 입력",
  "Enter your Given Name": "사용장 이름 입력",
  "Enter your Name": "이름 입력",
  "Enter your Nickname": "닉네임 입력",
  "Enter your Password": "비밀번호 입력",
  "Enter your phone number": "전화번호 입력",
  "Enter your Preferred Username": "선호하는 아이디 입력",
  "Enter your username": "아이디를 입력해주세요",
  "Forgot password?": "비밀번호를 잊으셨나요?",
  "Hide password": "비밀번호 숨기기",
  "It may take a minute to arrive": "도착하는 데 1분 정도 걸릴 수 있습니다",
  Loading: "로딩중",
  "Multi-Factor Authentication": "다중 인증",
  "Multi-Factor Authentication Setup": "다중 인증 설정",
  "New password": "새 비밀번호",
  or: "또는",
  Password: "비밀번호",
  "Phone Number": "전화번호",
  "Please confirm your Password": "비밀번호를 확인해 주세요.",
  "Resend Code": "인증번호 재전송",
  "Reset your password": "비밀번호 재설정",
  "Reset your Password": "비밀번호 재설정",
  "Select MFA Type": "MFA 유형 선택",
  "Send code": "인증코드 보내기",
  "Send Code": "코드 전송",
  Sending: "전송중",
  "Setup Email": "이메일 설정",
  "Setup TOTP": "TOTP 설정하기",
  "Show password": "비밀번호 보이기",
  "Sign in to your account": "로그인",
  "Sign In with Amazon": "Amazon 로그인",
  "Sign In with Apple": "Apple 로그인",
  "Sign In with Facebook": "Facebook 로그인",
  "Sign In with Google": "Google 로그인",
  "Sign in": "로그인",
  "Sign In": "로그인",
  "Signing in": "로그인중",
  Skip: "다음에 하기",
  Submit: "확인",
  Submitting: "확인중",
  "Text Message (SMS)": "문자 메시지(SMS)",
  Username: "아이디",
  "Verify Contact": "연락처 확인",
  Verify: "인증",
  "We Emailed You": "이메일을 보냄",
  "We Sent A Code": "코드를 보냄",
  "We Texted You": "문자 메시지를 보냄",
  "Your code is on the way. To log in, enter the code we emailed to": "코드가 전송 중입니다. 로그인하려면 이메일로 전송한 코드를 입력하세요",
  "Your code is on the way. To log in, enter the code we sent you": "코드가 전송 중입니다. 로그인하려면 전송한 코드를 입력하세요",
  "Your code is on the way. To log in, enter the code we texted to": "코드가 전송 중입니다. 로그인하려면 문자 메시지로 전송한 코드를 입력하세요",
  // Additional translations provided by customers
  Birthdate: "생년월일",
  "Family Name": "성",
  "Forgot your password?": "비밀번호를 잊으셨나요?",
  "Given Name": "이름",
  Name: "성함",
  Nickname: "닉네임",
  "Preferred Username": "닉네임",
  Profile: "프로필",
  "Reset Password": "비밀번호 재설정",
  Website: "웹사이트"
};
var Tl = {
  "Account recovery requires verified contact information": "Gjenoppretting av konto krever verifisert kontaktinformajson",
  "Add your Profile": "Legg til profilen din",
  "Add your Website": "Legg til nettsiden din",
  "Authenticator App (TOTP)": "Autentiseringsapp (TOTP)",
  "Back to Sign In": "Tilbake til innlogging",
  "Change Password": "Bytt passord",
  Changing: "Endre",
  Code: "Kode",
  "Confirm Email Code": "Bekreft e-postkode",
  "Confirm Password": "Bekreft passordet",
  "Confirm Sign Up": "Bekreft registrering",
  "Confirm SMS Code": "Bekreft SMS-kode",
  "Confirm TOTP Code": "Bekreft TOTP-kode",
  Confirm: "Bekreft",
  "Confirmation Code": "Bekreftelseskode",
  Confirming: "Bekrefter",
  "Create a new account": "Opprett en ny konto",
  "Create Account": "Opprett konto",
  "Creating Account": "Oppretter konto",
  "Dismiss alert": "Avvis varsel",
  Email: "E-post",
  "Email Message": "E-postmelding",
  "Enter your Birthdate": "Skriv inn fødselsdatoen din",
  "Enter your code": "Skriv inn koden din",
  "Enter your Confirmation Code": "Skriv inn bekreftelseskoden din",
  "Enter your Email": "Skriv inn e-postadressen din",
  "Enter your Family Name": "Skriv inn etternavnet ditt",
  "Enter your Given Name": "Skriv inn fornavnet ditt",
  "Enter your Middle Name": "Skriv inn mellomnavnet ditt",
  "Enter your Name": "Skriv inn navnet ditt",
  "Enter your Nickname": "Skriv inn kallenavnet ditt",
  "Enter your Password": "Skriv inn passordet ditt",
  "Enter your phone number": "Skriv inn telefonnummeret ditt",
  "Enter your Preferred Username": "Skriv inn det foretrukne brukernavnet ditt",
  "Enter your username": "Skriv inn brukernavnet ditt",
  "Forgot password?": "Glemt passord?",
  "Forgot your password?": "Glemt passordet ditt?",
  "Hide password": "Skjul passordet",
  "It may take a minute to arrive": "Det kan ta et minutt for å komme frem",
  Loading: "Laster inn",
  "Multi-Factor Authentication": "Flerfaktorautentisering",
  "Multi-Factor Authentication Setup": "Oppsett av flerfaktorautentisering",
  "New password": "Nytt passord",
  or: "eller",
  Password: "Passord",
  "Phone Number": "Telefonnummer",
  "Please confirm your Password": "Vennligst bekreft passordet ditt",
  "Resend Code": "Send koden på nytt",
  "Reset your password": "Nullstill passordet ditt",
  "Reset your Password": "Nullstill passordet ditt",
  "Select MFA Type": "Velg MFA-type",
  "Send code": "Send kode",
  "Send Code": "Send kode",
  Sending: "Sender",
  "Setup Email": "Konfigurer e-post",
  "Setup TOTP": "Konfigurer TOTP",
  "Show password": "Vis passordet",
  "Sign in to your account": "Logg inn på kontoen din",
  "Sign In with Amazon": "Logg inn med Amazon",
  "Sign In with Apple": "Logg inn med Apple",
  "Sign In with Facebook": "Logg inn med Facebook",
  "Sign In with Google": "Logg inn med Google",
  "Sign in": "Logg inn",
  "Sign In": "Logg inn",
  "Signing in": "Logger inn",
  Skip: "Hopp over",
  Submit: "Send inn",
  Submitting: "Sender inn",
  "Text Message (SMS)": "Tekstmelding (SMS)",
  Username: "Brukernavn",
  "Verify Contact": "Bekreft kontakt",
  Verify: "Bekreft",
  "We Emailed You": "Vi sendte deg en e-post",
  "We Sent A Code": "Vi sendte en kode",
  "We Texted You": "Vi sendte deg en tekstmelding",
  "Your code is on the way. To log in, enter the code we emailed to": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte e-post til",
  "Your code is on the way. To log in, enter the code we sent you": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte deg",
  "Your code is on the way. To log in, enter the code we texted to": "Koden din er på vei. For å logge inn, skriv inn koden vi sendte tekstmelding til",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Det finnes allerede en konto med denne e-postadressen",
  "Confirm a Code": "Bekreft koden",
  "Confirm Sign In": "Bekreft innlogging",
  "Create account": "Opprett konto",
  "Enter your password": "Skriv inn passordet ditt",
  "Forgot Password": "Glemt passordet",
  "Have an account? ": "Har en konto allerede? ",
  "Incorrect username or password": "Feil brukernavn eller passord",
  "Invalid password format": "Ugyldig passordformat",
  "Invalid phone number format": "Ugyldig telefonnummerformat",
  "Lost your code? ": "Mistet koden? ",
  "New Password": "Nytt passord",
  "No account? ": "Ingen konto? ",
  "Password attempts exceeded": "For mange mislykkede passordforsøk",
  "Reset password": "Nullstill passord",
  "Sign Out": "Logg ut",
  "Sign Up": "Registrering",
  "User already exists": "Brukeren finnes allerede",
  "User does not exist": "Brukeren finnes ikke",
  "Username cannot be empty": "Brukernavnet kan ikke være tomt"
};
var Il = {
  "Account recovery requires verified contact information": "Accountherstel vereist geverifieerde contactgegevens",
  "Authenticator App (TOTP)": "Authenticator-app (TOTP)",
  "Back to Sign In": "Terug naar inloggen",
  "Change Password": "Wachtwoord wijzigen",
  Changing: "Wordt aangepast",
  Code: "Code",
  "Confirm Email Code": "E-mailcode bevestigen",
  "Confirm Password": "Bevestig Wachtwoord",
  "Confirm Sign Up": "Bevestig inschrijving",
  "Confirm SMS Code": "Bevestig SMS Code",
  "Confirm TOTP Code": "Bevestig TOTP Code",
  Confirm: "Bevestig",
  "Confirmation Code": "Bevestigingscode",
  Confirming: "Bevestigen",
  "Create a new account": "Nieuw account aanmaken",
  "Create Account": "Account aanmaken",
  "Creating Account": "Account wordt aangemaakt",
  "Dismiss alert": "Waarschuwing sluiten",
  Email: "E-mail",
  "Email Message": "E-mailbericht",
  "Enter your code": "Vul je code in",
  "Enter your Email": "Vul je e-mail in",
  "Enter your Password": "Vul je wachtwoord in",
  "Enter your phone number": "Vul je telefoonnummer in",
  "Enter your username": "Vul je gebruikersnaam in",
  "Enter your Username": "Vul je gebruikersnaam in",
  "Forgot your password?": "Wachtwoord vergeten? ",
  "Hide password": "Verberg wachtwoord",
  "It may take a minute to arrive": "Het kan even duren voordat deze aankomt",
  Loading: "Laden",
  "Multi-Factor Authentication": "Multi-Factor Authentication",
  "Multi-Factor Authentication Setup": "Multi-Factor Authentication instellen",
  "New password": "Nieuw wachtwoord",
  "New Password": "Nieuw Wachtwoord",
  or: "of",
  Password: "Wachtwoord",
  "Phone Number": "Telefoonnummer",
  "Please confirm your Password": "Bevestig je wachtwoord",
  "Resend Code": "Verstuur code nogmaals",
  "Reset Password": "Wachtwoord resetten",
  "Reset your password": "Reset je wachtwoord",
  "Reset your Password": "Wachtwoord resetten",
  "Select MFA Type": "MFA-type kiezen",
  "Send code": "Verstuur code",
  "Send Code": "Verstuur Code",
  Sending: "Versturen",
  "Setup Email": "E-mailadres instellen",
  "Setup TOTP": "TOTP Instellingen",
  "Show password": "Toon wachtwoord",
  "Sign in to your account": "Inloggen op je account",
  "Sign In with Amazon": "Inloggen met Amazon",
  "Sign In with Apple": "Inloggen met Apple",
  "Sign In with Facebook": "Inloggen met Facebook",
  "Sign In with Google": "Inloggen met Google",
  "Sign in": "Inloggen",
  "Sign In": "Inloggen",
  "Signing in": "Inloggen",
  Skip: "Overslaan",
  Submit: "Versturen",
  Submitting: "Wordt verstuurd",
  "Text Message (SMS)": "Tekstbericht (sms)",
  Username: "Gebruikersnaam",
  "Verify Contact": "Verifieer Contact",
  Verify: "Verifieer",
  "We Emailed You": "We hebben u een e-mail gestuurd",
  "We Sent A Code": "We hebben een code gestuurd",
  "We Texted You": "We hebben u een sms gestuurd",
  "Your code is on the way. To log in, enter the code we emailed to": "Uw code is onderweg. Om in te loggen, voer de code in die we gemaild hebben naar",
  "Your code is on the way. To log in, enter the code we sent you": "Uw code is onderweg. Om in te loggen, voer de code in die we u hebben gestuurd",
  "Your code is on the way. To log in, enter the code we texted to": "Uw code is onderweg. Om in te loggen, voer de code in die we hebben gestuurd naar",
  "Your passwords must match": "Je wachtwoorden moeten overeenkomen"
};
var Pl = {
  "Account recovery requires verified contact information": "Odzyskanie konta wymaga zweryfikowanych danych kontaktowych",
  "Authenticator App (TOTP)": "Aplikacja uwierzytelniania (TOTP)",
  "Back to Sign In": "Powrót do logowania",
  "Change Password": "Zmień hasło",
  Changing: "Zmienianie",
  Code: "Kod",
  "Confirm Email Code": "Potwierdź kod e-mail",
  "Confirm Password": "Potwierdź Hasło",
  "Confirm Sign Up": "Potwierdź rejestrację",
  "Confirm SMS Code": "Potwierdź kod SMS",
  "Confirm TOTP Code": "Potwierdź hasło jednorazowe",
  Confirm: "Potwierdź",
  "Confirmation Code": "Kod potwierdzenia",
  Confirming: "Potwierdzanie",
  "Create a new account": "Utwórz nowe konto",
  "Create Account": "Utwórz konto",
  "Creating Account": "Tworzenie konta",
  "Dismiss alert": "Odrzuć alert",
  Email: "E-mail",
  "Email Message": "Wiadomość e-mail",
  "Enter your code": "Wprowadź swój kod",
  "Enter your Email": "Wpisz swój adres e-mail",
  "Enter your phone number": "Wpisz swój numer telefonu",
  "Enter your username": "Wprowadź swoją nazwę użytkownika",
  "Forgot your password?": "Zapomniałeś hasła? ",
  "Hide password": "Ukryj hasło",
  "It may take a minute to arrive": "Może to chwilę potrwać",
  Loading: "Ładowanie",
  "Multi-Factor Authentication": "Uwierzytelnianie wieloskładnikowe",
  "Multi-Factor Authentication Setup": "Konfigurowanie uwierzytelniania wieloskładnikowego",
  "New password": "Nowe hasło",
  or: "albo",
  Password: "Hasło",
  "Phone Number": "Numer telefonu",
  "Resend Code": "Wyślij kod ponownie",
  "Reset your password": "Zresetuj swoje hasło",
  "Reset your Password": "Zresetuj swoje hasło",
  "Select MFA Type": "Wybierz typ MFA",
  "Send code": "Wyślij kod",
  "Send Code": "Zresetuj hasło",
  Sending: "Wysyłanie",
  "Setup Email": "Konfiguracja poczty e-mail",
  "Setup TOTP": "Konfiguruj TOTP",
  "Show password": "Pokaż hasło",
  "Sign in to your account": "Zaloguj się na swoje konto",
  "Sign In with Amazon": "Zaloguj z Amazon",
  "Sign In with Apple": "Zaloguj z Apple",
  "Sign In with Facebook": "Zaloguj z Facebook",
  "Sign In with Google": "Zaloguj z Google",
  "Sign In": "Logowanie",
  "Sign in": "Zaloguj",
  "Signing in": "Logowanie",
  Skip: "Pomiń",
  Submit: "Wyślij",
  Submitting: "Wysyłanie",
  "Text Message (SMS)": "Wiadomość tekstowa (SMS)",
  Username: "Nazwa użytkownika",
  "Verify Contact": "Weryfikacja danych kontaktowych",
  Verify: "Zweryfikuj",
  // Additional translations provided by customers
  Birthdate: "Data urodzenia",
  "Family Name": "Nazwisko",
  "Given Name": "Pierwsze imię",
  "Middle Name": "Drugie imię",
  Name: "Imię i nazwisko",
  Nickname: "Pseudonim",
  "Preferred Username": "Preferowana nazwa użytkownika",
  Profile: "Profil",
  Website: "Strona internetowa",
  "We Emailed You": "Wysłaliśmy Ci wiadomość e-mail",
  "We Sent A Code": "Wysłaliśmy kod",
  "We Texted You": "Wysłaliśmy Ci wiadomość SMS",
  "Your code is on the way. To log in, enter the code we emailed to": "Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany na adres e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Twój kod został wysłany. Aby się zalogować, wprowadź wysłany do Ciebie kod",
  "Your code is on the way. To log in, enter the code we texted to": "Twój kod został wysłany. Aby się zalogować, wprowadź kod wysłany do Ciebie w wiadomości SMS pod numer"
};
var kl = {
  "Account recovery requires verified contact information": "A recuperação da conta requer informações de contato verificadas",
  "Authenticator App (TOTP)": "Aplicativo autenticador (TOTP)",
  "Add your Profile": "Adicione seu Perfil",
  "Add your Website": "Adicione seu Website",
  "Back to Sign In": "Voltar para Entrar",
  "Change Password": "Mudar senha",
  Changing: "Mudando",
  Code: "Código",
  "Confirm Email Code": "Confirmar código de e-mail",
  "Confirm Password": "Confirme a Senha",
  "Confirm Sign Up": "Confirmar inscrição",
  "Confirm SMS Code": "Confirme o código SMS",
  "Confirm MFA Code": "Confirme o código MFA",
  "Confirm TOTP Code": "Confirme o código TOTP",
  Confirm: "confirme",
  "Confirmation Code": "Código de confirmação",
  Confirming: "Confirmando",
  "Create a new account": "Criar uma nova conta",
  "Create Account": "Criar Conta",
  "Creating Account": "Criando conta",
  "Dismiss alert": "Descartar alerta",
  Email: "O email",
  "Email Message": "Mensagem de e-mail",
  "Enter your Birthdate": "Digite sua Data de Nascimento",
  "Enter your code": "Insira seu código",
  "Enter your Confirmation Code": "Digite seu código de confirmação",
  "Enter your Email": "Digite seu e-mail",
  "Enter your Family Name": "Digite seu Sobrenome",
  "Enter your Given Name": "Digite seu Primeiro Nome",
  "Enter your Middle Name": "Digite seu Nome do Meio",
  "Enter your Name": "Digite seu Nome",
  "Enter your Nickname": "Digite seu Apelido",
  "Enter your Password": "Digite sua senha",
  "Enter your phone number": "Digite seu número de telefone",
  "Enter your Preferred Username": "Digite seu nome de usuário preferido",
  "Enter your username": "Digite seu nome de usuário",
  "Forgot password?": "Esqueceu a senha?",
  "Forgot your password?": "Esqueceu sua senha?",
  "Hide password": "Esconder a senha",
  "It may take a minute to arrive": "Pode levar um minuto para chegar",
  Loading: "Carregando",
  "Multi-Factor Authentication": "Autenticação multifator",
  "Multi-Factor Authentication Setup": "Configuração da autenticação multifator",
  "New password": "Nova Senha",
  or: "ou",
  Password: "Senha",
  "Phone Number": "Número de telefone",
  "Please confirm your Password": "Por favor confirme sua Senha",
  "Resend Code": "Reenviar código",
  "Reset your password": "Redefina sua senha",
  "Reset your Password": "Redefina sua senha",
  "Select MFA Type": "Selecionar tipo de MFA",
  "Send code": "Enviar código",
  "Send Code": "Enviar código",
  Sending: "Enviando",
  "Setup Email": "Configurar e-mail",
  "Setup TOTP": "Configurar TOTP",
  "Show password": "Mostrar senha",
  "Sign in to your account": "Faça login em sua conta",
  "Sign In with Amazon": "Entrar com a Amazon",
  "Sign In with Apple": "Entrar com a Apple",
  "Sign In with Facebook": "Entrar com o Facebook",
  "Sign In with Google": "Faça login no Google",
  "Sign in": "Entrar",
  "Sign In": "Entrar",
  "Signing in": "Entrando",
  Skip: "Pular",
  Submit: "Enviar",
  Submitting: "Enviando",
  "Text Message (SMS)": "Mensagem de texto (SMS)",
  Username: "Nome do usuário",
  "Verify Contact": "Verificar contato",
  Verify: "Verificar",
  "We Emailed You": "Enviamos um e-mail para você",
  "We Sent A Code": "Enviamos um código",
  "We Texted You": "Enviamos um SMS para você",
  "Your code is on the way. To log in, enter the code we emailed to": "Seu código está a caminho. Para fazer login, insira o código para o qual enviamos um e-mail",
  "Your code is on the way. To log in, enter the code we sent you": "Seu código está a caminho. Para fazer login, insira o código que enviamos para você",
  "Your code is on the way. To log in, enter the code we texted to": "Seu código está a caminho. Para fazer login, insira o código para o qual enviamos uma mensagem de texto",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Já existe uma conta com o email utilizado.",
  "Confirm a Code": "Confirmar um Código",
  "Confirm Sign In": "Confirmar Início de Sessão",
  "Forgot Password": "Esqueci Minha Senha",
  "Incorrect username or password.": "Nome de usuário ou senha incorreta",
  "Invalid password format": "Formato de senha inválido",
  "Invalid phone number format": "Formato de número de telefone inválido",
  "Loading...": "Carregando...",
  "New Password": "Nova Senha",
  "Resend a Code": "Reenviar um Código",
  "Sign Out": "Sair",
  "Sign Up with Amazon": "Criar Conta com a Amazon",
  "Sign Up with Apple": "Criar Conta com a Apple",
  "Sign Up with Facebook": "Criar Conta com o Facebook",
  "Sign Up with Google": "Criar Conta com o Google",
  "Sign Up": "Criar Conta",
  "User already exists": "Usuário já existe",
  "User does not exist": "Usuário não existe",
  "Username cannot be empty": "Nome de usuário não pode estar vazio",
  "Your passwords must match": "Suas senhas devem ser iguais"
};
var Ml = {
  "Account recovery requires verified contact information": "账户恢复需要验证过的联系方式",
  "Authenticator App (TOTP)": "Authenticator 应用程序（TOTP）",
  "Back to Sign In": "回到登录",
  "Change Password": "更改密码",
  Changing: "正在修改",
  Code: "确认码",
  "Confirm Email Code": "确认电子邮件代码",
  "Confirm Password": "确认密码",
  "Confirm Sign Up": "确认注册",
  "Confirm SMS Code": "确认短信验证码",
  "Confirm TOTP Code": "确认 TOTP 代码",
  Confirm: "确认",
  "Confirmation Code": "确认码",
  Confirming: "正在确认",
  "Create a new account": "创建新账户",
  "Create Account": "创建账户",
  "Creating Account": "正在创建账户",
  "Dismiss alert": "关闭警报",
  Email: "邮箱",
  "Email Message": "电子邮件消息",
  "Enter your code": "输入验证码",
  "Enter your Email": "输入电子邮件",
  "Enter your Password": "输入密码",
  "Enter your phone number": "输入电话号码",
  "Enter your username": "输入用户名",
  "Forgot your password?": "忘记密码了？",
  "Hide password": "隐藏密码",
  "It may take a minute to arrive": "可能需要一分钟才能到达",
  Loading: "正在加载",
  "Multi-Factor Authentication": "多重身份验证",
  "Multi-Factor Authentication Setup": "多重身份验证设置",
  "New password": "新密码",
  or: "或者",
  Password: "密码",
  "Phone Number": "电话",
  "Please confirm your Password": "请再次输入密码",
  "Resend Code": "重发验证码",
  "Reset your password": "重置密码",
  "Reset your Password": "重置密码",
  "Select MFA Type": "选择 MFA 类型",
  "Send Code": "发送确认码",
  "Send code": "发送验证码",
  Sending: "正在发送",
  "Setup Email": "设置电子邮件",
  "Setup TOTP": "设置 TOTP",
  "Show password": "显示密码",
  "Sign in to your account": "登录账户",
  "Sign In with Amazon": "通过 Amazon 登录",
  "Sign In with Apple": "通过 Apple 登录",
  "Sign In with Facebook": "通过 Facebook 登录",
  "Sign In with Google": "通过 Google 登录",
  "Sign in": "登录",
  "Sign In": "登录",
  "Signing in": "正在登录",
  Skip: "跳过",
  Submit: "提交",
  Submitting: "正在提交",
  "Text Message (SMS)": "短信（SMS）",
  Username: "用户名",
  "Verify Contact": "验证联系方式",
  Verify: "验证",
  "We Emailed You": "我们给您发送了电子邮件",
  "We Sent A Code": "我们发送了代码",
  "We Texted You": "我们给您发送了短信",
  "Your code is on the way. To log in, enter the code we emailed to": "您的代码正在发送中。要登录，请输入我们通过电子邮件发送给以下人员的代码：",
  "Your code is on the way. To log in, enter the code we sent you": "您的代码正在发送中。要登录，请输入我们发送给您的代码",
  "Your code is on the way. To log in, enter the code we texted to": "您的代码正在发送中。要登录，请输入我们通过短信发送给以下人员的代码：",
  // Additional translations provided by customers
  "Confirm a Code": "确认码",
  "Confirm Sign In": "确认登录",
  "Forgot Password": "忘记密码",
  "Incorrect username or password": "用户名或密码错误",
  "Invalid password format": "密码格式错误",
  "Invalid phone number format": "电话格式错误，请使用格式 +12345678900",
  "New Password": "新密码",
  "Resend a Code": "重发确认码",
  "Sign Out": "退出",
  "Sign Up": "注册",
  "User already exists": "用户已经存在",
  "User does not exist": "用户不存在"
};
var Nl = {
  "Account recovery requires verified contact information": "För att återställa kontot behöver du ett verifierat konto",
  "Authenticator App (TOTP)": "Autentiseringsapp (TOTP)",
  "Back to Sign In": "Tillbaka till inloggningen",
  "Change Password": "Byt lösenord",
  Changing: "Ändra",
  Code: "Kod",
  "Confirm Email Code": "Bekräfta e-postkod",
  "Confirm Password": "Bekräfta lösenord",
  "Confirm Sign Up": "Bekräfta registrering",
  "Confirm SMS Code": "Bekräfta SMS-kod",
  "Confirm TOTP Code": "Bekräfta TOTP-kod",
  Confirm: "Bekräfta",
  "Confirmation Code": "Verifikationskod",
  Confirming: "Bekräftar",
  "Create a new account": "Skapa ett nytt konto",
  "Create Account": "Skapa konto",
  "Creating Account": "Skapar konto",
  "Dismiss alert": "Avvisa varning",
  Email: "E-post",
  "Email Message": "E-postmeddelande",
  "Enter your code": "Skriv din kod",
  "Enter your Email": "Ange din e-post",
  "Enter your phone number": "Ange ditt telefonnummer",
  "Enter your username": "Ange ditt användarnamn",
  "Forgot your password?": "Glömt ditt lösenord? ",
  "Hide password": "Dölj lösenord",
  "It may take a minute to arrive": "Det kan ta en minut att komma fram",
  Loading: "Laddar",
  "Multi-Factor Authentication": "Multifaktorautentisering",
  "Multi-Factor Authentication Setup": "Konfigurering av multifaktorautentisering",
  "New password": "Nytt lösenord",
  or: "eller",
  Password: "Lösenord",
  "Phone Number": "Telefonnummer",
  "Resend Code": "Skicka koden igen",
  "Reset your password": "Återställ ditt lösenord",
  "Reset your Password": "Återställ ditt lösenord",
  "Select MFA Type": "Välj MFA-typ",
  "Send code": "Skicka kod",
  "Send Code": "Skicka kod",
  Sending: "Skickar",
  "Setup Email": "Konfigurera e-post",
  "Setup TOTP": "Konfigurera TOTP",
  "Show password": "Visa lösenord",
  "Sign in to your account": "Logga in till ditt konto",
  "Sign In with Amazon": "Logga in med Amazon",
  "Sign In with Apple": "Logga in med Apple",
  "Sign In with Facebook": "Logga in med Facebook",
  "Sign In with Google": "Logga in med Google",
  "Sign in": "Logga in",
  "Sign In": "Logga in",
  "Signing in": "Loggar in",
  Skip: "Hoppa över",
  Submit: "Skicka",
  Submitting: "Skickar in",
  "Text Message (SMS)": "Textmeddelande (SMS)",
  Username: "Användarnamn",
  "Verify Contact": "Verifiera kontakt",
  Verify: "Verifiera",
  "We Sent A Code": "Vi skickade en kod",
  "We Texted You": "Vi sms:ade dig",
  "Your code is on the way. To log in, enter the code we emailed to": "Din kod är på väg. För att logga in, ange koden vi mejlade till",
  "Your code is on the way. To log in, enter the code we sent you": "Din kod är på väg. För att logga in, ange koden vi skickade till dig",
  "Your code is on the way. To log in, enter the code we texted to": "Din kod är på väg. För att logga in, ange koden vi sms:ade till",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Det finns redan ett konto med denna e-postadress",
  "Confirm a Code": "Bekräfta koden",
  "Confirm Sign In": "Bekräfta inloggning",
  "Create account": "Skapa konto",
  "Enter your Password": "Ange ditt lösenord",
  "Forgot Password?": "Glömt lösenord?",
  "Have an account? ": "Redan registrerad? ",
  "Incorrect username or password": "Felaktigt användarnamn eller lösenord",
  "Invalid password format": "Ogiltigt lösenordsformat",
  "Invalid phone number format": "Ogiltigt format för telefonnummer",
  "Lost your code? ": "Förlorat koden? ",
  "New Password": "Nytt lösenord",
  "No account? ": "Inget konto? ",
  "Password attempts exceeded": "Maximalt antal felaktiga inloggningsförsök har uppnåtts",
  "Reset Password": "Återställ lösenord",
  "Sign Out": "Logga ut",
  "Sign Up": "Registrering",
  "User already exists": "Användaren finns redan",
  "User does not exist": "Användaren finns inte",
  "Username cannot be empty": "Användarnamnet kan inte vara tomt",
  "We Emailed You": "Vi har skickat e-post till dig",
  "Please confirm your Password": "Bekräfta ditt lösenord"
};
var Ul = {
  "Account recovery requires verified contact information": "Pemulihan akun memerlukan informasi kontak terverifikasi",
  "Authenticator App (TOTP)": "Aplikasi Pengauntentikasi (TOTP)",
  "Back to Sign In": "Kembali ke Masuk",
  "Change Password": "Ubah kata sandi",
  Changing: "Mengubah",
  Code: "Kode",
  "Confirm Email Code": "Konfirmasi Kode Email",
  "Confirm Password": "Konfirmasi kata sandi",
  "Confirm Sign Up": "Konfirmasi Pendaftaran",
  "Confirm SMS Code": "Konfirmasi Kode SMS",
  "Confirm TOTP Code": "Konfirmasi Kode TOTP",
  Confirm: "Konfirmasi",
  "Confirmation Code": "Kode Konfirmasi",
  Confirming: "Mengkonfirmasi",
  "Create a new account": "Buat akun baru",
  "Create Account": "Buat Akun",
  "Creating Account": "Membuat Akun",
  "Dismiss alert": "Hentikan pemberitahuan",
  Email: "Email",
  "Email Message": "Pesan Email",
  "Enter your code": "Masukkan kode anda",
  "Enter your Email": "Masukkan email anda",
  "Enter your phone number": "Masukkan nomor telepon anda",
  "Enter your username": "Masukkan nama akun anda",
  "Forgot your password?": "Lupa kata sandi? ",
  "Hide password": "Sembunyikan kata sandi",
  "It may take a minute to arrive": "Mungkin perlu waktu satu menit untuk tiba",
  Loading: "Memuat",
  "Multi-Factor Authentication": "Autentikasi Multifaktor",
  "Multi-Factor Authentication Setup": "Pengaturan Autentikasi Multifaktor",
  "New password": "Kata sandi baru",
  or: "atau",
  Password: "Kata sandi",
  "Phone Number": "Nomor telepon",
  "Resend Code": "Kirim ulang kodenya",
  "Reset your Password": "Reset Kata Sandi",
  "Reset your password": "Ubah kata sandi anda",
  "Select MFA Type": "Pilih tipe MFA",
  "Send code": "Kirim kode",
  "Send Code": "Kirim Kode",
  Sending: "Mengirim",
  "Setup Email": "Atur Email",
  "Setup TOTP": "Siapkan TOTP",
  "Show password": "Tampilkan kata sandi",
  "Sign in to your account": "Masuk akun anda",
  "Sign In with Amazon": "Masuk dengan Amazon",
  "Sign In with Apple": "Masuk dengan Apple",
  "Sign In with Facebook": "Masuk dengan Facebook",
  "Sign In with Google": "Masuk dengan Google",
  "Sign in": "Masuk",
  "Sign In": "Masuk",
  "Signing in": "Memasuki",
  Skip: "Lewati",
  Submit: "Ajukan",
  Submitting: "Mengajukan",
  "Text Message (SMS)": "Pesan Teks (SMS)",
  Username: "Nama akun",
  "Verify Contact": "Verifikasi Kontak",
  Verify: "Verifikasi",
  "We Sent A Code": "Kami Mengirim Kode",
  "We Texted You": "Kami mengirim SMS kepada Anda",
  "Your code is on the way. To log in, enter the code we sent you": "Kode Anda segera hadir. Untuk masuk, masukkan kode yang kami kirimkan kepada Anda",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Akun dengan email tersebut sudah terdaftar.",
  "Attempt limit exceeded, please try after some time.": "Batas percobaan terlampaui, mohon coba lagi setelah beberapa waktu.",
  "Cannot reset password for the user as there is no registered/verified email or phone_number": "Tidak dapat mengatur ulang kata sandi karena tidak ada email terdaftar / terverifikasi atau nomor telepon",
  Change: "Ubah",
  "Confirm a Code": "Konfirmasi kode",
  "Create account": "Buat akun",
  "Enter your password": "Masukkan kata sandi anda",
  "Forgot Password": "Lupa kata sandi",
  "Have an account? ": "Sudah punya akun? ",
  Hello: "Halo",
  "Incorrect username or password.": "Nama akun atau kata sandi salah.",
  "Invalid phone number format": "Nomor telepon tidak sesuai dengan format.",
  "Invalid verification code provided, please try again.": "Kode verifikasi tidak sesuai, mohon coba lagi.",
  "It may take a minute to arrive.": "Mungkin perlu beberapa waktu untuk tiba.",
  "Lost your code? ": "Kode anda hilang?",
  Name: "Nama",
  "Network error": "Galat jaringan",
  "No account? ": "Tidak ada akun?",
  "Password did not conform with policy: Password not long enough": "Kata sandi tidak sesuai dengan aturan: Kata sandi kurang panjang",
  "Resend a Code": "Renvoyer un code",
  "Reset password": "Ubah kata sandi anda",
  Send: "Kirim",
  "Sign In with AWS": "Masuk dengan AWS",
  "Sign Up with Amazon": "Daftar dengan Amazon",
  "Sign Up with AWS": "Daftar dengan AWS",
  "Sign Up with Facebook": "Daftar dengan Facebook",
  "Sign Up with Google": "Daftar dengan Google",
  SMS: "SMS",
  "User already exists": "Akun sudah terdaftar",
  "User does not exist.": "Akun tidak terdaftar.",
  "User is disabled.": "Akun dinonaktifkan.",
  "Username cannot be empty": "Nama akun tidak boleh kosong",
  "Username/client id combination not found.": "Nama akun atau id tidak ditemukan.",
  "We Emailed You": "Kami mengirimkanmu email",
  "Your code is on the way. To log in, enter the code we emailed to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami emailkan ke",
  "Your code is on the way. To log in, enter the code we texted to": "Kode anda dalam pengiriman. Untuk masuk, masukkan kode yang kami tuliskan ke",
  "Your passwords must match": "Kata sandi harus sama"
};
var Fl = {
  "Account recovery requires verified contact information": "Hesap kurtarma, doğrulanmış iletişim bilgilerini gerektirir",
  "Authenticator App (TOTP)": "Kimlik Doğrulayıcı Uygulaması (TOTP)",
  "Add your Profile": "Profilinizi ekleyin",
  "Add your Website": "Web sitenizi ekleyin",
  "Back to Sign In": "Oturum Açmaya Geri Dön",
  "Change Password": "Şifreyi Değiştir",
  Changing: "Değiştiriliyor",
  Code: "Kod",
  "Confirm Email Code": "E-posta Kodunu Onayla",
  "Confirm Password": "Şifreyi Doğrula",
  "Confirm Sign Up": "Kayıt İşlemini Doğrula",
  "Confirm SMS Code": "SMS Kodunu Doğrula",
  "Confirm MFA Code": "Çoklu Faktörlü Doğrulama Kodunu Doğrula",
  "Confirm TOTP Code": "Tek Kullanımlık Şifreyi Doğrula",
  Confirm: "Doğrula",
  "Confirmation Code": "Doğrulama Kodu",
  Confirming: "Doğrulanıyor",
  "Create a new account": "Yeni bir hesap oluştur",
  "Create Account": "Hesap Oluştur",
  "Creating Account": "Hesap Oluşturuluyor",
  "Dismiss alert": "Uyarıyı reddet",
  Email: "E-posta",
  "Email Message": "E-posta Mesajı",
  "Enter your Birthdate": "Doğum gününüzü girin",
  "Enter your code": "Kodu girin",
  "Enter your Confirmation Code": "Doğrulama Kodunuzu Girin",
  "Enter your Email": "E-posta adresinizi girin",
  "Enter your email": "E-posta adresinizi girin",
  "Enter your Family Name": "Ad Soyadınızı girin",
  "Enter your Given Name": "Adınızı girin",
  "Enter your Middle Name": "Soyadınızı girin",
  "Enter your Name": "Adınızı girin",
  "Enter your Nickname": "Takma adınızı girin",
  "Enter your Password": "Şifrenizi girin",
  "Enter your phone number": "Telefon numaranızı girin",
  "Enter your Preferred Username": "Tercih ettiğiniz kullanıcı adınızı girin",
  "Enter your username": "Kullanıcı adınızı girin",
  "Forgot Password?": "Şifrenizi Mi Unuttunuz?",
  "Forgot password?": "Şifrenizi mi unuttunuz?",
  "Forgot your password?": "Şifrenizi mi unuttunuz?",
  "Hide password": "Şifreyi gizle",
  "It may take a minute to arrive": "Kodun gelmesi bir dakika sürebilir",
  Loading: "Yükleniyor",
  "Multi-Factor Authentication": "Çok Faktörlü Kimlik Doğrulama",
  "Multi-Factor Authentication Setup": "Çok Faktörlü Kimlik Doğrulama Kurulumu",
  "New password": "Yeni şifre",
  or: "veya",
  Password: "Şifre",
  "Phone Number": "Telefon Numarası",
  "Please confirm your Password": "Lütfen şifrenizi doğrulayın",
  "Resend Code": "Kodu Yeniden Gönder",
  "Reset your password": "Şifrenizi sıfırlayın",
  "Reset your Password": "Şifrenizi Sıfırlayın",
  "Reset Password": "Şifreyi Sıfırla",
  "Select MFA Type": "MFA türünü seçin",
  "Send code": "Kod gönder",
  "Send Code": "Kod Gönder",
  Sending: "Gönderiliyor",
  "Setup Email": "E-postayı ayarla",
  "Setup TOTP": "Tek kullanımlık şifre kurulumu yap",
  "Show password": "Şifreyi göster",
  "Sign in to your account": "Hesabınızda oturum açın",
  "Sign In with Amazon": "Amazon ile Oturum Aç",
  "Sign In with Apple": "Apple ile Oturum Aç",
  "Sign In with Facebook": "Facebook ile Oturum Aç",
  "Sign In with Google": "Google ile Oturum Aç",
  "Sign in": "Oturum aç",
  "Sign In": "Oturum Aç",
  "Sign Up with Facebook": "Facebook ile Kayıt Ol",
  "Sign Up with Google": "Google ile Kayıt Ol",
  "Signing in": "Oturum açılıyor",
  Skip: "Atla",
  Submit: "Gönder",
  Submitting: "Gönderiliyor",
  "Text Message (SMS)": "Kısa Mesaj (SMS)",
  Username: "Kullanıcı adı",
  "Verify Contact": "Kişiyi Doğrula",
  Verify: "Doğrula",
  "We Emailed You": "Size E-posta Gönderdik",
  "We Sent A Code": "Bir Kod Gönderdik",
  "We Texted You": "Size Mesaj Gönderdik",
  "Your code is on the way. To log in, enter the code we emailed to": "Kodunuz yolda. Oturum açmak için, gönderdiğimiz e-postadaki kodu girin",
  "Your code is on the way. To log in, enter the code we sent you": "Kodunuz yolda. Oturum açmak için, size gönderdiğimiz kodu girin",
  "Your code is on the way. To log in, enter the code we texted to": "Kodunuz yolda. Oturum açmak için, gönderdiğimiz mesajdaki kodu girin",
  // Additional translations provided by customers
  "An account with the given email already exists.": "Bu e-postaya ait zaten bir hesap var.",
  "Confirm Sign In": "Oturum Açmayı Doğrula",
  "Have an account? ": "Hesabınız var mı? ",
  "Incorrect username or password": "Yanlış kullanıcı adı ya da şifre",
  "Invalid password format": "Geçersiz parola formatı",
  "Invalid phone number format": "Geçersiz telefon numarası formatı",
  "Lost your code? ": "Kodu mu kaybettiniz? ",
  "No account? ": "Hesabınız yok mu? ",
  "Password attempts exceeded": "Maksimum oturum açma girişimi aşıldı",
  "Sign Out": "Çıkış yap",
  "Sign Up": "Kayıt Ol",
  "User already exists": "Bu kullanıcı zaten var",
  "User does not exist": "Böyle bir kullanıcı mevcut değil",
  "Username cannot be empty": "Kullanıcı adı boş olamaz"
};
var Ol = {
  "Account recovery requires verified contact information": "Восстановление учетной записи требует проверки контактной информации",
  "Authenticator App (TOTP)": "Приложение для аутентификации (TOTP)",
  "Back to Sign In": "Назад, чтобы войти",
  "Change Password": "изменять пароль",
  Changing: "Изменение",
  Code: "Код",
  "Confirm Email Code": "Подтвердите код электронной почты",
  "Confirm Password": "Подтверждение пароля",
  "Confirm Sign Up": "Подтверждение зарегистрироваться",
  "Confirm SMS Code": "Подтверждение CMC-Код",
  "Confirm TOTP Code": "Подтверждение TOTP-Код",
  Confirm: "Подтверждать",
  "Confirmation Code": "код подтверждения",
  Confirming: "подтверждение",
  "Create a new account": "Создавать новую учетную запись",
  "Create Account": "Создать учетную запись",
  "Creating Account": "создание учетная запись",
  "Dismiss alert": "Закрыть оповещение",
  Email: "электронная почта",
  "Email Message": "Сообщение по электронной почте",
  "Enter your code": "ввести ваш Код",
  "Enter your Email": "ввести ваш электронная почта",
  "Enter your phone number": "ввести ваш номер телефона",
  "Enter your username": "ввести ваш имя пользователя",
  "Forgot your password?": "Забыли ваш пароль?",
  "Hide password": "Скрывать пароль",
  "It may take a minute to arrive": "Доставка может занять некоторое время",
  Loading: "Загрузка",
  "Multi-Factor Authentication": "Многофакторная аутентификация",
  "Multi-Factor Authentication Setup": "Настройка многофакторной аутентификации",
  "New password": "Новый пароль",
  or: "или",
  Password: "Пароль",
  "Phone Number": "Номер телефона",
  "Resend Code": "Отправь еще раз Код",
  "Reset your password": "сброс ваш пароль",
  "Reset your Password": "сброс ваш Пароль",
  "Select MFA Type": "Выберите тип МФА",
  "Send code": "Отправлять Код",
  "Send Code": "Отправлять Код",
  Sending: "отправка",
  "Setup Email": "Настроить электронную почту",
  "Setup TOTP": "Настраивать TOTP",
  "Show password": "Показывать пароль",
  "Sign in to your account": "знак в свой аккаунт",
  "Sign In with Amazon": "знак в с Amazon",
  "Sign In with Apple": "знак в с Apple",
  "Sign In with Facebook": "знак в с Facebook",
  "Sign In with Google": "знак в с Google",
  "Sign in": "знак в",
  "Sign In": "знак в",
  "Signing in": "подписание в",
  Skip: "Пропускать",
  Submit: "Представлять на рассмотрение",
  Submitting: "Представив",
  "Text Message (SMS)": "Текстовое сообщение (SMS)",
  Username: "Имя пользователя",
  "Verify Contact": "Проверить контакт",
  Verify: "Проверить",
  "We Emailed You": "Мы отправили вам электронное письмо",
  "We Sent A Code": "Мы отправили код",
  "We Texted You": "Мы отправили вам текстовое сообщение",
  "Your code is on the way. To log in, enter the code we emailed to": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили по электронной почте",
  "Your code is on the way. To log in, enter the code we sent you": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы послали вам",
  "Your code is on the way. To log in, enter the code we texted to": "Ваш код отправлен. Чтобы войти в систему, введите код, который мы отправили текстовым сообщением"
};
var $l = {
  "Account recovery requires verified contact information": "שחזור לקוח דורש עוד מידע",
  "Authenticator App (TOTP)": "אפליקציית אימות (TOTP)",
  "Back to Sign In": "חזור להרשמה",
  "Change Password": "עדכון סיסמא",
  Changing: "מעדכן",
  Code: "קוד",
  "Confirm Email Code": "אמת קוד אימייל",
  "Confirm Password": "אשר סיסמא",
  "Confirm Sign Up": "אשר הרשמה",
  "Confirm SMS Code": "אשר sms קוד",
  "Confirm TOTP Code": "אשר totp קוד",
  Confirm: "אישור",
  "Confirmation Code": "אישור קוד",
  Confirming: "מאשר",
  "Create a new account": "צור משתמש חדש",
  "Create Account": "צור משתמש",
  "Creating Account": "יצירת משתמש",
  "Dismiss alert": "הסר התראה",
  Email: "אימייל",
  "Email Message": "הודעת אימייל",
  "Enter your code": "הכנס את הקוד",
  "Enter your Email": "הכנס את המייל שלך",
  "Enter your phone number": "הכנס את מספר הטלפון שלך",
  "Enter your username": "הכנס את שם המתמש שלך",
  "Forgot your password?": "שכחת סיסמא ?",
  "Hide password": "הסתר סיסמא",
  Loading: "טוען",
  "Multi-Factor Authentication": "אימות רב-גורמי",
  "Multi-Factor Authentication Setup": "הגדרת אימות רב-גורמי",
  "New password": "סיסמא חדשה",
  or: "אוֹ",
  Password: "סיסמא",
  "Phone Number": "מספר טלפון",
  "Resend Code": "שלח קוד שוב",
  "Reset your password": "אפס סיסמא",
  "Reset your Password": "אפס סיסמא",
  "Select MFA Type": "בחר סוג אימות רב-גורמי",
  "Send code": "שלח קוד",
  "Send Code": "שלח קוד",
  Sending: "שולח",
  "Setup Email": "הגדר אימייל",
  "Setup TOTP": "Setup TOTP",
  "Show password": "הצג סיסמא",
  "Sign in to your account": "התחבר לחשבון שלך",
  "Sign In with Amazon": "Sign In with Amazon",
  "Sign In with Apple": "Sign In with Apple",
  "Sign In with Facebook": "Sign In with Facebook",
  "Sign In with Google": "Sign In with Google",
  "Sign in": "התחבר",
  "Sign In": "התחבר",
  "Signing in": "מתחבר",
  Skip: "דלג",
  Submit: "שלח",
  Submitting: "שולח",
  "Text Message (SMS)": "הודעת טקסט (SMS)",
  Username: "שם משתמש",
  "Verify Contact": "אמת איש קשר",
  Verify: "אמת"
};
var Rl = {
  "Account recovery requires verified contact information": "Відновлення облікового запису потребує контактної інформації",
  "Authenticator App (TOTP)": "Додаток автентифікації (TOTP)",
  "Back to Sign In": "Назад на сторінку входу",
  "Change Password": "Змінити пароль",
  Changing: "Змінюємо",
  Code: "Код",
  "Confirm Email Code": "Підтвердити код електронної пошти",
  "Confirm Password": "Підтвердіть пароль",
  "Confirm Sign Up": "Підтвердіть реєстрацію",
  "Confirm SMS Code": "Підтвердіть SMS код",
  "Confirm TOTP Code": "Підтвердіть TOTP код",
  Confirm: "Підтвердити",
  "Confirmation Code": "Код підтвердження",
  Confirming: "Підтверджуємо",
  "Create a new account": "Зареєструватися",
  "Create Account": "Зареєструватися",
  "Creating Account": "Реєструємо",
  "Dismiss alert": "Відхилити сповіщення",
  Email: "Email",
  "Email Message": "Повідомлення електронної пошти",
  "Enter your code": "Введіть код",
  "Enter your Email": "Введіть ваш email",
  "Enter your phone number": "Введіть ваш номер телефону",
  "Enter your username": "Введіть ваше імʼя користувача",
  "Forgot password?": "Забули пароль?",
  "Forgot your password?": "Забули ваш пароль?",
  "Hide password": "Сховати пароль",
  "It may take a minute to arrive": "Доставка може тривати хвилину",
  Loading: "Загружаємо",
  "Multi-Factor Authentication": "Багатофакторна автентифікація",
  "Multi-Factor Authentication Setup": "Налаштування багатофакторної автентифікації",
  "New password": "Новий пароль",
  or: "або",
  Password: "Пароль",
  "Phone Number": "Номер Телефону",
  "Resend Code": "Відправити код повторно",
  "Reset your password": "Скинути пароль",
  "Reset your Password": "Скинути пароль",
  "Select MFA Type": "Виберіть тип MFA",
  "Send code": "Відправити код",
  "Send Code": "Відправити код",
  Sending: "Відправляємо",
  "Setup Email": "Налаштувати електронну пошту",
  "Setup TOTP": "Налаштувати TOTP",
  "Show password": "Показати пароль",
  "Sign in to your account": "Увійти у ваш обліковий запис",
  "Sign In with Amazon": "Увійти з Amazon",
  "Sign In with Apple": "Увійти з Apple",
  "Sign In with Facebook": "Увійти з Facebook",
  "Sign In with Google": "Увійти з Google",
  "Sign in": "Увійти",
  "Sign In": "Увійти",
  "Signing in": "Входимо",
  Skip: "Пропустити",
  Submit: "Відправити",
  Submitting: "Відправляємо",
  "Text Message (SMS)": "Текстове повідомлення (SMS)",
  Username: "Імʼя користувача",
  "Verify Contact": "Підтвердити Контакт",
  Verify: "Підтвердити",
  "We Emailed You": "Ми відправили вам Email",
  "We Sent A Code": "Ми відправили код",
  "We Texted You": "Ми відправили вам текстове повідомлення",
  "Your code is on the way. To log in, enter the code we emailed to": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам на Email",
  "Your code is on the way. To log in, enter the code we sent you": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми вам відправили",
  "Your code is on the way. To log in, enter the code we texted to": "Ваш код вже в дорозі. Щоб увійти, введіть код, що ми відправили вам текстовим повідомленням",
  // Additional translations
  "An account with the given email already exists.": "Обліковий запис з цим Email вже існує.",
  "Confirm a Code": "Підтвердіть код",
  "Confirm Sign In": "Підтвердіть вхід",
  "Forgot Password": "Забули пароль",
  "Incorrect username or password.": "Невірне імʼя користувача або пароль",
  "Invalid password format": "Невірний формат паролю",
  "Invalid phone number format": "Невірний формат номеру телефону",
  "Loading...": "Загружаємо...",
  "New Password": "Новий пароль",
  "Resend a Code": "Відправити код повторно",
  "Reset Password": "Скинути пароль",
  "Sign Out": "Вийти",
  "Sign Up with Amazon": "Зареєструватися з Amazon",
  "Sign Up with Apple": "Зареєструватися з Apple",
  "Sign Up with Facebook": "Зареєструватися з Facebook",
  "Sign Up with Google": "Зареєструватися з Google",
  "Sign Up": "Зареєструватися",
  "User already exists": "Користувач вже існує",
  "User does not exist": "Такий користувач не існує",
  "Username cannot be empty": "Імʼя користувача не може бути пустим",
  "Your passwords must match": "Паролі мають збігатися"
};
var xl = {
  "Account recovery requires verified contact information": "การกู้คืนบัญชีต้องมีข้อมูลติดต่อที่ได้รับการยืนยันแล้ว",
  "Add your Profile": "เพิ่มโปรไฟล์ของคุณ",
  "Add your Website": "เพิ่มเว็บไซต์ของคุณ",
  "Authenticator App (TOTP)": "แอปพลิเคชันยืนยันตัวตน (TOTP)",
  "Back to Sign In": "กลับไปที่การเข้าสู่ระบบ",
  "Change Password": "เปลี่ยนรหัสผ่าน",
  Changing: "กำลังเปลี่ยน",
  Code: "รหัส",
  "Confirm Email Code": "ยืนยันรหัสอีเมล",
  "Confirm Password": "ยืนยันรหัสผ่าน",
  "Please confirm your Password": "กรุณายืนยันรหัสผ่านของคุณ",
  "Confirm Sign Up": "ยืนยันการลงทะเบียน",
  "Confirm SMS Code": "ยืนยันรหัส SMS",
  "Confirm MFA Code": "ยืนยันรหัส MFA",
  "Confirm TOTP Code": "ยืนยันรหัส TOTP",
  Confirm: "ยืนยัน",
  "Confirmation Code": "รหัสยืนยัน",
  Confirming: "กำลังยืนยัน",
  "Create a new account": "สร้างบัญชีใหม่",
  "Create Account": "สร้างบัญชี",
  "Creating Account": "กำลังสร้างบัญชี",
  "Dismiss alert": "ปิดการแจ้งเตือน",
  Email: "อีเมล",
  "Email Message": "ข้อความอีเมล",
  "Enter your Birthdate": "กรอกวันเกิดของคุณ",
  "Enter your code": "กรอกรหัสของคุณ",
  "Enter your Confirmation Code": "กรอกรหัสยืนยันของคุณ",
  "Enter your Email": "กรอกอีเมลของคุณ",
  "Enter your Family Name": "กรอกนามสกุลของคุณ",
  "Enter your Given Name": "กรอกชื่อของคุณ",
  "Enter your Middle Name": "กรอกชื่อกลางของคุณ",
  "Enter your Name": "กรอกชื่อของคุณ",
  "Enter your Nickname": "กรอกชื่อเล่นของคุณ",
  "Enter your Password": "กรอกรหัสผ่านของคุณ",
  "Enter your email": "กรอกอีเมลของคุณ",
  "Enter your phone number": "กรอกหมายเลขโทรศัพท์ของคุณ",
  "Enter your Preferred Username": "กรอกชื่อผู้ใช้ที่ต้องการ",
  "Enter your username": "กรอกชื่อผู้ใช้ของคุณ",
  "Forgot password?": "ลืมรหัสผ่าน?",
  "Forgot your password?": "ลืมรหัสผ่านใช่หรือไม่?",
  "Hide password": "ซ่อนรหัสผ่าน",
  "It may take a minute to arrive": "อาจใช้เวลาสักครู่",
  Loading: "กำลังโหลด",
  "Multi-Factor Authentication": "การยืนยันตัวตนหลายขั้นตอน",
  "Multi-Factor Authentication Setup": "ตั้งค่าการยืนยันตัวตนแบบหลายขั้นตอน",
  "New password": "รหัสผ่านใหม่",
  or: "หรือ",
  Password: "รหัสผ่าน",
  "Phone Number": "หมายเลขโทรศัพท์",
  "Resend Code": "ส่งรหัสอีกครั้ง",
  "Reset your Password": "รีเซ็ตรหัสผ่านของคุณ",
  "Reset your password": "รีเซ็ตรหัสผ่านของคุณ",
  "Select MFA Type": "เลือกประเภท MFA",
  "Send code": "ส่งรหัส",
  "Send Code": "ส่งรหัส",
  Sending: "กำลังส่ง",
  "Setup Email": "ตั้งค่าอีเมล",
  "Setup TOTP": "ตั้งค่า TOTP",
  "Show password": "แสดงรหัสผ่าน",
  "Sign in to your account": "เข้าสู่ระบบบัญชีของคุณ",
  "Sign In with Amazon": "เข้าสู่ระบบด้วย Amazon",
  "Sign In with Apple": "เข้าสู่ระบบด้วย Apple",
  "Sign In with Facebook": "เข้าสู่ระบบด้วย Facebook",
  "Sign In with Google": "เข้าสู่ระบบด้วย Google",
  "Sign in": "เข้าสู่ระบบ",
  "Sign In": "เข้าสู่ระบบ",
  "Signing in": "กำลังเข้าสู่ระบบ",
  Skip: "ข้าม",
  Submit: "ส่ง",
  Submitting: "กำลังส่ง",
  "Text Message (SMS)": "ข้อความตัวอักษร (SMS)",
  Username: "ชื่อผู้ใช้",
  "Verify Contact": "ยืนยันการติดต่อ",
  Verify: "ยืนยัน",
  "We Emailed You": "เราได้ส่งอีเมลถึงคุณแล้ว",
  "We Sent A Code": "เราได้ส่งรหัสแล้ว",
  "We Texted You": "เราได้ส่ง SMS ถึงคุณแล้ว",
  "Your code is on the way. To log in, enter the code we emailed to": "รหัสของคุณกำลังมา เพื่อเข้าสู่ระบบ กรุณากรอกรหัสที่เราส่งไปยังอีเมล",
  "Your code is on the way. To log in, enter the code we sent you": "รหัสของคุณกำลังมา เพื่อเข้าสู่ระบบ กรุณากรอกรหัสที่เราส่งให้คุณ",
  "Your code is on the way. To log in, enter the code we texted to": "รหัสของคุณกำลังมา เพื่อเข้าสู่ระบบ กรุณากรอกรหัสที่เราส่งไปยัง SMS",
  // Additional translations
  "An account with the given email already exists.": "บัญชีที่ใช้อีเมลนี้มีอยู่แล้ว",
  "Confirm a Code": "ยืนยันรหัส",
  "Confirm Sign In": "ยืนยันการเข้าสู่ระบบ",
  "Create account": "สร้างบัญชี",
  "Sign Up with Facebook": "ลงทะเบียนด้วย Facebook",
  "Sign Up with Google": "ลงทะเบียนด้วย Google",
  "Sign Up with Apple": "ลงทะเบียนด้วย Apple",
  "Sign Up with Line": "ลงทะเบียนด้วย Line",
  "Forgot Password": "ลืมรหัสผ่าน",
  "Have an account? ": "มีบัญชีอยู่แล้ว? ",
  "Incorrect username or password": "ชื่อผู้ใช้หรือรหัสผ่านไม่ถูกต้อง",
  "Invalid password format": "รูปแบบรหัสผ่านไม่ถูกต้อง",
  "It may take a minute to arrive.": "อาจใช้เวลาสักครู่ในการมาถึง",
  "Lost your code? ": "หารหัสไม่เจอ? ",
  "New Password": "รหัสผ่านใหม่",
  "No account? ": "ไม่มีบัญชี? ",
  "Password attempts exceeded": "เกินจำนวนครั้งที่อนุญาตให้ใส่รหัสผ่าน",
  "Reset password": "รีเซ็ตรหัสผ่าน",
  "Reset Password": "รีเซ็ตรหัสผ่าน",
  "Sign Out": "ออกจากระบบ",
  "Sign Up": "ลงทะเบียน",
  "User already exists": "ผู้ใช้นี้มีอยู่แล้ว",
  "User does not exist": "ไม่มีผู้ใช้นี้",
  "Username cannot be empty": "ต้องใส่ชื่อผู้ใช้งาน"
};
var Dl = {
  ADD_PROFILE: "Add your Profile",
  ADD_WEBSITE: "Add your Website",
  BACK_SIGN_IN: "Back to Sign In",
  BIRTHDATE: "Birthdate",
  CHANGE_PASSWORD: "Change Password",
  CHANGING_PASSWORD: "Changing",
  CODE: "Code",
  CODE_ARRIVAL: "It may take a minute to arrive",
  CODE_EMAILED: "Your code is on the way. To log in, enter the code we emailed to",
  CODE_SENT: "Your code is on the way. To log in, enter the code we sent you",
  CODE_TEXTED: "Your code is on the way. To log in, enter the code we texted to",
  CONFIRM_PASSWORD: "Confirm Password",
  CONFIRM_PASSWORD_PLACEHOLDER: "Please confirm your Password",
  CONFIRM_RESET_PASSWORD_HEADING: "Reset your Password",
  CONFIRM_SIGNUP_HEADING: "Confirm Sign Up",
  CONFIRM_SMS: "Confirm SMS Code",
  CONFIRM_EMAIL: "Confirm Email Code",
  // If challenge name is not returned
  CONFIRM_MFA_DEFAULT: "Confirm MFA Code",
  CONFIRM_TOTP: "Confirm TOTP Code",
  CONFIRM: "Confirm",
  CONFIRMATION_CODE: "Confirmation Code",
  CONFIRMING: "Confirming",
  CREATE_ACCOUNT: "Create Account",
  CREATING_ACCOUNT: "Creating Account",
  EMAIL_ADDRESS: "Email",
  EMAIL_OTP: "Email Message",
  ENTER_BIRTHDATE: "Enter your Birthdate",
  ENTER_CODE: "Enter your code",
  ENTER_CONFIRMATION_CODE: "Enter your Confirmation Code",
  ENTER_EMAIL: "Enter your Email",
  ENTER_FAMILY_NAME: "Enter your Family Name",
  ENTER_GIVEN_NAME: "Enter your Given Name",
  ENTER_MIDDLE_NAME: "Enter your Middle Name",
  ENTER_NAME: "Enter your Name",
  ENTER_NICK_NAME: "Enter your Nickname",
  ENTER_PASSWORD: "Enter your Password",
  ENTER_PHONE_NUMBER: "Enter your Phone Number",
  ENTER_PREFERRED_USERNAME: "Enter your Preferred Username",
  ENTER_USERNAME: "Enter your username",
  FAMILY_NAME: "Family Name",
  GIVEN_NAME: "Given Name",
  FORGOT_PASSWORD: "Forgot Password?",
  FORGOT_YOUR_PASSWORD: "Forgot your password?",
  HIDE_PASSWORD: "Hide password",
  LOADING: "Loading",
  LOGIN_NAME: "Username",
  MIDDLE_NAME: "Middle Name",
  MFA_SETUP_SELECTION: "Multi-Factor Authentication Setup",
  MFA_SELECTION: "Multi-Factor Authentication",
  NAME: "Name",
  NICKNAME: "Nickname",
  NEW_PASSWORD: "New password",
  OR: "or",
  PASSWORD: "Password",
  PHONE_NUMBER: "Phone Number",
  PREFERRED_USERNAME: "Preferred Username",
  PROFILE: "Profile",
  RESEND_CODE: "Resend Code",
  RESET_PASSWORD_HEADING: "Reset your password",
  RESET_PASSWORD: "Reset Password",
  SEND_CODE: "Send code",
  SENDING: "Sending",
  SELECT_MFA_TYPE: "Select MFA Type",
  SETUP_EMAIL: "Setup Email",
  SETUP_TOTP: "Setup TOTP",
  SHOW_PASSWORD: "Show password",
  SIGN_IN_BUTTON: "Sign in",
  SIGN_IN_TAB: "Sign In",
  SIGN_IN_WITH_AMAZON: "Sign In with Amazon",
  SIGN_IN_WITH_APPLE: "Sign In with Apple",
  SIGN_IN_WITH_FACEBOOK: "Sign In with Facebook",
  SIGN_IN_WITH_GOOGLE: "Sign In with Google",
  SIGN_IN: "Sign in to your account",
  SIGN_UP_BUTTON: "Create a new account",
  SIGNING_IN_BUTTON: "Signing in",
  SKIP: "Skip",
  SMS_MFA: "Text Message (SMS)",
  SUBMIT: "Submit",
  SUBMITTING: "Submitting",
  SOFTWARE_TOKEN_MFA: "Authenticator App (TOTP)",
  UPPERCASE_COPY: "COPY",
  VERIFY_CONTACT: "Verify Contact",
  VERIFY_HEADING: "Account recovery requires verified contact information",
  VERIFY: "Verify",
  WE_EMAILED: "We Emailed You",
  WE_SENT_CODE: "We Sent A Code",
  WE_TEXTED: "We Texted You",
  WEBSITE: "Website"
};
var Ll = { ..._l };
var Bl = {
  ...Sl
};
var zl = { ...wl };
var Gl = { ...bl };
var Wl = { ...Cl };
var Vl = { ...Al };
var yo = { ...El };
var jl = { ...Tl };
var Hl = { ...Il };
var Kl = { ...Pl };
var Yl = { ...kl };
var ql = { ...Ml };
var Jl = { ...Nl };
var Zl = { ...Ul };
var Ql = { ...Fl };
var Xl = { ...Ol };
var ec = { ...$l };
var tc = { ...Rl };
var nc = { ...xl };
var fn = {
  ...Dl
  // new module related default texts goes here
};
var V = { ...fn };
function F(e) {
  return I18n2.get(e);
}
var rA = {
  de: Ll,
  en: Bl,
  es: zl,
  fr: Gl,
  id: Zl,
  it: Wl,
  ja: Vl,
  // TODO: remove kr in next major release
  kr: yo,
  ko: yo,
  nb: jl,
  nl: Hl,
  pl: Kl,
  pt: Yl,
  zh: ql,
  sv: Jl,
  tr: Ql,
  ru: Xl,
  he: ec,
  ua: tc,
  th: nc
};
var Fr = (e) => {
  var r;
  const t = (r = e == null ? void 0 : e.context.config) == null ? void 0 : r.loginMechanisms, [n] = t ?? ["username"];
  return n;
};
var rc = (e) => {
  const t = { ...e };
  for (const [n, r] of Object.entries(e)) {
    const { label: o, placeholder: i } = r;
    t[n] = {
      ...r,
      label: o ? F(o) : void 0,
      placeholder: i ? F(i) : void 0
    };
  }
  return t;
};
var oc = (e) => Object.entries(e).sort((t, n) => {
  const r = t[1].order || Number.MAX_VALUE, o = n[1].order || Number.MAX_VALUE;
  return r - o;
}).filter((t) => t[1] !== void 0);
var ic = "+1";
var We = (e) => {
  let t = zt[e];
  const { type: n } = t;
  return n === "tel" && (t = { ...t, dialCode: ic }), t;
};
var Nn = (e) => {
  const t = Fr(e);
  return {
    ...We(t),
    autocomplete: "username"
  };
};
var pn = (e) => ({
  confirmation_code: {
    ...We("confirmation_code"),
    label: "Code *",
    placeholder: "Code"
  }
});
var ac = (e) => ({
  username: { ...Nn(e) },
  password: {
    ...We("password"),
    autocomplete: "current-password"
  }
});
var sc = (e) => {
  const { loginMechanisms: t, signUpAttributes: n } = e.context.config, r = Fr(e), o = Array.from(/* @__PURE__ */ new Set([
    ...t,
    "password",
    "confirm_password",
    ...n
  ])), i = {};
  for (const a of o)
    if (Ii(a)) {
      const s = a === r ? Nn(e) : We(a);
      i[a] = { ...s };
    } else
      console.debug(`Authenticator does not have a default implementation for ${a}. Customize SignUp FormFields to add your own.`);
  return i;
};
var lc = (e) => ({
  confirmation_code: {
    ...We("confirmation_code"),
    placeholder: "Enter your code"
  }
});
var cc = (e) => {
  const t = Fr(e), { label: n } = zt[t];
  return {
    username: {
      ...Nn(e),
      label: `Enter your ${n.toLowerCase()}`,
      placeholder: `Enter your ${n.toLowerCase()}`
    }
  };
};
var uc = (e) => ({
  ...pn(),
  password: {
    ...We("password"),
    label: "New Password",
    placeholder: "New Password"
  },
  confirm_password: {
    ...We("confirm_password"),
    label: "Confirm Password",
    placeholder: "Confirm Password"
  }
});
var dc = (e) => {
  const t = Nr(e), { missingAttributes: n } = t.context, r = Array.from(/* @__PURE__ */ new Set([
    "password",
    "confirm_password",
    ...n ?? []
  ])), o = {};
  for (const i of r)
    Ii(i) ? o[i] = { ...We(i) } : console.debug(`Authenticator does not have a default implementation for ${i}. Customize ForceNewPassword FormFields to add your own.`);
  return o;
};
var fc = (e) => ({
  email: We("email")
});
var pc = {
  signIn: ac,
  signUp: sc,
  confirmSignUp: lc,
  confirmSignIn: pn,
  forceNewPassword: dc,
  forgotPassword: cc,
  confirmResetPassword: uc,
  confirmVerifyUser: pn,
  setupEmail: fc,
  setupTotp: pn
};
var mc = (e, t) => {
  const n = pc[e];
  return n(t);
};
var gc = (e, t) => {
  var r, o;
  const n = (o = (r = Ur(t)) == null ? void 0 : r.formFields) == null ? void 0 : o[e];
  return !n || Object.keys(n).length === 0 ? {} : Object.entries(n).reduce((i, [a, s]) => {
    if ((e === "signIn" || e === "forgotPassword") && a === "username") {
      const c = { ...Nn(t), ...s };
      return { ...i, [a]: c };
    } else if (cl(a)) {
      const c = { ...zt[a], ...s };
      return { ...i, [a]: c };
    } else
      return { ...i, [a]: s };
  }, {});
};
var hc = (e, t) => {
  const n = mc(e, t), r = gc(e, t), o = { ...n, ...r };
  return delete o.QR, rc(o);
};
var yc = (e) => e.map((t) => {
  const n = t[0], r = { ...t[1], order: void 0 };
  return [n, r];
});
var vc = (e, t) => {
  const n = hc(e, t);
  return yc(oc(n));
};
var _c = (e) => {
  switch (e) {
    case "EMAIL_OTP":
      return F(V.CONFIRM_EMAIL);
    case "SMS_MFA":
      return F(V.CONFIRM_SMS);
    case "SOFTWARE_TOKEN_MFA":
      return F(V.CONFIRM_TOTP);
    default:
      return F(V.CONFIRM_MFA_DEFAULT);
  }
};
var Sc = (e) => {
  const { DeliveryMedium: t, Destination: n } = e ?? {}, r = t === "EMAIL", o = t === "SMS", i = F(V.CODE_ARRIVAL);
  return r || o ? `${F(r ? V.CODE_EMAILED : V.CODE_TEXTED)} ${n}. ${i}.` : `${F(V.CODE_SENT)}. ${i}.`;
};
var wc = (e) => {
  const { DeliveryMedium: t } = e ?? {}, n = t === "EMAIL";
  return F(!n && t === "SMS" ? V.WE_SENT_CODE : n ? V.WE_EMAILED : V.WE_TEXTED);
};
var bc = {
  amazon: "Amazon",
  apple: "Apple",
  facebook: "Facebook",
  google: "Google"
};
var Cc = (e, t) => F(`Sign ${e === "signIn" ? "In" : "Up"} with ${bc[t]}`);
var Ac = (e) => F(e === "MFA_SETUP" ? V.MFA_SETUP_SELECTION : V.MFA_SELECTION);
var Ec = (e) => {
  switch (e) {
    case "EMAIL":
      return F(fn.EMAIL_OTP);
    case "SMS":
      return F(fn.SMS_MFA);
    case "TOTP":
      return F(fn.SOFTWARE_TOKEN_MFA);
    default:
      return F(e);
  }
};
var Se = {
  /** Shared */
  getBackToSignInText: () => F(V.BACK_SIGN_IN),
  getChangePasswordText: () => F(V.CHANGE_PASSWORD),
  getChangingText: () => F(V.CHANGING_PASSWORD),
  getConfirmText: () => F(V.CONFIRM),
  getCopyText: () => F(V.UPPERCASE_COPY),
  getOrText: () => F(V.OR),
  getResendCodeText: () => F(V.RESEND_CODE),
  getSendCodeText: () => F(V.SEND_CODE),
  getSubmitText: () => F(V.SUBMIT),
  /** SignInSignUpTabs */
  getSignInTabText: () => F(V.SIGN_IN_TAB),
  getSignUpTabText: () => F(V.CREATE_ACCOUNT),
  /** SignIn */
  getForgotPasswordText: (e) => F(e ? V.FORGOT_PASSWORD : V.FORGOT_YOUR_PASSWORD),
  getSigningInText: () => F(V.SIGNING_IN_BUTTON),
  getSignInText: () => F(V.SIGN_IN_BUTTON),
  getCreateAccountText: () => F(V.CREATE_ACCOUNT),
  /** ConfirmSignUp */
  getDeliveryMessageText: Sc,
  getDeliveryMethodText: wc,
  /** ConfirmSignIn */
  getChallengeText: _c,
  /** ForgotPassword */
  getResetYourPasswordText: () => F(V.RESET_PASSWORD),
  /** SetupEmail */
  getSetupEmailText: () => F(V.SETUP_EMAIL),
  // TODO: add defaultText for "COPIED"
  getCopiedText: () => F("COPIED"),
  /** FederatedSignIn */
  getSignInWithFederationText: Cc,
  /** SelectMfaType */
  getMfaTypeLabelByValue: Ec,
  getSelectMfaTypeByChallengeName: Ac,
  getSelectMfaTypeText: () => F(V.SELECT_MFA_TYPE),
  /** VerifyUser */
  getSkipText: () => F(V.SKIP),
  getVerifyText: () => F(V.VERIFY),
  getVerifyContactText: () => F(V.VERIFY_CONTACT),
  getAccountRecoveryInfoText: () => F(V.VERIFY_HEADING)
};
var T = function() {
  return T = Object.assign || function(t) {
    for (var n, r = 1, o = arguments.length; r < o; r++) {
      n = arguments[r];
      for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);
    }
    return t;
  }, T.apply(this, arguments);
};
function Or(e, t) {
  var n = {};
  for (var r in e) Object.prototype.hasOwnProperty.call(e, r) && t.indexOf(r) < 0 && (n[r] = e[r]);
  if (e != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, r = Object.getOwnPropertySymbols(e); o < r.length; o++)
      t.indexOf(r[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e, r[o]) && (n[r[o]] = e[r[o]]);
  return n;
}
function j(e) {
  var t = typeof Symbol == "function" && Symbol.iterator, n = t && e[t], r = 0;
  if (n) return n.call(e);
  if (e && typeof e.length == "number") return {
    next: function() {
      return e && r >= e.length && (e = void 0), { value: e && e[r++], done: !e };
    }
  };
  throw new TypeError(t ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function H(e, t) {
  var n = typeof Symbol == "function" && e[Symbol.iterator];
  if (!n) return e;
  var r = n.call(e), o, i = [], a;
  try {
    for (; (t === void 0 || t-- > 0) && !(o = r.next()).done; ) i.push(o.value);
  } catch (s) {
    a = { error: s };
  } finally {
    try {
      o && !o.done && (n = r.return) && n.call(r);
    } finally {
      if (a) throw a.error;
    }
  }
  return i;
}
function X(e, t, n) {
  if (arguments.length === 2) for (var r = 0, o = t.length, i; r < o; r++)
    (i || !(r in t)) && (i || (i = Array.prototype.slice.call(t, 0, r)), i[r] = t[r]);
  return e.concat(i || Array.prototype.slice.call(t));
}
var Z;
(function(e) {
  e.Start = "xstate.start", e.Stop = "xstate.stop", e.Raise = "xstate.raise", e.Send = "xstate.send", e.Cancel = "xstate.cancel", e.NullEvent = "", e.Assign = "xstate.assign", e.After = "xstate.after", e.DoneState = "done.state", e.DoneInvoke = "done.invoke", e.Log = "xstate.log", e.Init = "xstate.init", e.Invoke = "xstate.invoke", e.ErrorExecution = "error.execution", e.ErrorCommunication = "error.communication", e.ErrorPlatform = "error.platform", e.ErrorCustom = "xstate.error", e.Update = "xstate.update", e.Pure = "xstate.pure", e.Choose = "xstate.choose";
})(Z || (Z = {}));
var Je;
(function(e) {
  e.Parent = "#_parent", e.Internal = "#_internal";
})(Je || (Je = {}));
var yn = Z.Start;
var Un = Z.Stop;
var yt = Z.Raise;
var Ht = Z.Send;
var $r = Z.Cancel;
var Pi = Z.NullEvent;
var Fn = Z.Assign;
var Tc = Z.After;
var Ic = Z.DoneState;
var On = Z.Log;
var ki = Z.Init;
var vn = Z.Invoke;
var Pc = Z.ErrorExecution;
var pr = Z.ErrorPlatform;
var Rr = Z.ErrorCustom;
var $n = Z.Update;
var Mi = Z.Choose;
var Ni = Z.Pure;
var kc = Object.freeze(Object.defineProperty({
  __proto__: null,
  after: Tc,
  assign: Fn,
  cancel: $r,
  choose: Mi,
  doneState: Ic,
  error: Rr,
  errorExecution: Pc,
  errorPlatform: pr,
  init: ki,
  invoke: vn,
  log: On,
  nullEvent: Pi,
  pure: Ni,
  raise: yt,
  send: Ht,
  start: yn,
  stop: Un,
  update: $n
}, Symbol.toStringTag, { value: "Module" }));
var Ui = ".";
var vo = {};
var mr = "xstate.guard";
var Mc = "";
var ie = false;
var tn;
function xr(e, t, n) {
  n === void 0 && (n = Ui);
  var r = xt(e, n), o = xt(t, n);
  return K(o) ? K(r) ? o === r : false : K(r) ? r in o : Object.keys(r).every(function(i) {
    return i in o ? xr(r[i], o[i]) : false;
  });
}
function Fi(e) {
  try {
    return K(e) || typeof e == "number" ? "".concat(e) : e.type;
  } catch {
    throw new Error("Events must be strings or objects with a string event.type property.");
  }
}
function gr(e, t) {
  try {
    return vt(e) ? e : e.toString().split(t);
  } catch {
    throw new Error("'".concat(e, "' is not a valid state path."));
  }
}
function Nc(e) {
  return typeof e == "object" && "value" in e && "context" in e && "event" in e && "_event" in e;
}
function xt(e, t) {
  if (Nc(e))
    return e.value;
  if (vt(e))
    return _n(e);
  if (typeof e != "string")
    return e;
  var n = gr(e, t);
  return _n(n);
}
function _n(e) {
  if (e.length === 1)
    return e[0];
  for (var t = {}, n = t, r = 0; r < e.length - 1; r++)
    r === e.length - 2 ? n[e[r]] = e[r + 1] : (n[e[r]] = {}, n = n[e[r]]);
  return t;
}
function Ft(e, t) {
  for (var n = {}, r = Object.keys(e), o = 0; o < r.length; o++) {
    var i = r[o];
    n[i] = t(e[i], i, e, o);
  }
  return n;
}
function _o(e, t, n) {
  var r, o, i = {};
  try {
    for (var a = j(Object.keys(e)), s = a.next(); !s.done; s = a.next()) {
      var l = s.value, c = e[l];
      n(c) && (i[l] = t(c, l, e));
    }
  } catch (d) {
    r = {
      error: d
    };
  } finally {
    try {
      s && !s.done && (o = a.return) && o.call(a);
    } finally {
      if (r) throw r.error;
    }
  }
  return i;
}
var Uc = function(e) {
  return function(t) {
    var n, r, o = t;
    try {
      for (var i = j(e), a = i.next(); !a.done; a = i.next()) {
        var s = a.value;
        o = o[s];
      }
    } catch (l) {
      n = {
        error: l
      };
    } finally {
      try {
        a && !a.done && (r = i.return) && r.call(i);
      } finally {
        if (n) throw n.error;
      }
    }
    return o;
  };
};
function Fc(e, t) {
  return function(n) {
    var r, o, i = n;
    try {
      for (var a = j(e), s = a.next(); !s.done; s = a.next()) {
        var l = s.value;
        i = i[t][l];
      }
    } catch (c) {
      r = {
        error: c
      };
    } finally {
      try {
        s && !s.done && (o = a.return) && o.call(a);
      } finally {
        if (r) throw r.error;
      }
    }
    return i;
  };
}
function mn(e) {
  if (!e)
    return [[]];
  if (K(e))
    return [[e]];
  var t = oe(Object.keys(e).map(function(n) {
    var r = e[n];
    return typeof r != "string" && (!r || !Object.keys(r).length) ? [[n]] : mn(e[n]).map(function(o) {
      return [n].concat(o);
    });
  }));
  return t;
}
function oe(e) {
  var t;
  return (t = []).concat.apply(t, X([], H(e), false));
}
function Oi(e) {
  return vt(e) ? e : [e];
}
function Ue(e) {
  return e === void 0 ? [] : Oi(e);
}
function Sn(e, t, n) {
  var r, o;
  if (Y(e))
    return e(t, n.data);
  var i = {};
  try {
    for (var a = j(Object.keys(e)), s = a.next(); !s.done; s = a.next()) {
      var l = s.value, c = e[l];
      Y(c) ? i[l] = c(t, n.data) : i[l] = c;
    }
  } catch (d) {
    r = {
      error: d
    };
  } finally {
    try {
      s && !s.done && (o = a.return) && o.call(a);
    } finally {
      if (r) throw r.error;
    }
  }
  return i;
}
function Oc(e) {
  return /^(done|error)\./.test(e);
}
function So(e) {
  return !!(e instanceof Promise || e !== null && (Y(e) || typeof e == "object") && Y(e.then));
}
function $c(e) {
  return e !== null && typeof e == "object" && "transition" in e && typeof e.transition == "function";
}
function Rc(e, t) {
  var n, r, o = H([[], []], 2), i = o[0], a = o[1];
  try {
    for (var s = j(e), l = s.next(); !l.done; l = s.next()) {
      var c = l.value;
      t(c) ? i.push(c) : a.push(c);
    }
  } catch (d) {
    n = {
      error: d
    };
  } finally {
    try {
      l && !l.done && (r = s.return) && r.call(s);
    } finally {
      if (n) throw n.error;
    }
  }
  return [i, a];
}
function $i(e, t) {
  return Ft(e.states, function(n, r) {
    if (n) {
      var o = (K(t) ? void 0 : t[r]) || (n ? n.current : void 0);
      if (o)
        return {
          current: o,
          states: $i(n, o)
        };
    }
  });
}
function xc(e, t) {
  return {
    current: t,
    states: $i(e, t)
  };
}
function wo(e, t, n, r) {
  ie || ue(!!e, "Attempting to update undefined context");
  var o = e && n.reduce(function(i, a) {
    var s, l, c = a.assignment, d = {
      state: r,
      action: a,
      _event: t
    }, m = {};
    if (Y(c))
      m = c(i, t.data, d);
    else
      try {
        for (var f2 = j(Object.keys(c)), p = f2.next(); !p.done; p = f2.next()) {
          var y = p.value, _ = c[y];
          m[y] = Y(_) ? _(i, t.data, d) : _;
        }
      } catch (b) {
        s = {
          error: b
        };
      } finally {
        try {
          p && !p.done && (l = f2.return) && l.call(f2);
        } finally {
          if (s) throw s.error;
        }
      }
    return Object.assign({}, i, m);
  }, e);
  return o;
}
var ue = function() {
};
ie || (ue = function(e, t) {
  var n = e instanceof Error ? e : void 0;
  if (!(!n && e) && console !== void 0) {
    var r = ["Warning: ".concat(t)];
    n && r.push(n), console.warn.apply(console, r);
  }
});
function vt(e) {
  return Array.isArray(e);
}
function Y(e) {
  return typeof e == "function";
}
function K(e) {
  return typeof e == "string";
}
function Ri(e, t) {
  if (e)
    return K(e) ? {
      type: mr,
      name: e,
      predicate: t ? t[e] : void 0
    } : Y(e) ? {
      type: mr,
      name: e.name,
      predicate: e
    } : e;
}
function Dc(e) {
  try {
    return "subscribe" in e && Y(e.subscribe);
  } catch {
    return false;
  }
}
var Ye = function() {
  return typeof Symbol == "function" && Symbol.observable || "@@observable";
}();
tn = {}, tn[Ye] = function() {
  return this;
}, tn[Symbol.observable] = function() {
  return this;
};
function Ve(e) {
  return !!e && "__xstatenode" in e;
}
function Lc(e) {
  return !!e && typeof e.send == "function";
}
var Bc = /* @__PURE__ */ function() {
  var e = 0;
  return function() {
    return e++, e.toString(16);
  };
}();
function Rn(e, t) {
  return K(e) || typeof e == "number" ? T({
    type: e
  }, t) : e;
}
function pe(e, t) {
  if (!K(e) && "$$type" in e && e.$$type === "scxml")
    return e;
  var n = Rn(e);
  return T({
    name: n.type,
    data: n,
    $$type: "scxml",
    type: "external"
  }, t);
}
function at(e, t) {
  var n = Oi(t).map(function(r) {
    return typeof r > "u" || typeof r == "string" || Ve(r) ? {
      target: r,
      event: e
    } : T(T({}, r), {
      event: e
    });
  });
  return n;
}
function zc(e) {
  if (!(e === void 0 || e === Mc))
    return Ue(e);
}
function Gc(e, t, n) {
  if (!ie) {
    var r = e.stack ? " Stacktrace was '".concat(e.stack, "'") : "";
    if (e === t)
      console.error("Missing onError handler for invocation '".concat(n, "', error was '").concat(e, "'.").concat(r));
    else {
      var o = t.stack ? " Stacktrace was '".concat(t.stack, "'") : "";
      console.error("Missing onError handler and/or unhandled exception/promise rejection for invocation '".concat(n, "'. ") + "Original error: '".concat(e, "'. ").concat(r, " Current error is '").concat(t, "'.").concat(o));
    }
  }
}
function xi(e, t, n, r, o) {
  var i = e.options.guards, a = {
    state: o,
    cond: t,
    _event: r
  };
  if (t.type === mr)
    return ((i == null ? void 0 : i[t.name]) || t.predicate)(n, r.data, a);
  var s = i == null ? void 0 : i[t.type];
  if (!s)
    throw new Error("Guard '".concat(t.type, "' is not implemented on machine '").concat(e.id, "'."));
  return s(n, r.data, a);
}
function Di(e) {
  return typeof e == "string" ? {
    type: e
  } : e;
}
function gn(e, t, n) {
  var r = function() {
  }, o = typeof e == "object", i = o ? e : null;
  return {
    next: ((o ? e.next : e) || r).bind(i),
    error: ((o ? e.error : t) || r).bind(i),
    complete: ((o ? e.complete : n) || r).bind(i)
  };
}
function nn(e, t) {
  return "".concat(e, ":invocation[").concat(t, "]");
}
function hr(e) {
  return (e.type === yt || e.type === Ht && e.to === Je.Internal) && typeof e.delay != "number";
}
var nt = pe({
  type: ki
});
function wn(e, t) {
  return t && t[e] || void 0;
}
function ft(e, t) {
  var n;
  if (K(e) || typeof e == "number") {
    var r = wn(e, t);
    Y(r) ? n = {
      type: e,
      exec: r
    } : r ? n = r : n = {
      type: e,
      exec: void 0
    };
  } else if (Y(e))
    n = {
      // Convert action to string if unnamed
      type: e.name || e.toString(),
      exec: e
    };
  else {
    var r = wn(e.type, t);
    if (Y(r))
      n = T(T({}, e), {
        exec: r
      });
    else if (r) {
      var o = r.type || e.type;
      n = T(T(T({}, r), e), {
        type: o
      });
    } else
      n = e;
  }
  return n;
}
var ze = function(e, t) {
  if (!e)
    return [];
  var n = vt(e) ? e : [e];
  return n.map(function(r) {
    return ft(r, t);
  });
};
function xn(e) {
  var t = ft(e);
  return T(T({
    id: K(e) ? e : t.id
  }, t), {
    type: t.type
  });
}
function Li(e, t) {
  return {
    type: yt,
    event: typeof e == "function" ? e : Rn(e),
    delay: t ? t.delay : void 0,
    id: t == null ? void 0 : t.id
  };
}
function Bi(e, t, n, r) {
  var o = {
    _event: n
  }, i = pe(Y(e.event) ? e.event(t, n.data, o) : e.event), a;
  if (K(e.delay)) {
    var s = r && r[e.delay];
    a = Y(s) ? s(t, n.data, o) : s;
  } else
    a = Y(e.delay) ? e.delay(t, n.data, o) : e.delay;
  return T(T({}, e), {
    type: yt,
    _event: i,
    delay: a
  });
}
function _t(e, t) {
  return {
    to: t ? t.to : void 0,
    type: Ht,
    event: Y(e) ? e : Rn(e),
    delay: t ? t.delay : void 0,
    // TODO: don't auto-generate IDs here like that
    // there is too big chance of the ID collision
    id: t && t.id !== void 0 ? t.id : Y(e) ? e.name : Fi(e)
  };
}
function zi(e, t, n, r) {
  var o = {
    _event: n
  }, i = pe(Y(e.event) ? e.event(t, n.data, o) : e.event), a;
  if (K(e.delay)) {
    var s = r && r[e.delay];
    a = Y(s) ? s(t, n.data, o) : s;
  } else
    a = Y(e.delay) ? e.delay(t, n.data, o) : e.delay;
  var l = Y(e.to) ? e.to(t, n.data, o) : e.to;
  return T(T({}, e), {
    to: l,
    _event: i,
    event: i.data,
    delay: a
  });
}
function Dr(e, t) {
  return _t(e, T(T({}, t), {
    to: Je.Parent
  }));
}
function Wc(e, t, n) {
  return _t(t, T(T({}, n), {
    to: e
  }));
}
function Gi() {
  return Dr($n);
}
function Vc(e, t) {
  return _t(e, T(T({}, t), {
    to: function(n, r, o) {
      var i = o._event;
      return i.origin;
    }
  }));
}
var jc = function(e, t) {
  return {
    context: e,
    event: t
  };
};
function Hc(e, t) {
  return e === void 0 && (e = jc), {
    type: On,
    label: t,
    expr: e
  };
}
var Wi = function(e, t, n) {
  return T(T({}, e), {
    value: K(e.expr) ? e.expr : e.expr(t, n.data, {
      _event: n
    })
  });
};
var Vi = function(e) {
  return {
    type: $r,
    sendId: e
  };
};
function ji(e) {
  var t = xn(e);
  return {
    type: Z.Start,
    activity: t,
    exec: void 0
  };
}
function Hi(e) {
  var t = Y(e) ? e : xn(e);
  return {
    type: Z.Stop,
    activity: t,
    exec: void 0
  };
}
function Ki(e, t, n) {
  var r = Y(e.activity) ? e.activity(t, n.data) : e.activity, o = typeof r == "string" ? {
    id: r
  } : r, i = {
    type: Z.Stop,
    activity: o
  };
  return i;
}
var Yi = function(e) {
  return {
    type: Fn,
    assignment: e
  };
};
function Kc(e) {
  return typeof e == "object" && "type" in e;
}
function qi(e, t) {
  var n = t ? "#".concat(t) : "";
  return "".concat(Z.After, "(").concat(e, ")").concat(n);
}
function Ot(e, t) {
  var n = "".concat(Z.DoneState, ".").concat(e), r = {
    type: n,
    data: t
  };
  return r.toString = function() {
    return n;
  }, r;
}
function Dt(e, t) {
  var n = "".concat(Z.DoneInvoke, ".").concat(e), r = {
    type: n,
    data: t
  };
  return r.toString = function() {
    return n;
  }, r;
}
function dt(e, t) {
  var n = "".concat(Z.ErrorPlatform, ".").concat(e), r = {
    type: n,
    data: t
  };
  return r.toString = function() {
    return n;
  }, r;
}
function Yc(e) {
  return {
    type: Z.Pure,
    get: e
  };
}
function Ji(e, t) {
  if (!ie && (!e || typeof e == "function")) {
    var n = e;
    e = function() {
      for (var r = [], o = 0; o < arguments.length; o++)
        r[o] = arguments[o];
      var i = typeof n == "function" ? n.apply(void 0, X([], H(r), false)) : n;
      if (!i)
        throw new Error("Attempted to forward event to undefined actor. This risks an infinite loop in the sender.");
      return i;
    };
  }
  return _t(function(r, o) {
    return o;
  }, T(T({}, t), {
    to: e
  }));
}
function qc(e, t) {
  return Dr(function(n, r, o) {
    return {
      type: Rr,
      data: Y(e) ? e(n, r, o) : e
    };
  }, T(T({}, t), {
    to: Je.Parent
  }));
}
function Jc(e) {
  return {
    type: Z.Choose,
    conds: e
  };
}
var Zc = function(e) {
  var t, n, r = [];
  try {
    for (var o = j(e), i = o.next(); !i.done; i = o.next())
      for (var a = i.value, s = 0; s < a.actions.length; ) {
        if (a.actions[s].type === Fn) {
          r.push(a.actions[s]), a.actions.splice(s, 1);
          continue;
        }
        s++;
      }
  } catch (l) {
    t = {
      error: l
    };
  } finally {
    try {
      i && !i.done && (n = o.return) && n.call(o);
    } finally {
      if (t) throw t.error;
    }
  }
  return r;
};
function Gt(e, t, n, r, o, i, a) {
  a === void 0 && (a = false);
  var s = a ? [] : Zc(o), l = s.length ? wo(n, r, s, t) : n, c = a ? [n] : void 0, d = [];
  function m(y, _) {
    var b;
    switch (_.type) {
      case yt: {
        var h2 = Bi(_, l, r, e.options.delays);
        return i && typeof h2.delay == "number" && i(h2, l, r), h2;
      }
      case Ht:
        var S = zi(_, l, r, e.options.delays);
        if (!ie) {
          var v = _.delay;
          ue(
            !K(v) || typeof S.delay == "number",
            // tslint:disable-next-line:max-line-length
            "No delay reference for delay expression '".concat(v, "' was found on machine '").concat(e.id, "'")
          );
        }
        return i && S.to !== Je.Internal && (y === "entry" ? d.push(S) : i(S, l, r)), S;
      case On: {
        var w = Wi(_, l, r);
        return i == null || i(w, l, r), w;
      }
      case Mi: {
        var E = _, I = (b = E.conds.find(function(de) {
          var ge = Ri(de.cond, e.options.guards);
          return !ge || xi(e, ge, l, r, i ? void 0 : t);
        })) === null || b === void 0 ? void 0 : b.actions;
        if (!I)
          return [];
        var P = H(Gt(e, t, l, r, [{
          type: y,
          actions: ze(Ue(I), e.options.actions)
        }], i, a), 2), k = P[0], U = P[1];
        return l = U, c == null || c.push(l), k;
      }
      case Ni: {
        var I = _.get(l, r.data);
        if (!I)
          return [];
        var O = H(Gt(e, t, l, r, [{
          type: y,
          actions: ze(Ue(I), e.options.actions)
        }], i, a), 2), $ = O[0], B = O[1];
        return l = B, c == null || c.push(l), $;
      }
      case Un: {
        var w = Ki(_, l, r);
        return i == null || i(w, n, r), w;
      }
      case Fn: {
        l = wo(l, r, [_], i ? void 0 : t), c == null || c.push(l);
        break;
      }
      default:
        var z = ft(_, e.options.actions), se = z.exec;
        if (i)
          i(z, l, r);
        else if (se && c) {
          var ye = c.length - 1, we = T(T({}, z), {
            exec: function(de) {
              for (var ge = [], fe = 1; fe < arguments.length; fe++)
                ge[fe - 1] = arguments[fe];
              se.apply(void 0, X([c[ye]], H(ge), false));
            }
          });
          z = we;
        }
        return z;
    }
  }
  function f2(y) {
    var _, b, h2 = [];
    try {
      for (var S = j(y.actions), v = S.next(); !v.done; v = S.next()) {
        var w = v.value, E = m(y.type, w);
        E && (h2 = h2.concat(E));
      }
    } catch (I) {
      _ = {
        error: I
      };
    } finally {
      try {
        v && !v.done && (b = S.return) && b.call(S);
      } finally {
        if (_) throw _.error;
      }
    }
    return d.forEach(function(I) {
      i(I, l, r);
    }), d.length = 0, h2;
  }
  var p = oe(o.map(f2));
  return [p, l];
}
var Zi = Object.freeze(Object.defineProperty({
  __proto__: null,
  actionTypes: kc,
  after: qi,
  assign: Yi,
  cancel: Vi,
  choose: Jc,
  done: Ot,
  doneInvoke: Dt,
  error: dt,
  escalate: qc,
  forwardTo: Ji,
  getActionFunction: wn,
  initEvent: nt,
  isActionObject: Kc,
  log: Hc,
  pure: Yc,
  raise: Li,
  resolveActions: Gt,
  resolveLog: Wi,
  resolveRaise: Bi,
  resolveSend: zi,
  resolveStop: Ki,
  respond: Vc,
  send: _t,
  sendParent: Dr,
  sendTo: Wc,
  sendUpdate: Gi,
  start: ji,
  stop: Hi,
  toActionObject: ft,
  toActionObjects: ze,
  toActivityDefinition: xn
}, Symbol.toStringTag, { value: "Module" }));
var bn = [];
var ct = function(e, t) {
  bn.push(e);
  var n = t(e);
  return bn.pop(), n;
};
var Qc = function(e) {
  return e(bn[bn.length - 1]);
};
function Qi(e) {
  var t;
  return t = {
    id: e,
    send: function() {
    },
    subscribe: function() {
      return {
        unsubscribe: function() {
        }
      };
    },
    getSnapshot: function() {
    },
    toJSON: function() {
      return {
        id: e
      };
    }
  }, t[Ye] = function() {
    return this;
  }, t;
}
function Xc(e, t, n, r) {
  var o, i = Di(e.src), a = (o = t == null ? void 0 : t.options.services) === null || o === void 0 ? void 0 : o[i.type], s = e.data ? Sn(e.data, n, r) : void 0, l = a ? Lr(a, e.id, s) : Qi(e.id);
  return l.meta = e, l;
}
function Lr(e, t, n) {
  var r = Qi(t);
  if (r.deferred = true, Ve(e)) {
    var o = r.state = ct(void 0, function() {
      return (n ? e.withContext(n) : e).initialState;
    });
    r.getSnapshot = function() {
      return o;
    };
  }
  return r;
}
function eu(e) {
  try {
    return typeof e.send == "function";
  } catch {
    return false;
  }
}
function tu(e) {
  return eu(e) && "id" in e;
}
function nu(e) {
  var t;
  return T((t = {
    subscribe: function() {
      return {
        unsubscribe: function() {
        }
      };
    },
    id: "anonymous",
    getSnapshot: function() {
    }
  }, t[Ye] = function() {
    return this;
  }, t), e);
}
var Cn = function(e) {
  return e.type === "atomic" || e.type === "final";
};
function Xi(e) {
  return Object.keys(e.states).map(function(t) {
    return e.states[t];
  });
}
function Wt(e) {
  return Xi(e).filter(function(t) {
    return t.type !== "history";
  });
}
function ea(e) {
  var t = [e];
  return Cn(e) ? t : t.concat(oe(Wt(e).map(ea)));
}
function $t(e, t) {
  var n, r, o, i, a, s, l, c, d = new Set(e), m = yr(d), f2 = new Set(t);
  try {
    for (var p = j(f2), y = p.next(); !y.done; y = p.next())
      for (var _ = y.value, b = _.parent; b && !f2.has(b); )
        f2.add(b), b = b.parent;
  } catch (U) {
    n = {
      error: U
    };
  } finally {
    try {
      y && !y.done && (r = p.return) && r.call(p);
    } finally {
      if (n) throw n.error;
    }
  }
  var h2 = yr(f2);
  try {
    for (var S = j(f2), v = S.next(); !v.done; v = S.next()) {
      var _ = v.value;
      if (_.type === "compound" && (!h2.get(_) || !h2.get(_).length))
        m.get(_) ? m.get(_).forEach(function(O) {
          return f2.add(O);
        }) : _.initialStateNodes.forEach(function(O) {
          return f2.add(O);
        });
      else if (_.type === "parallel")
        try {
          for (var w = (a = void 0, j(Wt(_))), E = w.next(); !E.done; E = w.next()) {
            var I = E.value;
            f2.has(I) || (f2.add(I), m.get(I) ? m.get(I).forEach(function(O) {
              return f2.add(O);
            }) : I.initialStateNodes.forEach(function(O) {
              return f2.add(O);
            }));
          }
        } catch (O) {
          a = {
            error: O
          };
        } finally {
          try {
            E && !E.done && (s = w.return) && s.call(w);
          } finally {
            if (a) throw a.error;
          }
        }
    }
  } catch (U) {
    o = {
      error: U
    };
  } finally {
    try {
      v && !v.done && (i = S.return) && i.call(S);
    } finally {
      if (o) throw o.error;
    }
  }
  try {
    for (var P = j(f2), k = P.next(); !k.done; k = P.next())
      for (var _ = k.value, b = _.parent; b && !f2.has(b); )
        f2.add(b), b = b.parent;
  } catch (U) {
    l = {
      error: U
    };
  } finally {
    try {
      k && !k.done && (c = P.return) && c.call(P);
    } finally {
      if (l) throw l.error;
    }
  }
  return f2;
}
function ta(e, t) {
  var n = t.get(e);
  if (!n)
    return {};
  if (e.type === "compound") {
    var r = n[0];
    if (r) {
      if (Cn(r))
        return r.key;
    } else
      return {};
  }
  var o = {};
  return n.forEach(function(i) {
    o[i.key] = ta(i, t);
  }), o;
}
function yr(e) {
  var t, n, r = /* @__PURE__ */ new Map();
  try {
    for (var o = j(e), i = o.next(); !i.done; i = o.next()) {
      var a = i.value;
      r.has(a) || r.set(a, []), a.parent && (r.has(a.parent) || r.set(a.parent, []), r.get(a.parent).push(a));
    }
  } catch (s) {
    t = {
      error: s
    };
  } finally {
    try {
      i && !i.done && (n = o.return) && n.call(o);
    } finally {
      if (t) throw t.error;
    }
  }
  return r;
}
function ru(e, t) {
  var n = $t([e], t);
  return ta(e, yr(n));
}
function Rt(e, t) {
  return Array.isArray(e) ? e.some(function(n) {
    return n === t;
  }) : e instanceof Set ? e.has(t) : false;
}
function ou(e) {
  return X([], H(new Set(oe(X([], H(e.map(function(t) {
    return t.ownEvents;
  })), false)))), false);
}
function hn(e, t) {
  return t.type === "compound" ? Wt(t).some(function(n) {
    return n.type === "final" && Rt(e, n);
  }) : t.type === "parallel" ? Wt(t).every(function(n) {
    return hn(e, n);
  }) : false;
}
function iu(e) {
  return e === void 0 && (e = []), e.reduce(function(t, n) {
    return n.meta !== void 0 && (t[n.id] = n.meta), t;
  }, {});
}
function bo(e) {
  return new Set(oe(e.map(function(t) {
    return t.tags;
  })));
}
function na(e, t) {
  if (e === t)
    return true;
  if (e === void 0 || t === void 0)
    return false;
  if (K(e) || K(t))
    return e === t;
  var n = Object.keys(e), r = Object.keys(t);
  return n.length === r.length && n.every(function(o) {
    return na(e[o], t[o]);
  });
}
function au(e) {
  return typeof e != "object" || e === null ? false : "value" in e && "_event" in e;
}
function su(e, t) {
  var n = e.exec, r = T(T({}, e), {
    exec: n !== void 0 ? function() {
      return n(t.context, t.event, {
        action: e,
        state: t,
        _event: t._event
      });
    } : void 0
  });
  return r;
}
var Oe = (
  /** @class */
  function() {
    function e(t) {
      var n = this, r;
      this.actions = [], this.activities = vo, this.meta = {}, this.events = [], this.value = t.value, this.context = t.context, this._event = t._event, this._sessionid = t._sessionid, this.event = this._event.data, this.historyValue = t.historyValue, this.history = t.history, this.actions = t.actions || [], this.activities = t.activities || vo, this.meta = iu(t.configuration), this.events = t.events || [], this.matches = this.matches.bind(this), this.toStrings = this.toStrings.bind(this), this.configuration = t.configuration, this.transitions = t.transitions, this.children = t.children, this.done = !!t.done, this.tags = (r = Array.isArray(t.tags) ? new Set(t.tags) : t.tags) !== null && r !== void 0 ? r : /* @__PURE__ */ new Set(), this.machine = t.machine, Object.defineProperty(this, "nextEvents", {
        get: function() {
          return ou(n.configuration);
        }
      });
    }
    return e.from = function(t, n) {
      if (t instanceof e)
        return t.context !== n ? new e({
          value: t.value,
          context: n,
          _event: t._event,
          _sessionid: null,
          historyValue: t.historyValue,
          history: t.history,
          actions: [],
          activities: t.activities,
          events: [],
          configuration: [],
          transitions: [],
          children: {}
        }) : t;
      var r = nt;
      return new e({
        value: t,
        context: n,
        _event: r,
        _sessionid: null,
        historyValue: void 0,
        history: void 0,
        actions: [],
        activities: void 0,
        events: [],
        configuration: [],
        transitions: [],
        children: {}
      });
    }, e.create = function(t) {
      return new e(t);
    }, e.inert = function(t, n) {
      if (t instanceof e) {
        if (!t.actions.length)
          return t;
        var r = nt;
        return new e({
          value: t.value,
          context: n,
          _event: r,
          _sessionid: null,
          historyValue: t.historyValue,
          history: t.history,
          activities: t.activities,
          configuration: t.configuration,
          transitions: [],
          children: {}
        });
      }
      return e.from(t, n);
    }, e.prototype.toStrings = function(t, n) {
      var r = this;
      if (t === void 0 && (t = this.value), n === void 0 && (n = "."), K(t))
        return [t];
      var o = Object.keys(t);
      return o.concat.apply(o, X([], H(o.map(function(i) {
        return r.toStrings(t[i], n).map(function(a) {
          return i + n + a;
        });
      })), false));
    }, e.prototype.toJSON = function() {
      var t = this;
      t.configuration, t.transitions;
      var n = t.tags;
      t.machine;
      var r = Or(t, ["configuration", "transitions", "tags", "machine"]);
      return T(T({}, r), {
        tags: Array.from(n)
      });
    }, e.prototype.matches = function(t) {
      return xr(t, this.value);
    }, e.prototype.hasTag = function(t) {
      return this.tags.has(t);
    }, e.prototype.can = function(t) {
      var n;
      ie && ue(!!this.machine, "state.can(...) used outside of a machine-created State object; this will always return false.");
      var r = (n = this.machine) === null || n === void 0 ? void 0 : n.getTransitionData(this, t);
      return !!(r != null && r.transitions.length) && // Check that at least one transition is not forbidden
      r.transitions.some(function(o) {
        return o.target !== void 0 || o.actions.length;
      });
    }, e;
  }()
);
var lu = {
  deferEvents: false
};
var Co = (
  /** @class */
  function() {
    function e(t) {
      this.processingEvent = false, this.queue = [], this.initialized = false, this.options = T(T({}, lu), t);
    }
    return e.prototype.initialize = function(t) {
      if (this.initialized = true, t) {
        if (!this.options.deferEvents) {
          this.schedule(t);
          return;
        }
        this.process(t);
      }
      this.flushEvents();
    }, e.prototype.schedule = function(t) {
      if (!this.initialized || this.processingEvent) {
        this.queue.push(t);
        return;
      }
      if (this.queue.length !== 0)
        throw new Error("Event queue should be empty when it is not processing events");
      this.process(t), this.flushEvents();
    }, e.prototype.clear = function() {
      this.queue = [];
    }, e.prototype.flushEvents = function() {
      for (var t = this.queue.shift(); t; )
        this.process(t), t = this.queue.shift();
    }, e.prototype.process = function(t) {
      this.processingEvent = true;
      try {
        t();
      } catch (n) {
        throw this.clear(), n;
      } finally {
        this.processingEvent = false;
      }
    }, e;
  }()
);
var rr2 = /* @__PURE__ */ new Map();
var cu = 0;
var Pt = {
  bookId: function() {
    return "x:".concat(cu++);
  },
  register: function(e, t) {
    return rr2.set(e, t), e;
  },
  get: function(e) {
    return rr2.get(e);
  },
  free: function(e) {
    rr2.delete(e);
  }
};
function Br() {
  if (typeof globalThis < "u")
    return globalThis;
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof global < "u")
    return global;
  ie || console.warn("XState could not find a global object in this environment. Please let the maintainers know and raise an issue here: https://github.com/statelyai/xstate/issues");
}
function uu() {
  var e = Br();
  if (e && "__xstate__" in e)
    return e.__xstate__;
}
function du(e) {
  if (Br()) {
    var t = uu();
    t && t.register(e);
  }
}
function fu(e, t) {
  t === void 0 && (t = {});
  var n = e.initialState, r = /* @__PURE__ */ new Set(), o = [], i = false, a = function() {
    if (!i) {
      for (i = true; o.length > 0; ) {
        var c = o.shift();
        n = e.transition(n, c, l), r.forEach(function(d) {
          return d.next(n);
        });
      }
      i = false;
    }
  }, s = nu({
    id: t.id,
    send: function(c) {
      o.push(c), a();
    },
    getSnapshot: function() {
      return n;
    },
    subscribe: function(c, d, m) {
      var f2 = gn(c, d, m);
      return r.add(f2), f2.next(n), {
        unsubscribe: function() {
          r.delete(f2);
        }
      };
    }
  }), l = {
    parent: t.parent,
    self: s,
    id: t.id || "anonymous",
    observers: r
  };
  return n = e.start ? e.start(l) : n, s;
}
var vr = {
  sync: false,
  autoForward: false
};
var ce;
(function(e) {
  e[e.NotStarted = 0] = "NotStarted", e[e.Running = 1] = "Running", e[e.Stopped = 2] = "Stopped";
})(ce || (ce = {}));
var pu = (
  /** @class */
  function() {
    function e(t, n) {
      n === void 0 && (n = e.defaultOptions);
      var r = this;
      this.machine = t, this.delayedEventsMap = {}, this.listeners = /* @__PURE__ */ new Set(), this.contextListeners = /* @__PURE__ */ new Set(), this.stopListeners = /* @__PURE__ */ new Set(), this.doneListeners = /* @__PURE__ */ new Set(), this.eventListeners = /* @__PURE__ */ new Set(), this.sendListeners = /* @__PURE__ */ new Set(), this.initialized = false, this.status = ce.NotStarted, this.children = /* @__PURE__ */ new Map(), this.forwardTo = /* @__PURE__ */ new Set(), this._outgoingQueue = [], this.init = this.start, this.send = function(d, m) {
        if (vt(d))
          return r.batch(d), r.state;
        var f2 = pe(Rn(d, m));
        if (r.status === ce.Stopped)
          return ie || ue(false, 'Event "'.concat(f2.name, '" was sent to stopped service "').concat(r.machine.id, `". This service has already reached its final state, and will not transition.
Event: `).concat(JSON.stringify(f2.data))), r.state;
        if (r.status !== ce.Running && !r.options.deferEvents)
          throw new Error('Event "'.concat(f2.name, '" was sent to uninitialized service "').concat(
            r.machine.id,
            `". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.
Event: `
          ).concat(JSON.stringify(f2.data)));
        return r.scheduler.schedule(function() {
          r.forward(f2);
          var p = r._nextState(f2);
          r.update(p, f2);
        }), r._state;
      }, this.sendTo = function(d, m, f2) {
        var p = r.parent && (m === Je.Parent || r.parent.id === m), y = p ? r.parent : K(m) ? m === Je.Internal ? r : r.children.get(m) || Pt.get(m) : Lc(m) ? m : void 0;
        if (!y) {
          if (!p)
            throw new Error("Unable to send event to child '".concat(m, "' from service '").concat(r.id, "'."));
          ie || ue(false, "Service '".concat(r.id, "' has no parent: unable to send event ").concat(d.type));
          return;
        }
        if ("machine" in y) {
          if (r.status !== ce.Stopped || r.parent !== y || // we need to send events to the parent from exit handlers of a machine that reached its final state
          r.state.done) {
            var _ = T(T({}, d), {
              name: d.name === Rr ? "".concat(dt(r.id)) : d.name,
              origin: r.sessionId
            });
            !f2 && r.machine.config.predictableActionArguments ? r._outgoingQueue.push([y, _]) : y.send(_);
          }
        } else
          !f2 && r.machine.config.predictableActionArguments ? r._outgoingQueue.push([y, d.data]) : y.send(d.data);
      }, this._exec = function(d, m, f2, p) {
        p === void 0 && (p = r.machine.options.actions);
        var y = d.exec || wn(d.type, p), _ = Y(y) ? y : y ? y.exec : d.exec;
        if (_)
          try {
            return _(m, f2.data, r.machine.config.predictableActionArguments ? {
              action: d,
              _event: f2
            } : {
              action: d,
              state: r.state,
              _event: f2
            });
          } catch (se) {
            throw r.parent && r.parent.send({
              type: "xstate.error",
              data: se
            }), se;
          }
        switch (d.type) {
          case yt: {
            var b = d;
            r.defer(b);
            break;
          }
          case Ht:
            var h2 = d;
            if (typeof h2.delay == "number") {
              r.defer(h2);
              return;
            } else
              h2.to ? r.sendTo(h2._event, h2.to, f2 === nt) : r.send(h2._event);
            break;
          case $r:
            r.cancel(d.sendId);
            break;
          case yn: {
            if (r.status !== ce.Running)
              return;
            var S = d.activity;
            if (
              // in v4 with `predictableActionArguments` invokes are called eagerly when the `this.state` still points to the previous state
              !r.machine.config.predictableActionArguments && !r.state.activities[S.id || S.type]
            )
              break;
            if (S.type === Z.Invoke) {
              var v = Di(S.src), w = r.machine.options.services ? r.machine.options.services[v.type] : void 0, E = S.id, I = S.data;
              ie || ue(
                !("forward" in S),
                // tslint:disable-next-line:max-line-length
                "`forward` property is deprecated (found in invocation of '".concat(S.src, "' in in machine '").concat(r.machine.id, "'). ") + "Please use `autoForward` instead."
              );
              var P = "autoForward" in S ? S.autoForward : !!S.forward;
              if (!w) {
                ie || ue(false, "No service found for invocation '".concat(S.src, "' in machine '").concat(r.machine.id, "'."));
                return;
              }
              var k = I ? Sn(I, m, f2) : void 0;
              if (typeof w == "string")
                return;
              var U = Y(w) ? w(m, f2.data, {
                data: k,
                src: v,
                meta: S.meta
              }) : w;
              if (!U)
                return;
              var O = void 0;
              Ve(U) && (U = k ? U.withContext(k) : U, O = {
                autoForward: P
              }), r.spawn(U, E, O);
            } else
              r.spawnActivity(S);
            break;
          }
          case Un: {
            r.stopChild(d.activity.id);
            break;
          }
          case On:
            var $ = d, B = $.label, z = $.value;
            B ? r.logger(B, z) : r.logger(z);
            break;
          default:
            ie || ue(false, "No implementation found for action type '".concat(d.type, "'"));
            break;
        }
      };
      var o = T(T({}, e.defaultOptions), n), i = o.clock, a = o.logger, s = o.parent, l = o.id, c = l !== void 0 ? l : t.id;
      this.id = c, this.logger = a, this.clock = i, this.parent = s, this.options = o, this.scheduler = new Co({
        deferEvents: this.options.deferEvents
      }), this.sessionId = Pt.bookId();
    }
    return Object.defineProperty(e.prototype, "initialState", {
      get: function() {
        var t = this;
        return this._initialState ? this._initialState : ct(this, function() {
          return t._initialState = t.machine.initialState, t._initialState;
        });
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "state", {
      /**
       * @deprecated Use `.getSnapshot()` instead.
       */
      get: function() {
        return ie || ue(this.status !== ce.NotStarted, "Attempted to read state from uninitialized service '".concat(this.id, "'. Make sure the service is started first.")), this._state;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.execute = function(t, n) {
      var r, o;
      try {
        for (var i = j(t.actions), a = i.next(); !a.done; a = i.next()) {
          var s = a.value;
          this.exec(s, t, n);
        }
      } catch (l) {
        r = {
          error: l
        };
      } finally {
        try {
          a && !a.done && (o = i.return) && o.call(i);
        } finally {
          if (r) throw r.error;
        }
      }
    }, e.prototype.update = function(t, n) {
      var r, o, i, a, s, l, c, d, m = this;
      if (t._sessionid = this.sessionId, this._state = t, (!this.machine.config.predictableActionArguments || // this is currently required to execute initial actions as the `initialState` gets cached
      // we can't just recompute it (and execute actions while doing so) because we try to preserve identity of actors created within initial assigns
      n === nt) && this.options.execute)
        this.execute(this.state);
      else
        for (var f2 = void 0; f2 = this._outgoingQueue.shift(); )
          f2[0].send(f2[1]);
      if (this.children.forEach(function(U) {
        m.state.children[U.id] = U;
      }), this.devTools && this.devTools.send(n.data, t), t.event)
        try {
          for (var p = j(this.eventListeners), y = p.next(); !y.done; y = p.next()) {
            var _ = y.value;
            _(t.event);
          }
        } catch (U) {
          r = {
            error: U
          };
        } finally {
          try {
            y && !y.done && (o = p.return) && o.call(p);
          } finally {
            if (r) throw r.error;
          }
        }
      try {
        for (var b = j(this.listeners), h2 = b.next(); !h2.done; h2 = b.next()) {
          var _ = h2.value;
          _(t, t.event);
        }
      } catch (U) {
        i = {
          error: U
        };
      } finally {
        try {
          h2 && !h2.done && (a = b.return) && a.call(b);
        } finally {
          if (i) throw i.error;
        }
      }
      try {
        for (var S = j(this.contextListeners), v = S.next(); !v.done; v = S.next()) {
          var w = v.value;
          w(this.state.context, this.state.history ? this.state.history.context : void 0);
        }
      } catch (U) {
        s = {
          error: U
        };
      } finally {
        try {
          v && !v.done && (l = S.return) && l.call(S);
        } finally {
          if (s) throw s.error;
        }
      }
      if (this.state.done) {
        var E = t.configuration.find(function(U) {
          return U.type === "final" && U.parent === m.machine;
        }), I = E && E.doneData ? Sn(E.doneData, t.context, n) : void 0;
        this._doneEvent = Dt(this.id, I);
        try {
          for (var P = j(this.doneListeners), k = P.next(); !k.done; k = P.next()) {
            var _ = k.value;
            _(this._doneEvent);
          }
        } catch (U) {
          c = {
            error: U
          };
        } finally {
          try {
            k && !k.done && (d = P.return) && d.call(P);
          } finally {
            if (c) throw c.error;
          }
        }
        this._stop(), this._stopChildren(), Pt.free(this.sessionId);
      }
    }, e.prototype.onTransition = function(t) {
      return this.listeners.add(t), this.status === ce.Running && t(this.state, this.state.event), this;
    }, e.prototype.subscribe = function(t, n, r) {
      var o = this, i = gn(t, n, r);
      this.listeners.add(i.next), this.status !== ce.NotStarted && i.next(this.state);
      var a = function() {
        o.doneListeners.delete(a), o.stopListeners.delete(a), i.complete();
      };
      return this.status === ce.Stopped ? i.complete() : (this.onDone(a), this.onStop(a)), {
        unsubscribe: function() {
          o.listeners.delete(i.next), o.doneListeners.delete(a), o.stopListeners.delete(a);
        }
      };
    }, e.prototype.onEvent = function(t) {
      return this.eventListeners.add(t), this;
    }, e.prototype.onSend = function(t) {
      return this.sendListeners.add(t), this;
    }, e.prototype.onChange = function(t) {
      return this.contextListeners.add(t), this;
    }, e.prototype.onStop = function(t) {
      return this.stopListeners.add(t), this;
    }, e.prototype.onDone = function(t) {
      return this.status === ce.Stopped && this._doneEvent ? t(this._doneEvent) : this.doneListeners.add(t), this;
    }, e.prototype.off = function(t) {
      return this.listeners.delete(t), this.eventListeners.delete(t), this.sendListeners.delete(t), this.stopListeners.delete(t), this.doneListeners.delete(t), this.contextListeners.delete(t), this;
    }, e.prototype.start = function(t) {
      var n = this;
      if (this.status === ce.Running)
        return this;
      this.machine._init(), Pt.register(this.sessionId, this), this.initialized = true, this.status = ce.Running;
      var r = t === void 0 ? this.initialState : ct(this, function() {
        return au(t) ? n.machine.resolveState(t) : n.machine.resolveState(Oe.from(t, n.machine.context));
      });
      return this.options.devTools && this.attachDev(), this.scheduler.initialize(function() {
        n.update(r, nt);
      }), this;
    }, e.prototype._stopChildren = function() {
      this.children.forEach(function(t) {
        Y(t.stop) && t.stop();
      }), this.children.clear();
    }, e.prototype._stop = function() {
      var t, n, r, o, i, a, s, l, c, d;
      try {
        for (var m = j(this.listeners), f2 = m.next(); !f2.done; f2 = m.next()) {
          var p = f2.value;
          this.listeners.delete(p);
        }
      } catch (P) {
        t = {
          error: P
        };
      } finally {
        try {
          f2 && !f2.done && (n = m.return) && n.call(m);
        } finally {
          if (t) throw t.error;
        }
      }
      try {
        for (var y = j(this.stopListeners), _ = y.next(); !_.done; _ = y.next()) {
          var p = _.value;
          p(), this.stopListeners.delete(p);
        }
      } catch (P) {
        r = {
          error: P
        };
      } finally {
        try {
          _ && !_.done && (o = y.return) && o.call(y);
        } finally {
          if (r) throw r.error;
        }
      }
      try {
        for (var b = j(this.contextListeners), h2 = b.next(); !h2.done; h2 = b.next()) {
          var p = h2.value;
          this.contextListeners.delete(p);
        }
      } catch (P) {
        i = {
          error: P
        };
      } finally {
        try {
          h2 && !h2.done && (a = b.return) && a.call(b);
        } finally {
          if (i) throw i.error;
        }
      }
      try {
        for (var S = j(this.doneListeners), v = S.next(); !v.done; v = S.next()) {
          var p = v.value;
          this.doneListeners.delete(p);
        }
      } catch (P) {
        s = {
          error: P
        };
      } finally {
        try {
          v && !v.done && (l = S.return) && l.call(S);
        } finally {
          if (s) throw s.error;
        }
      }
      if (!this.initialized)
        return this;
      this.initialized = false, this.status = ce.Stopped, this._initialState = void 0;
      try {
        for (var w = j(Object.keys(this.delayedEventsMap)), E = w.next(); !E.done; E = w.next()) {
          var I = E.value;
          this.clock.clearTimeout(this.delayedEventsMap[I]);
        }
      } catch (P) {
        c = {
          error: P
        };
      } finally {
        try {
          E && !E.done && (d = w.return) && d.call(w);
        } finally {
          if (c) throw c.error;
        }
      }
      this.scheduler.clear(), this.scheduler = new Co({
        deferEvents: this.options.deferEvents
      });
    }, e.prototype.stop = function() {
      var t = this, n = this.scheduler;
      return this._stop(), n.schedule(function() {
        var r = pe({
          type: "xstate.stop"
        }), o = ct(t, function() {
          var i = oe(X([], H(t.state.configuration), false).sort(function(d, m) {
            return m.order - d.order;
          }).map(function(d) {
            return ze(d.onExit, t.machine.options.actions);
          })), a = H(Gt(t.machine, t.state, t.state.context, r, [{
            type: "exit",
            actions: i
          }], t.machine.config.predictableActionArguments ? t._exec : void 0, t.machine.config.predictableActionArguments || t.machine.config.preserveActionOrder), 2), s = a[0], l = a[1], c = new Oe({
            value: t.state.value,
            context: l,
            _event: r,
            _sessionid: t.sessionId,
            historyValue: void 0,
            history: t.state,
            actions: s.filter(function(d) {
              return !hr(d);
            }),
            activities: {},
            events: [],
            configuration: [],
            transitions: [],
            children: {},
            done: t.state.done,
            tags: t.state.tags,
            machine: t.machine
          });
          return c.changed = true, c;
        });
        t.update(o, r), t._stopChildren(), Pt.free(t.sessionId);
      }), this;
    }, e.prototype.batch = function(t) {
      var n = this;
      if (this.status === ce.NotStarted && this.options.deferEvents)
        ie || ue(false, "".concat(t.length, ' event(s) were sent to uninitialized service "').concat(this.machine.id, `" and are deferred. Make sure .start() is called for this service.
Event: `).concat(JSON.stringify(event)));
      else if (this.status !== ce.Running)
        throw new Error(
          // tslint:disable-next-line:max-line-length
          "".concat(t.length, ' event(s) were sent to uninitialized service "').concat(this.machine.id, '". Make sure .start() is called for this service, or set { deferEvents: true } in the service options.')
        );
      if (t.length) {
        var r = !!this.machine.config.predictableActionArguments && this._exec;
        this.scheduler.schedule(function() {
          var o, i, a = n.state, s = false, l = [], c = function(p) {
            var y = pe(p);
            n.forward(y), a = ct(n, function() {
              return n.machine.transition(a, y, void 0, r || void 0);
            }), l.push.apply(l, X([], H(n.machine.config.predictableActionArguments ? a.actions : a.actions.map(function(_) {
              return su(_, a);
            })), false)), s = s || !!a.changed;
          };
          try {
            for (var d = j(t), m = d.next(); !m.done; m = d.next()) {
              var f2 = m.value;
              c(f2);
            }
          } catch (p) {
            o = {
              error: p
            };
          } finally {
            try {
              m && !m.done && (i = d.return) && i.call(d);
            } finally {
              if (o) throw o.error;
            }
          }
          a.changed = s, a.actions = l, n.update(a, pe(t[t.length - 1]));
        });
      }
    }, e.prototype.sender = function(t) {
      return this.send.bind(this, t);
    }, e.prototype._nextState = function(t, n) {
      var r = this;
      n === void 0 && (n = !!this.machine.config.predictableActionArguments && this._exec);
      var o = pe(t);
      if (o.name.indexOf(pr) === 0 && !this.state.nextEvents.some(function(a) {
        return a.indexOf(pr) === 0;
      }))
        throw o.data.data;
      var i = ct(this, function() {
        return r.machine.transition(r.state, o, void 0, n || void 0);
      });
      return i;
    }, e.prototype.nextState = function(t) {
      return this._nextState(t, false);
    }, e.prototype.forward = function(t) {
      var n, r;
      try {
        for (var o = j(this.forwardTo), i = o.next(); !i.done; i = o.next()) {
          var a = i.value, s = this.children.get(a);
          if (!s)
            throw new Error("Unable to forward event '".concat(t, "' from interpreter '").concat(this.id, "' to nonexistant child '").concat(a, "'."));
          s.send(t);
        }
      } catch (l) {
        n = {
          error: l
        };
      } finally {
        try {
          i && !i.done && (r = o.return) && r.call(o);
        } finally {
          if (n) throw n.error;
        }
      }
    }, e.prototype.defer = function(t) {
      var n = this, r = this.clock.setTimeout(function() {
        "to" in t && t.to ? n.sendTo(t._event, t.to, true) : n.send(t._event);
      }, t.delay);
      t.id && (this.delayedEventsMap[t.id] = r);
    }, e.prototype.cancel = function(t) {
      this.clock.clearTimeout(this.delayedEventsMap[t]), delete this.delayedEventsMap[t];
    }, e.prototype.exec = function(t, n, r) {
      r === void 0 && (r = this.machine.options.actions), this._exec(t, n.context, n._event, r);
    }, e.prototype.removeChild = function(t) {
      var n;
      this.children.delete(t), this.forwardTo.delete(t), (n = this.state) === null || n === void 0 || delete n.children[t];
    }, e.prototype.stopChild = function(t) {
      var n = this.children.get(t);
      n && (this.removeChild(t), Y(n.stop) && n.stop());
    }, e.prototype.spawn = function(t, n, r) {
      if (this.status !== ce.Running)
        return Lr(t, n);
      if (So(t))
        return this.spawnPromise(Promise.resolve(t), n);
      if (Y(t))
        return this.spawnCallback(t, n);
      if (tu(t))
        return this.spawnActor(t, n);
      if (Dc(t))
        return this.spawnObservable(t, n);
      if (Ve(t))
        return this.spawnMachine(t, T(T({}, r), {
          id: n
        }));
      if ($c(t))
        return this.spawnBehavior(t, n);
      throw new Error('Unable to spawn entity "'.concat(n, '" of type "').concat(typeof t, '".'));
    }, e.prototype.spawnMachine = function(t, n) {
      var r = this;
      n === void 0 && (n = {});
      var o = new e(t, T(T({}, this.options), {
        parent: this,
        id: n.id || t.id
      })), i = T(T({}, vr), n);
      i.sync && o.onTransition(function(s) {
        r.send($n, {
          state: s,
          id: o.id
        });
      });
      var a = o;
      return this.children.set(o.id, a), i.autoForward && this.forwardTo.add(o.id), o.onDone(function(s) {
        r.removeChild(o.id), r.send(pe(s, {
          origin: o.id
        }));
      }).start(), a;
    }, e.prototype.spawnBehavior = function(t, n) {
      var r = fu(t, {
        id: n,
        parent: this
      });
      return this.children.set(n, r), r;
    }, e.prototype.spawnPromise = function(t, n) {
      var r, o = this, i = false, a;
      t.then(function(l) {
        i || (a = l, o.removeChild(n), o.send(pe(Dt(n, l), {
          origin: n
        })));
      }, function(l) {
        if (!i) {
          o.removeChild(n);
          var c = dt(n, l);
          try {
            o.send(pe(c, {
              origin: n
            }));
          } catch (d) {
            Gc(l, d, n), o.devTools && o.devTools.send(c, o.state), o.machine.strict && o.stop();
          }
        }
      });
      var s = (r = {
        id: n,
        send: function() {
        },
        subscribe: function(l, c, d) {
          var m = gn(l, c, d), f2 = false;
          return t.then(function(p) {
            f2 || (m.next(p), !f2 && m.complete());
          }, function(p) {
            f2 || m.error(p);
          }), {
            unsubscribe: function() {
              return f2 = true;
            }
          };
        },
        stop: function() {
          i = true;
        },
        toJSON: function() {
          return {
            id: n
          };
        },
        getSnapshot: function() {
          return a;
        }
      }, r[Ye] = function() {
        return this;
      }, r);
      return this.children.set(n, s), s;
    }, e.prototype.spawnCallback = function(t, n) {
      var r, o = this, i = false, a = /* @__PURE__ */ new Set(), s = /* @__PURE__ */ new Set(), l, c = function(f2) {
        l = f2, s.forEach(function(p) {
          return p(f2);
        }), !i && o.send(pe(f2, {
          origin: n
        }));
      }, d;
      try {
        d = t(c, function(f2) {
          a.add(f2);
        });
      } catch (f2) {
        this.send(dt(n, f2));
      }
      if (So(d))
        return this.spawnPromise(d, n);
      var m = (r = {
        id: n,
        send: function(f2) {
          return a.forEach(function(p) {
            return p(f2);
          });
        },
        subscribe: function(f2) {
          var p = gn(f2);
          return s.add(p.next), {
            unsubscribe: function() {
              s.delete(p.next);
            }
          };
        },
        stop: function() {
          i = true, Y(d) && d();
        },
        toJSON: function() {
          return {
            id: n
          };
        },
        getSnapshot: function() {
          return l;
        }
      }, r[Ye] = function() {
        return this;
      }, r);
      return this.children.set(n, m), m;
    }, e.prototype.spawnObservable = function(t, n) {
      var r, o = this, i, a = t.subscribe(function(l) {
        i = l, o.send(pe(l, {
          origin: n
        }));
      }, function(l) {
        o.removeChild(n), o.send(pe(dt(n, l), {
          origin: n
        }));
      }, function() {
        o.removeChild(n), o.send(pe(Dt(n), {
          origin: n
        }));
      }), s = (r = {
        id: n,
        send: function() {
        },
        subscribe: function(l, c, d) {
          return t.subscribe(l, c, d);
        },
        stop: function() {
          return a.unsubscribe();
        },
        getSnapshot: function() {
          return i;
        },
        toJSON: function() {
          return {
            id: n
          };
        }
      }, r[Ye] = function() {
        return this;
      }, r);
      return this.children.set(n, s), s;
    }, e.prototype.spawnActor = function(t, n) {
      return this.children.set(n, t), t;
    }, e.prototype.spawnActivity = function(t) {
      var n = this.machine.options && this.machine.options.activities ? this.machine.options.activities[t.type] : void 0;
      if (!n) {
        ie || ue(false, "No implementation found for activity '".concat(t.type, "'"));
        return;
      }
      var r = n(this.state.context, t);
      this.spawnEffect(t.id, r);
    }, e.prototype.spawnEffect = function(t, n) {
      var r;
      this.children.set(t, (r = {
        id: t,
        send: function() {
        },
        subscribe: function() {
          return {
            unsubscribe: function() {
            }
          };
        },
        stop: n || void 0,
        getSnapshot: function() {
        },
        toJSON: function() {
          return {
            id: t
          };
        }
      }, r[Ye] = function() {
        return this;
      }, r));
    }, e.prototype.attachDev = function() {
      var t = Br();
      if (this.options.devTools && t) {
        if (t.__REDUX_DEVTOOLS_EXTENSION__) {
          var n = typeof this.options.devTools == "object" ? this.options.devTools : void 0;
          this.devTools = t.__REDUX_DEVTOOLS_EXTENSION__.connect(T(T({
            name: this.id,
            autoPause: true,
            stateSanitizer: function(r) {
              return {
                value: r.value,
                context: r.context,
                actions: r.actions
              };
            }
          }, n), {
            features: T({
              jump: false,
              skip: false
            }, n ? n.features : void 0)
          }), this.machine), this.devTools.init(this.state);
        }
        du(this);
      }
    }, e.prototype.toJSON = function() {
      return {
        id: this.id
      };
    }, e.prototype[Ye] = function() {
      return this;
    }, e.prototype.getSnapshot = function() {
      return this.status === ce.NotStarted ? this.initialState : this._state;
    }, e.defaultOptions = {
      execute: true,
      deferEvents: true,
      clock: {
        setTimeout: function(t, n) {
          return setTimeout(t, n);
        },
        clearTimeout: function(t) {
          return clearTimeout(t);
        }
      },
      logger: console.log.bind(console),
      devTools: false
    }, e.interpret = ra, e;
  }()
);
var mu = function(e) {
  return K(e) ? T(T({}, vr), {
    name: e
  }) : T(T(T({}, vr), {
    name: Bc()
  }), e);
};
function kt(e, t) {
  var n = mu(t);
  return Qc(function(r) {
    if (!ie) {
      var o = Ve(e) || Y(e);
      ue(!!r || o, 'Attempted to spawn an Actor (ID: "'.concat(Ve(e) ? e.id : "undefined", '") outside of a service. This will have no effect.'));
    }
    return r ? r.spawn(e, n.name, n) : Lr(e, n.name);
  });
}
function ra(e, t) {
  var n = new pu(e, t);
  return n;
}
function gu(e) {
  if (typeof e == "string") {
    var t = {
      type: e
    };
    return t.toString = function() {
      return e;
    }, t;
  }
  return e;
}
function rn(e) {
  return T(T({
    type: vn
  }, e), {
    toJSON: function() {
      e.onDone, e.onError;
      var t = Or(e, ["onDone", "onError"]);
      return T(T({}, t), {
        type: vn,
        src: gu(e.src)
      });
    }
  });
}
var ut = "";
var _r = "#";
var Mt = "*";
var st = {};
var lt = function(e) {
  return e[0] === _r;
};
var hu = function() {
  return {
    actions: {},
    guards: {},
    services: {},
    activities: {},
    delays: {}
  };
};
var yu = function(e, t, n) {
  var r = n.slice(0, -1).some(function(i) {
    return !("cond" in i) && !("in" in i) && (K(i.target) || Ve(i.target));
  }), o = t === ut ? "the transient event" : "event '".concat(t, "'");
  ue(!r, "One or more transitions for ".concat(o, " on state '").concat(e.id, "' are unreachable. ") + "Make sure that the default transition is the last one defined.");
};
var vu = (
  /** @class */
  function() {
    function e(t, n, r, o) {
      r === void 0 && (r = "context" in t ? t.context : void 0);
      var i = this, a;
      this.config = t, this._context = r, this.order = -1, this.__xstatenode = true, this.__cache = {
        events: void 0,
        relativeValue: /* @__PURE__ */ new Map(),
        initialStateValue: void 0,
        initialState: void 0,
        on: void 0,
        transitions: void 0,
        candidates: {},
        delayedTransitions: void 0
      }, this.idMap = {}, this.tags = [], this.options = Object.assign(hu(), n), this.parent = o == null ? void 0 : o.parent, this.key = this.config.key || (o == null ? void 0 : o.key) || this.config.id || "(machine)", this.machine = this.parent ? this.parent.machine : this, this.path = this.parent ? this.parent.path.concat(this.key) : [], this.delimiter = this.config.delimiter || (this.parent ? this.parent.delimiter : Ui), this.id = this.config.id || X([this.machine.key], H(this.path), false).join(this.delimiter), this.version = this.parent ? this.parent.version : this.config.version, this.type = this.config.type || (this.config.parallel ? "parallel" : this.config.states && Object.keys(this.config.states).length ? "compound" : this.config.history ? "history" : "atomic"), this.schema = this.parent ? this.machine.schema : (a = this.config.schema) !== null && a !== void 0 ? a : {}, this.description = this.config.description, ie || ue(!("parallel" in this.config), 'The "parallel" property is deprecated and will be removed in version 4.1. '.concat(this.config.parallel ? "Replace with `type: 'parallel'`" : "Use `type: '".concat(this.type, "'`"), " in the config for state node '").concat(this.id, "' instead.")), this.initial = this.config.initial, this.states = this.config.states ? Ft(this.config.states, function(c, d) {
        var m, f2 = new e(c, {}, void 0, {
          parent: i,
          key: d
        });
        return Object.assign(i.idMap, T((m = {}, m[f2.id] = f2, m), f2.idMap)), f2;
      }) : st;
      var s = 0;
      function l(c) {
        var d, m;
        c.order = s++;
        try {
          for (var f2 = j(Xi(c)), p = f2.next(); !p.done; p = f2.next()) {
            var y = p.value;
            l(y);
          }
        } catch (_) {
          d = {
            error: _
          };
        } finally {
          try {
            p && !p.done && (m = f2.return) && m.call(f2);
          } finally {
            if (d) throw d.error;
          }
        }
      }
      l(this), this.history = this.config.history === true ? "shallow" : this.config.history || false, this._transient = !!this.config.always || (this.config.on ? Array.isArray(this.config.on) ? this.config.on.some(function(c) {
        var d = c.event;
        return d === ut;
      }) : ut in this.config.on : false), this.strict = !!this.config.strict, this.onEntry = Ue(this.config.entry || this.config.onEntry).map(function(c) {
        return ft(c);
      }), this.onExit = Ue(this.config.exit || this.config.onExit).map(function(c) {
        return ft(c);
      }), this.meta = this.config.meta, this.doneData = this.type === "final" ? this.config.data : void 0, this.invoke = Ue(this.config.invoke).map(function(c, d) {
        var m, f2;
        if (Ve(c)) {
          var p = nn(i.id, d);
          return i.machine.options.services = T((m = {}, m[p] = c, m), i.machine.options.services), rn({
            src: p,
            id: p
          });
        } else if (K(c.src)) {
          var p = c.id || nn(i.id, d);
          return rn(T(T({}, c), {
            id: p,
            src: c.src
          }));
        } else if (Ve(c.src) || Y(c.src)) {
          var p = c.id || nn(i.id, d);
          return i.machine.options.services = T((f2 = {}, f2[p] = c.src, f2), i.machine.options.services), rn(T(T({
            id: p
          }, c), {
            src: p
          }));
        } else {
          var y = c.src;
          return rn(T(T({
            id: nn(i.id, d)
          }, c), {
            src: y
          }));
        }
      }), this.activities = Ue(this.config.activities).concat(this.invoke).map(function(c) {
        return xn(c);
      }), this.transition = this.transition.bind(this), this.tags = Ue(this.config.tags);
    }
    return e.prototype._init = function() {
      this.__cache.transitions || ea(this).forEach(function(t) {
        return t.on;
      });
    }, e.prototype.withConfig = function(t, n) {
      var r = this.options, o = r.actions, i = r.activities, a = r.guards, s = r.services, l = r.delays;
      return new e(this.config, {
        actions: T(T({}, o), t.actions),
        activities: T(T({}, i), t.activities),
        guards: T(T({}, a), t.guards),
        services: T(T({}, s), t.services),
        delays: T(T({}, l), t.delays)
      }, n ?? this.context);
    }, e.prototype.withContext = function(t) {
      return new e(this.config, this.options, t);
    }, Object.defineProperty(e.prototype, "context", {
      get: function() {
        return Y(this._context) ? this._context() : this._context;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "definition", {
      /**
       * The well-structured state node definition.
       */
      get: function() {
        return {
          id: this.id,
          key: this.key,
          version: this.version,
          context: this.context,
          type: this.type,
          initial: this.initial,
          history: this.history,
          states: Ft(this.states, function(t) {
            return t.definition;
          }),
          on: this.on,
          transitions: this.transitions,
          entry: this.onEntry,
          exit: this.onExit,
          activities: this.activities || [],
          meta: this.meta,
          order: this.order || -1,
          data: this.doneData,
          invoke: this.invoke,
          description: this.description,
          tags: this.tags
        };
      },
      enumerable: false,
      configurable: true
    }), e.prototype.toJSON = function() {
      return this.definition;
    }, Object.defineProperty(e.prototype, "on", {
      /**
       * The mapping of events to transitions.
       */
      get: function() {
        if (this.__cache.on)
          return this.__cache.on;
        var t = this.transitions;
        return this.__cache.on = t.reduce(function(n, r) {
          return n[r.eventType] = n[r.eventType] || [], n[r.eventType].push(r), n;
        }, {});
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "after", {
      get: function() {
        return this.__cache.delayedTransitions || (this.__cache.delayedTransitions = this.getDelayedTransitions(), this.__cache.delayedTransitions);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "transitions", {
      /**
       * All the transitions that can be taken from this state node.
       */
      get: function() {
        return this.__cache.transitions || (this.__cache.transitions = this.formatTransitions(), this.__cache.transitions);
      },
      enumerable: false,
      configurable: true
    }), e.prototype.getCandidates = function(t) {
      if (this.__cache.candidates[t])
        return this.__cache.candidates[t];
      var n = t === ut, r = this.transitions.filter(function(o) {
        var i = o.eventType === t;
        return n ? i : i || o.eventType === Mt;
      });
      return this.__cache.candidates[t] = r, r;
    }, e.prototype.getDelayedTransitions = function() {
      var t = this, n = this.config.after;
      if (!n)
        return [];
      var r = function(i, a) {
        var s = Y(i) ? "".concat(t.id, ":delay[").concat(a, "]") : i, l = qi(s, t.id);
        return t.onEntry.push(_t(l, {
          delay: i
        })), t.onExit.push(Vi(l)), l;
      }, o = vt(n) ? n.map(function(i, a) {
        var s = r(i.delay, a);
        return T(T({}, i), {
          event: s
        });
      }) : oe(Object.keys(n).map(function(i, a) {
        var s = n[i], l = K(s) ? {
          target: s
        } : s, c = isNaN(+i) ? i : +i, d = r(c, a);
        return Ue(l).map(function(m) {
          return T(T({}, m), {
            event: d,
            delay: c
          });
        });
      }));
      return o.map(function(i) {
        var a = i.delay;
        return T(T({}, t.formatTransition(i)), {
          delay: a
        });
      });
    }, e.prototype.getStateNodes = function(t) {
      var n, r = this;
      if (!t)
        return [];
      var o = t instanceof Oe ? t.value : xt(t, this.delimiter);
      if (K(o)) {
        var i = this.getStateNode(o).initial;
        return i !== void 0 ? this.getStateNodes((n = {}, n[o] = i, n)) : [this, this.states[o]];
      }
      var a = Object.keys(o), s = [this];
      return s.push.apply(s, X([], H(oe(a.map(function(l) {
        return r.getStateNode(l).getStateNodes(o[l]);
      }))), false)), s;
    }, e.prototype.handles = function(t) {
      var n = Fi(t);
      return this.events.includes(n);
    }, e.prototype.resolveState = function(t) {
      var n = t instanceof Oe ? t : Oe.create(t), r = Array.from($t([], this.getStateNodes(n.value)));
      return new Oe(T(T({}, n), {
        value: this.resolve(n.value),
        configuration: r,
        done: hn(r, this),
        tags: bo(r),
        machine: this.machine
      }));
    }, e.prototype.transitionLeafNode = function(t, n, r) {
      var o = this.getStateNode(t), i = o.next(n, r);
      return !i || !i.transitions.length ? this.next(n, r) : i;
    }, e.prototype.transitionCompoundNode = function(t, n, r) {
      var o = Object.keys(t), i = this.getStateNode(o[0]), a = i._transition(t[o[0]], n, r);
      return !a || !a.transitions.length ? this.next(n, r) : a;
    }, e.prototype.transitionParallelNode = function(t, n, r) {
      var o, i, a = {};
      try {
        for (var s = j(Object.keys(t)), l = s.next(); !l.done; l = s.next()) {
          var c = l.value, d = t[c];
          if (d) {
            var m = this.getStateNode(c), f2 = m._transition(d, n, r);
            f2 && (a[c] = f2);
          }
        }
      } catch (h2) {
        o = {
          error: h2
        };
      } finally {
        try {
          l && !l.done && (i = s.return) && i.call(s);
        } finally {
          if (o) throw o.error;
        }
      }
      var p = Object.keys(a).map(function(h2) {
        return a[h2];
      }), y = oe(p.map(function(h2) {
        return h2.transitions;
      })), _ = p.some(function(h2) {
        return h2.transitions.length > 0;
      });
      if (!_)
        return this.next(n, r);
      var b = oe(Object.keys(a).map(function(h2) {
        return a[h2].configuration;
      }));
      return {
        transitions: y,
        exitSet: oe(p.map(function(h2) {
          return h2.exitSet;
        })),
        configuration: b,
        source: n,
        actions: oe(Object.keys(a).map(function(h2) {
          return a[h2].actions;
        }))
      };
    }, e.prototype._transition = function(t, n, r) {
      return K(t) ? this.transitionLeafNode(t, n, r) : Object.keys(t).length === 1 ? this.transitionCompoundNode(t, n, r) : this.transitionParallelNode(t, n, r);
    }, e.prototype.getTransitionData = function(t, n) {
      return this._transition(t.value, t, pe(n));
    }, e.prototype.next = function(t, n) {
      var r, o, i = this, a = n.name, s = [], l = [], c;
      try {
        for (var d = j(this.getCandidates(a)), m = d.next(); !m.done; m = d.next()) {
          var f2 = m.value, p = f2.cond, y = f2.in, _ = t.context, b = y ? K(y) && lt(y) ? (
            // Check if in state by ID
            t.matches(xt(this.getStateNodeById(y).path, this.delimiter))
          ) : (
            // Check if in state by relative grandparent
            xr(xt(y, this.delimiter), Uc(this.path.slice(0, -2))(t.value))
          ) : true, h2 = false;
          try {
            h2 = !p || xi(this.machine, p, _, n, t);
          } catch (w) {
            throw new Error("Unable to evaluate guard '".concat(p.name || p.type, "' in transition for event '").concat(a, "' in state node '").concat(this.id, `':
`).concat(w.message));
          }
          if (h2 && b) {
            f2.target !== void 0 && (l = f2.target), s.push.apply(s, X([], H(f2.actions), false)), c = f2;
            break;
          }
        }
      } catch (w) {
        r = {
          error: w
        };
      } finally {
        try {
          m && !m.done && (o = d.return) && o.call(d);
        } finally {
          if (r) throw r.error;
        }
      }
      if (c) {
        if (!l.length)
          return {
            transitions: [c],
            exitSet: [],
            configuration: t.value ? [this] : [],
            source: t,
            actions: s
          };
        var S = oe(l.map(function(w) {
          return i.getRelativeStateNodes(w, t.historyValue);
        })), v = !!c.internal;
        return {
          transitions: [c],
          exitSet: v ? [] : oe(l.map(function(w) {
            return i.getPotentiallyReenteringNodes(w);
          })),
          configuration: S,
          source: t,
          actions: s
        };
      }
    }, e.prototype.getPotentiallyReenteringNodes = function(t) {
      if (this.order < t.order)
        return [this];
      for (var n = [], r = this, o = t; r && r !== o; )
        n.push(r), r = r.parent;
      return r !== o ? [] : (n.push(o), n);
    }, e.prototype.getActions = function(t, n, r, o, i, a, s) {
      var l, c, d, m, f2 = this, p = a ? $t([], this.getStateNodes(a.value)) : [], y = /* @__PURE__ */ new Set();
      try {
        for (var _ = j(Array.from(t).sort(function($, B) {
          return $.order - B.order;
        })), b = _.next(); !b.done; b = _.next()) {
          var h2 = b.value;
          (!Rt(p, h2) || Rt(r.exitSet, h2) || h2.parent && y.has(h2.parent)) && y.add(h2);
        }
      } catch ($) {
        l = {
          error: $
        };
      } finally {
        try {
          b && !b.done && (c = _.return) && c.call(_);
        } finally {
          if (l) throw l.error;
        }
      }
      try {
        for (var S = j(p), v = S.next(); !v.done; v = S.next()) {
          var h2 = v.value;
          (!Rt(t, h2) || Rt(r.exitSet, h2.parent)) && r.exitSet.push(h2);
        }
      } catch ($) {
        d = {
          error: $
        };
      } finally {
        try {
          v && !v.done && (m = S.return) && m.call(S);
        } finally {
          if (d) throw d.error;
        }
      }
      r.exitSet.sort(function($, B) {
        return B.order - $.order;
      });
      var w = Array.from(y).sort(function($, B) {
        return $.order - B.order;
      }), E = new Set(r.exitSet), I = oe(w.map(function($) {
        var B = [];
        if ($.type !== "final")
          return B;
        var z = $.parent;
        if (!z.parent)
          return B;
        B.push(
          Ot($.id, $.doneData),
          // TODO: deprecate - final states should not emit done events for their own state.
          Ot(z.id, $.doneData ? Sn($.doneData, o, i) : void 0)
        );
        var se = z.parent;
        return se.type === "parallel" && Wt(se).every(function(ye) {
          return hn(r.configuration, ye);
        }) && B.push(Ot(se.id)), B;
      })), P = w.map(function($) {
        var B = $.onEntry, z = $.activities.map(function(se) {
          return ji(se);
        });
        return {
          type: "entry",
          actions: ze(s ? X(X([], H(B), false), H(z), false) : X(X([], H(z), false), H(B), false), f2.machine.options.actions)
        };
      }).concat({
        type: "state_done",
        actions: I.map(function($) {
          return Li($);
        })
      }), k = Array.from(E).map(function($) {
        return {
          type: "exit",
          actions: ze(X(X([], H($.onExit), false), H($.activities.map(function(B) {
            return Hi(B);
          })), false), f2.machine.options.actions)
        };
      }), U = k.concat({
        type: "transition",
        actions: ze(r.actions, this.machine.options.actions)
      }).concat(P);
      if (n) {
        var O = ze(oe(X([], H(t), false).sort(function($, B) {
          return B.order - $.order;
        }).map(function($) {
          return $.onExit;
        })), this.machine.options.actions).filter(function($) {
          return !hr($);
        });
        return U.concat({
          type: "stop",
          actions: O
        });
      }
      return U;
    }, e.prototype.transition = function(t, n, r, o) {
      t === void 0 && (t = this.initialState);
      var i = pe(n), a;
      if (t instanceof Oe)
        a = r === void 0 ? t : this.resolveState(Oe.from(t, r));
      else {
        var s = K(t) ? this.resolve(_n(this.getResolvedPath(t))) : this.resolve(t), l = r ?? this.machine.context;
        a = this.resolveState(Oe.from(s, l));
      }
      if (!ie && i.name === Mt)
        throw new Error("An event cannot have the wildcard type ('".concat(Mt, "')"));
      if (this.strict && !this.events.includes(i.name) && !Oc(i.name))
        throw new Error("Machine '".concat(this.id, "' does not accept event '").concat(i.name, "'"));
      var c = this._transition(a.value, a, i) || {
        transitions: [],
        configuration: [],
        exitSet: [],
        source: a,
        actions: []
      }, d = $t([], this.getStateNodes(a.value)), m = c.configuration.length ? $t(d, c.configuration) : d;
      return c.configuration = X([], H(m), false), this.resolveTransition(c, a, a.context, o, i);
    }, e.prototype.resolveRaisedTransition = function(t, n, r, o) {
      var i, a = t.actions;
      return t = this.transition(t, n, void 0, o), t._event = r, t.event = r.data, (i = t.actions).unshift.apply(i, X([], H(a), false)), t;
    }, e.prototype.resolveTransition = function(t, n, r, o, i) {
      var a, s, l, c, d = this;
      i === void 0 && (i = nt);
      var m = t.configuration, f2 = !n || t.transitions.length > 0, p = f2 ? t.configuration : n ? n.configuration : [], y = hn(p, this), _ = f2 ? ru(this.machine, m) : void 0, b = n ? n.historyValue ? n.historyValue : t.source ? this.machine.historyValue(n.value) : void 0 : void 0, h2 = this.getActions(new Set(p), y, t, r, i, n, o), S = n ? T({}, n.activities) : {};
      try {
        for (var v = j(h2), w = v.next(); !w.done; w = v.next()) {
          var E = w.value;
          try {
            for (var I = (l = void 0, j(E.actions)), P = I.next(); !P.done; P = I.next()) {
              var k = P.value;
              k.type === yn ? S[k.activity.id || k.activity.type] = k : k.type === Un && (S[k.activity.id || k.activity.type] = false);
            }
          } catch (R) {
            l = {
              error: R
            };
          } finally {
            try {
              P && !P.done && (c = I.return) && c.call(I);
            } finally {
              if (l) throw l.error;
            }
          }
        }
      } catch (R) {
        a = {
          error: R
        };
      } finally {
        try {
          w && !w.done && (s = v.return) && s.call(v);
        } finally {
          if (a) throw a.error;
        }
      }
      var U = H(Gt(this, n, r, i, h2, o, this.machine.config.predictableActionArguments || this.machine.config.preserveActionOrder), 2), O = U[0], $ = U[1], B = H(Rc(O, hr), 2), z = B[0], se = B[1], ye = O.filter(function(R) {
        var Xe;
        return R.type === yn && ((Xe = R.activity) === null || Xe === void 0 ? void 0 : Xe.type) === vn;
      }), we = ye.reduce(function(R, Xe) {
        return R[Xe.activity.id] = Xc(Xe.activity, d.machine, $, i), R;
      }, n ? T({}, n.children) : {}), de = new Oe({
        value: _ || n.value,
        context: $,
        _event: i,
        // Persist _sessionid between states
        _sessionid: n ? n._sessionid : null,
        historyValue: _ ? b ? xc(b, _) : void 0 : n ? n.historyValue : void 0,
        history: !_ || t.source ? n : void 0,
        actions: _ ? se : [],
        activities: _ ? S : n ? n.activities : {},
        events: [],
        configuration: p,
        transitions: t.transitions,
        children: we,
        done: y,
        tags: bo(p),
        machine: this
      }), ge = r !== $;
      de.changed = i.name === $n || ge;
      var fe = de.history;
      fe && delete fe.history;
      var it = !y && (this._transient || m.some(function(R) {
        return R._transient;
      }));
      if (!f2 && (!it || i.name === ut))
        return de;
      var be = de;
      if (!y)
        for (it && (be = this.resolveRaisedTransition(be, {
          type: Pi
        }, i, o)); z.length; ) {
          var It = z.shift();
          be = this.resolveRaisedTransition(be, It._event, i, o);
        }
      var er = be.changed || (fe ? !!be.actions.length || ge || typeof fe.value != typeof be.value || !na(be.value, fe.value) : void 0);
      return be.changed = er, be.history = fe, be;
    }, e.prototype.getStateNode = function(t) {
      if (lt(t))
        return this.machine.getStateNodeById(t);
      if (!this.states)
        throw new Error("Unable to retrieve child state '".concat(t, "' from '").concat(this.id, "'; no child states exist."));
      var n = this.states[t];
      if (!n)
        throw new Error("Child state '".concat(t, "' does not exist on '").concat(this.id, "'"));
      return n;
    }, e.prototype.getStateNodeById = function(t) {
      var n = lt(t) ? t.slice(_r.length) : t;
      if (n === this.id)
        return this;
      var r = this.machine.idMap[n];
      if (!r)
        throw new Error("Child state node '#".concat(n, "' does not exist on machine '").concat(this.id, "'"));
      return r;
    }, e.prototype.getStateNodeByPath = function(t) {
      if (typeof t == "string" && lt(t))
        try {
          return this.getStateNodeById(t.slice(1));
        } catch {
        }
      for (var n = gr(t, this.delimiter).slice(), r = this; n.length; ) {
        var o = n.shift();
        if (!o.length)
          break;
        r = r.getStateNode(o);
      }
      return r;
    }, e.prototype.resolve = function(t) {
      var n, r = this;
      if (!t)
        return this.initialStateValue || st;
      switch (this.type) {
        case "parallel":
          return Ft(this.initialStateValue, function(i, a) {
            return i ? r.getStateNode(a).resolve(t[a] || i) : st;
          });
        case "compound":
          if (K(t)) {
            var o = this.getStateNode(t);
            return o.type === "parallel" || o.type === "compound" ? (n = {}, n[t] = o.initialStateValue, n) : t;
          }
          return Object.keys(t).length ? Ft(t, function(i, a) {
            return i ? r.getStateNode(a).resolve(i) : st;
          }) : this.initialStateValue || {};
        default:
          return t || st;
      }
    }, e.prototype.getResolvedPath = function(t) {
      if (lt(t)) {
        var n = this.machine.idMap[t.slice(_r.length)];
        if (!n)
          throw new Error("Unable to find state node '".concat(t, "'"));
        return n.path;
      }
      return gr(t, this.delimiter);
    }, Object.defineProperty(e.prototype, "initialStateValue", {
      get: function() {
        var t;
        if (this.__cache.initialStateValue)
          return this.__cache.initialStateValue;
        var n;
        if (this.type === "parallel")
          n = _o(this.states, function(r) {
            return r.initialStateValue || st;
          }, function(r) {
            return r.type !== "history";
          });
        else if (this.initial !== void 0) {
          if (!this.states[this.initial])
            throw new Error("Initial state '".concat(this.initial, "' not found on '").concat(this.key, "'"));
          n = Cn(this.states[this.initial]) ? this.initial : (t = {}, t[this.initial] = this.states[this.initial].initialStateValue, t);
        } else
          n = {};
        return this.__cache.initialStateValue = n, this.__cache.initialStateValue;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.getInitialState = function(t, n) {
      this._init();
      var r = this.getStateNodes(t);
      return this.resolveTransition({
        configuration: r,
        exitSet: [],
        transitions: [],
        source: void 0,
        actions: []
      }, void 0, n ?? this.machine.context, void 0);
    }, Object.defineProperty(e.prototype, "initialState", {
      /**
       * The initial State instance, which includes all actions to be executed from
       * entering the initial state.
       */
      get: function() {
        var t = this.initialStateValue;
        if (!t)
          throw new Error("Cannot retrieve initial state from simple state '".concat(this.id, "'."));
        return this.getInitialState(t);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "target", {
      /**
       * The target state value of the history state node, if it exists. This represents the
       * default state value to transition to if no history value exists yet.
       */
      get: function() {
        var t;
        if (this.type === "history") {
          var n = this.config;
          K(n.target) ? t = lt(n.target) ? _n(this.machine.getStateNodeById(n.target).path.slice(this.path.length - 1)) : n.target : t = n.target;
        }
        return t;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.getRelativeStateNodes = function(t, n, r) {
      return r === void 0 && (r = true), r ? t.type === "history" ? t.resolveHistory(n) : t.initialStateNodes : [t];
    }, Object.defineProperty(e.prototype, "initialStateNodes", {
      get: function() {
        var t = this;
        if (Cn(this))
          return [this];
        if (this.type === "compound" && !this.initial)
          return ie || ue(false, "Compound state node '".concat(this.id, "' has no initial state.")), [this];
        var n = mn(this.initialStateValue);
        return oe(n.map(function(r) {
          return t.getFromRelativePath(r);
        }));
      },
      enumerable: false,
      configurable: true
    }), e.prototype.getFromRelativePath = function(t) {
      if (!t.length)
        return [this];
      var n = H(t), r = n[0], o = n.slice(1);
      if (!this.states)
        throw new Error("Cannot retrieve subPath '".concat(r, "' from node with no states"));
      var i = this.getStateNode(r);
      if (i.type === "history")
        return i.resolveHistory();
      if (!this.states[r])
        throw new Error("Child state '".concat(r, "' does not exist on '").concat(this.id, "'"));
      return this.states[r].getFromRelativePath(o);
    }, e.prototype.historyValue = function(t) {
      if (Object.keys(this.states).length)
        return {
          current: t || this.initialStateValue,
          states: _o(this.states, function(n, r) {
            if (!t)
              return n.historyValue();
            var o = K(t) ? void 0 : t[r];
            return n.historyValue(o || n.initialStateValue);
          }, function(n) {
            return !n.history;
          })
        };
    }, e.prototype.resolveHistory = function(t) {
      var n = this;
      if (this.type !== "history")
        return [this];
      var r = this.parent;
      if (!t) {
        var o = this.target;
        return o ? oe(mn(o).map(function(a) {
          return r.getFromRelativePath(a);
        })) : r.initialStateNodes;
      }
      var i = Fc(r.path, "states")(t).current;
      return K(i) ? [r.getStateNode(i)] : oe(mn(i).map(function(a) {
        return n.history === "deep" ? r.getFromRelativePath(a) : [r.states[a[0]]];
      }));
    }, Object.defineProperty(e.prototype, "stateIds", {
      /**
       * All the state node IDs of this state node and its descendant state nodes.
       */
      get: function() {
        var t = this, n = oe(Object.keys(this.states).map(function(r) {
          return t.states[r].stateIds;
        }));
        return [this.id].concat(n);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "events", {
      /**
       * All the event types accepted by this state node and its descendants.
       */
      get: function() {
        var t, n, r, o;
        if (this.__cache.events)
          return this.__cache.events;
        var i = this.states, a = new Set(this.ownEvents);
        if (i)
          try {
            for (var s = j(Object.keys(i)), l = s.next(); !l.done; l = s.next()) {
              var c = l.value, d = i[c];
              if (d.states)
                try {
                  for (var m = (r = void 0, j(d.events)), f2 = m.next(); !f2.done; f2 = m.next()) {
                    var p = f2.value;
                    a.add("".concat(p));
                  }
                } catch (y) {
                  r = {
                    error: y
                  };
                } finally {
                  try {
                    f2 && !f2.done && (o = m.return) && o.call(m);
                  } finally {
                    if (r) throw r.error;
                  }
                }
            }
          } catch (y) {
            t = {
              error: y
            };
          } finally {
            try {
              l && !l.done && (n = s.return) && n.call(s);
            } finally {
              if (t) throw t.error;
            }
          }
        return this.__cache.events = Array.from(a);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "ownEvents", {
      /**
       * All the events that have transitions directly from this state node.
       *
       * Excludes any inert events.
       */
      get: function() {
        var t = new Set(this.transitions.filter(function(n) {
          return !(!n.target && !n.actions.length && n.internal);
        }).map(function(n) {
          return n.eventType;
        }));
        return Array.from(t);
      },
      enumerable: false,
      configurable: true
    }), e.prototype.resolveTarget = function(t) {
      var n = this;
      if (t !== void 0)
        return t.map(function(r) {
          if (!K(r))
            return r;
          var o = r[0] === n.delimiter;
          if (o && !n.parent)
            return n.getStateNodeByPath(r.slice(1));
          var i = o ? n.key + r : r;
          if (n.parent)
            try {
              var a = n.parent.getStateNodeByPath(i);
              return a;
            } catch (s) {
              throw new Error("Invalid transition definition for state node '".concat(n.id, `':
`).concat(s.message));
            }
          else
            return n.getStateNodeByPath(i);
        });
    }, e.prototype.formatTransition = function(t) {
      var n = this, r = zc(t.target), o = "internal" in t ? t.internal : r ? r.some(function(l) {
        return K(l) && l[0] === n.delimiter;
      }) : true, i = this.machine.options.guards, a = this.resolveTarget(r), s = T(T({}, t), {
        actions: ze(Ue(t.actions)),
        cond: Ri(t.cond, i),
        target: a,
        source: this,
        internal: o,
        eventType: t.event,
        toJSON: function() {
          return T(T({}, s), {
            target: s.target ? s.target.map(function(l) {
              return "#".concat(l.id);
            }) : void 0,
            source: "#".concat(n.id)
          });
        }
      });
      return s;
    }, e.prototype.formatTransitions = function() {
      var t, n, r = this, o;
      if (!this.config.on)
        o = [];
      else if (Array.isArray(this.config.on))
        o = this.config.on;
      else {
        var i = this.config.on, a = Mt, s = i[a], l = s === void 0 ? [] : s, c = Or(i, [typeof a == "symbol" ? a : a + ""]);
        o = oe(Object.keys(c).map(function(S) {
          !ie && S === ut && ue(false, "Empty string transition configs (e.g., `{ on: { '': ... }}`) for transient transitions are deprecated. Specify the transition in the `{ always: ... }` property instead. " + 'Please check the `on` configuration for "#'.concat(r.id, '".'));
          var v = at(S, c[S]);
          return ie || yu(r, S, v), v;
        }).concat(at(Mt, l)));
      }
      var d = this.config.always ? at("", this.config.always) : [], m = this.config.onDone ? at(String(Ot(this.id)), this.config.onDone) : [];
      ie || ue(!(this.config.onDone && !this.parent), 'Root nodes cannot have an ".onDone" transition. Please check the config of "'.concat(this.id, '".'));
      var f2 = oe(this.invoke.map(function(S) {
        var v = [];
        return S.onDone && v.push.apply(v, X([], H(at(String(Dt(S.id)), S.onDone)), false)), S.onError && v.push.apply(v, X([], H(at(String(dt(S.id)), S.onError)), false)), v;
      })), p = this.after, y = oe(X(X(X(X([], H(m), false), H(f2), false), H(o), false), H(d), false).map(function(S) {
        return Ue(S).map(function(v) {
          return r.formatTransition(v);
        });
      }));
      try {
        for (var _ = j(p), b = _.next(); !b.done; b = _.next()) {
          var h2 = b.value;
          y.push(h2);
        }
      } catch (S) {
        t = {
          error: S
        };
      } finally {
        try {
          b && !b.done && (n = _.return) && n.call(_);
        } finally {
          if (t) throw t.error;
        }
      }
      return y;
    }, e;
  }()
);
var Ao = false;
function St(e, t) {
  return !ie && !("predictableActionArguments" in e) && !Ao && (Ao = true, console.warn("It is highly recommended to set `predictableActionArguments` to `true` when using `createMachine`. https://xstate.js.org/docs/guides/actions.html")), new vu(e, t);
}
var Le = Yi;
var Dn = Gi;
var _u = Ji;
var on = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function oa(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function Su(e, t) {
  for (var n = -1, r = e == null ? 0 : e.length, o = Array(r); ++n < r; )
    o[n] = t(e[n], n, e);
  return o;
}
var ia = Su;
function wu() {
  this.__data__ = [], this.size = 0;
}
var bu = wu;
function Cu(e, t) {
  return e === t || e !== e && t !== t;
}
var Kt = Cu;
var Au = Kt;
function Eu(e, t) {
  for (var n = e.length; n--; )
    if (Au(e[n][0], t))
      return n;
  return -1;
}
var Ln = Eu;
var Tu = Ln;
var Iu = Array.prototype;
var Pu = Iu.splice;
function ku(e) {
  var t = this.__data__, n = Tu(t, e);
  if (n < 0)
    return false;
  var r = t.length - 1;
  return n == r ? t.pop() : Pu.call(t, n, 1), --this.size, true;
}
var Mu = ku;
var Nu = Ln;
function Uu(e) {
  var t = this.__data__, n = Nu(t, e);
  return n < 0 ? void 0 : t[n][1];
}
var Fu = Uu;
var Ou = Ln;
function $u(e) {
  return Ou(this.__data__, e) > -1;
}
var Ru = $u;
var xu = Ln;
function Du(e, t) {
  var n = this.__data__, r = xu(n, e);
  return r < 0 ? (++this.size, n.push([e, t])) : n[r][1] = t, this;
}
var Lu = Du;
var Bu = bu;
var zu = Mu;
var Gu = Fu;
var Wu = Ru;
var Vu = Lu;
function wt(e) {
  var t = -1, n = e == null ? 0 : e.length;
  for (this.clear(); ++t < n; ) {
    var r = e[t];
    this.set(r[0], r[1]);
  }
}
wt.prototype.clear = Bu;
wt.prototype.delete = zu;
wt.prototype.get = Gu;
wt.prototype.has = Wu;
wt.prototype.set = Vu;
var Bn = wt;
var ju = Bn;
function Hu() {
  this.__data__ = new ju(), this.size = 0;
}
var Ku = Hu;
function Yu(e) {
  var t = this.__data__, n = t.delete(e);
  return this.size = t.size, n;
}
var qu = Yu;
function Ju(e) {
  return this.__data__.get(e);
}
var Zu = Ju;
function Qu(e) {
  return this.__data__.has(e);
}
var Xu = Qu;
var ed = typeof on == "object" && on && on.Object === Object && on;
var aa = ed;
var td = aa;
var nd = typeof self == "object" && self && self.Object === Object && self;
var rd = td || nd || Function("return this")();
var $e = rd;
var od = $e;
var id = od.Symbol;
var zn = id;
var Eo = zn;
var sa = Object.prototype;
var ad = sa.hasOwnProperty;
var sd = sa.toString;
var Nt = Eo ? Eo.toStringTag : void 0;
function ld(e) {
  var t = ad.call(e, Nt), n = e[Nt];
  try {
    e[Nt] = void 0;
    var r = true;
  } catch {
  }
  var o = sd.call(e);
  return r && (t ? e[Nt] = n : delete e[Nt]), o;
}
var cd = ld;
var ud = Object.prototype;
var dd = ud.toString;
function fd(e) {
  return dd.call(e);
}
var pd = fd;
var To = zn;
var md = cd;
var gd = pd;
var hd = "[object Null]";
var yd = "[object Undefined]";
var Io = To ? To.toStringTag : void 0;
function vd(e) {
  return e == null ? e === void 0 ? yd : hd : Io && Io in Object(e) ? md(e) : gd(e);
}
var bt = vd;
function _d(e) {
  var t = typeof e;
  return e != null && (t == "object" || t == "function");
}
var He = _d;
var Sd = bt;
var wd = He;
var bd = "[object AsyncFunction]";
var Cd = "[object Function]";
var Ad = "[object GeneratorFunction]";
var Ed = "[object Proxy]";
function Td(e) {
  if (!wd(e))
    return false;
  var t = Sd(e);
  return t == Cd || t == Ad || t == bd || t == Ed;
}
var zr = Td;
var Id = $e;
var Pd = Id["__core-js_shared__"];
var kd = Pd;
var or = kd;
var Po = function() {
  var e = /[^.]+$/.exec(or && or.keys && or.keys.IE_PROTO || "");
  return e ? "Symbol(src)_1." + e : "";
}();
function Md(e) {
  return !!Po && Po in e;
}
var Nd = Md;
var Ud = Function.prototype;
var Fd = Ud.toString;
function Od(e) {
  if (e != null) {
    try {
      return Fd.call(e);
    } catch {
    }
    try {
      return e + "";
    } catch {
    }
  }
  return "";
}
var la = Od;
var $d = zr;
var Rd = Nd;
var xd = He;
var Dd = la;
var Ld = /[\\^$.*+?()[\]{}|]/g;
var Bd = /^\[object .+?Constructor\]$/;
var zd = Function.prototype;
var Gd = Object.prototype;
var Wd = zd.toString;
var Vd = Gd.hasOwnProperty;
var jd = RegExp(
  "^" + Wd.call(Vd).replace(Ld, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
);
function Hd(e) {
  if (!xd(e) || Rd(e))
    return false;
  var t = $d(e) ? jd : Bd;
  return t.test(Dd(e));
}
var Kd = Hd;
function Yd(e, t) {
  return e == null ? void 0 : e[t];
}
var qd = Yd;
var Jd = Kd;
var Zd = qd;
function Qd(e, t) {
  var n = Zd(e, t);
  return Jd(n) ? n : void 0;
}
var rt = Qd;
var Xd = rt;
var ef = $e;
var tf = Xd(ef, "Map");
var Gr = tf;
var nf = rt;
var rf = nf(Object, "create");
var Gn = rf;
var ko = Gn;
function of2() {
  this.__data__ = ko ? ko(null) : {}, this.size = 0;
}
var af = of2;
function sf(e) {
  var t = this.has(e) && delete this.__data__[e];
  return this.size -= t ? 1 : 0, t;
}
var lf = sf;
var cf = Gn;
var uf = "__lodash_hash_undefined__";
var df = Object.prototype;
var ff = df.hasOwnProperty;
function pf(e) {
  var t = this.__data__;
  if (cf) {
    var n = t[e];
    return n === uf ? void 0 : n;
  }
  return ff.call(t, e) ? t[e] : void 0;
}
var mf = pf;
var gf = Gn;
var hf = Object.prototype;
var yf = hf.hasOwnProperty;
function vf(e) {
  var t = this.__data__;
  return gf ? t[e] !== void 0 : yf.call(t, e);
}
var _f = vf;
var Sf = Gn;
var wf = "__lodash_hash_undefined__";
function bf(e, t) {
  var n = this.__data__;
  return this.size += this.has(e) ? 0 : 1, n[e] = Sf && t === void 0 ? wf : t, this;
}
var Cf = bf;
var Af = af;
var Ef = lf;
var Tf = mf;
var If = _f;
var Pf = Cf;
function Ct(e) {
  var t = -1, n = e == null ? 0 : e.length;
  for (this.clear(); ++t < n; ) {
    var r = e[t];
    this.set(r[0], r[1]);
  }
}
Ct.prototype.clear = Af;
Ct.prototype.delete = Ef;
Ct.prototype.get = Tf;
Ct.prototype.has = If;
Ct.prototype.set = Pf;
var kf = Ct;
var Mo = kf;
var Mf = Bn;
var Nf = Gr;
function Uf() {
  this.size = 0, this.__data__ = {
    hash: new Mo(),
    map: new (Nf || Mf)(),
    string: new Mo()
  };
}
var Ff = Uf;
function Of(e) {
  var t = typeof e;
  return t == "string" || t == "number" || t == "symbol" || t == "boolean" ? e !== "__proto__" : e === null;
}
var $f = Of;
var Rf = $f;
function xf(e, t) {
  var n = e.__data__;
  return Rf(t) ? n[typeof t == "string" ? "string" : "hash"] : n.map;
}
var Wn = xf;
var Df = Wn;
function Lf(e) {
  var t = Df(this, e).delete(e);
  return this.size -= t ? 1 : 0, t;
}
var Bf = Lf;
var zf = Wn;
function Gf(e) {
  return zf(this, e).get(e);
}
var Wf = Gf;
var Vf = Wn;
function jf(e) {
  return Vf(this, e).has(e);
}
var Hf = jf;
var Kf = Wn;
function Yf(e, t) {
  var n = Kf(this, e), r = n.size;
  return n.set(e, t), this.size += n.size == r ? 0 : 1, this;
}
var qf = Yf;
var Jf = Ff;
var Zf = Bf;
var Qf = Wf;
var Xf = Hf;
var ep = qf;
function At(e) {
  var t = -1, n = e == null ? 0 : e.length;
  for (this.clear(); ++t < n; ) {
    var r = e[t];
    this.set(r[0], r[1]);
  }
}
At.prototype.clear = Jf;
At.prototype.delete = Zf;
At.prototype.get = Qf;
At.prototype.has = Xf;
At.prototype.set = ep;
var Wr = At;
var tp = Bn;
var np = Gr;
var rp = Wr;
var op = 200;
function ip(e, t) {
  var n = this.__data__;
  if (n instanceof tp) {
    var r = n.__data__;
    if (!np || r.length < op - 1)
      return r.push([e, t]), this.size = ++n.size, this;
    n = this.__data__ = new rp(r);
  }
  return n.set(e, t), this.size = n.size, this;
}
var ap = ip;
var sp = Bn;
var lp = Ku;
var cp = qu;
var up = Zu;
var dp = Xu;
var fp = ap;
function Et(e) {
  var t = this.__data__ = new sp(e);
  this.size = t.size;
}
Et.prototype.clear = lp;
Et.prototype.delete = cp;
Et.prototype.get = up;
Et.prototype.has = dp;
Et.prototype.set = fp;
var Vr = Et;
var pp = "__lodash_hash_undefined__";
function mp(e) {
  return this.__data__.set(e, pp), this;
}
var gp = mp;
function hp(e) {
  return this.__data__.has(e);
}
var yp = hp;
var vp = Wr;
var _p = gp;
var Sp = yp;
function An(e) {
  var t = -1, n = e == null ? 0 : e.length;
  for (this.__data__ = new vp(); ++t < n; )
    this.add(e[t]);
}
An.prototype.add = An.prototype.push = _p;
An.prototype.has = Sp;
var wp = An;
function bp(e, t) {
  for (var n = -1, r = e == null ? 0 : e.length; ++n < r; )
    if (t(e[n], n, e))
      return true;
  return false;
}
var Cp = bp;
function Ap(e, t) {
  return e.has(t);
}
var Ep = Ap;
var Tp = wp;
var Ip = Cp;
var Pp = Ep;
var kp = 1;
var Mp = 2;
function Np(e, t, n, r, o, i) {
  var a = n & kp, s = e.length, l = t.length;
  if (s != l && !(a && l > s))
    return false;
  var c = i.get(e), d = i.get(t);
  if (c && d)
    return c == t && d == e;
  var m = -1, f2 = true, p = n & Mp ? new Tp() : void 0;
  for (i.set(e, t), i.set(t, e); ++m < s; ) {
    var y = e[m], _ = t[m];
    if (r)
      var b = a ? r(_, y, m, t, e, i) : r(y, _, m, e, t, i);
    if (b !== void 0) {
      if (b)
        continue;
      f2 = false;
      break;
    }
    if (p) {
      if (!Ip(t, function(h2, S) {
        if (!Pp(p, S) && (y === h2 || o(y, h2, n, r, i)))
          return p.push(S);
      })) {
        f2 = false;
        break;
      }
    } else if (!(y === _ || o(y, _, n, r, i))) {
      f2 = false;
      break;
    }
  }
  return i.delete(e), i.delete(t), f2;
}
var ca = Np;
var Up = $e;
var Fp = Up.Uint8Array;
var ua = Fp;
function Op(e) {
  var t = -1, n = Array(e.size);
  return e.forEach(function(r, o) {
    n[++t] = [o, r];
  }), n;
}
var $p = Op;
function Rp(e) {
  var t = -1, n = Array(e.size);
  return e.forEach(function(r) {
    n[++t] = r;
  }), n;
}
var xp = Rp;
var No = zn;
var Uo = ua;
var Dp = Kt;
var Lp = ca;
var Bp = $p;
var zp = xp;
var Gp = 1;
var Wp = 2;
var Vp = "[object Boolean]";
var jp = "[object Date]";
var Hp = "[object Error]";
var Kp = "[object Map]";
var Yp = "[object Number]";
var qp = "[object RegExp]";
var Jp = "[object Set]";
var Zp = "[object String]";
var Qp = "[object Symbol]";
var Xp = "[object ArrayBuffer]";
var em = "[object DataView]";
var Fo = No ? No.prototype : void 0;
var ir = Fo ? Fo.valueOf : void 0;
function tm(e, t, n, r, o, i, a) {
  switch (n) {
    case em:
      if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset)
        return false;
      e = e.buffer, t = t.buffer;
    case Xp:
      return !(e.byteLength != t.byteLength || !i(new Uo(e), new Uo(t)));
    case Vp:
    case jp:
    case Yp:
      return Dp(+e, +t);
    case Hp:
      return e.name == t.name && e.message == t.message;
    case qp:
    case Zp:
      return e == t + "";
    case Kp:
      var s = Bp;
    case Jp:
      var l = r & Gp;
      if (s || (s = zp), e.size != t.size && !l)
        return false;
      var c = a.get(e);
      if (c)
        return c == t;
      r |= Wp, a.set(e, t);
      var d = Lp(s(e), s(t), r, o, i, a);
      return a.delete(e), d;
    case Qp:
      if (ir)
        return ir.call(e) == ir.call(t);
  }
  return false;
}
var nm = tm;
function rm(e, t) {
  for (var n = -1, r = t.length, o = e.length; ++n < r; )
    e[o + n] = t[n];
  return e;
}
var da = rm;
var om = Array.isArray;
var Ke = om;
var im = da;
var am = Ke;
function sm(e, t, n) {
  var r = t(e);
  return am(e) ? r : im(r, n(e));
}
var fa = sm;
function lm(e, t) {
  for (var n = -1, r = e == null ? 0 : e.length, o = 0, i = []; ++n < r; ) {
    var a = e[n];
    t(a, n, e) && (i[o++] = a);
  }
  return i;
}
var cm = lm;
function um() {
  return [];
}
var pa = um;
var dm = cm;
var fm = pa;
var pm = Object.prototype;
var mm = pm.propertyIsEnumerable;
var Oo = Object.getOwnPropertySymbols;
var gm = Oo ? function(e) {
  return e == null ? [] : (e = Object(e), dm(Oo(e), function(t) {
    return mm.call(e, t);
  }));
} : fm;
var ma = gm;
function hm(e, t) {
  for (var n = -1, r = Array(e); ++n < e; )
    r[n] = t(n);
  return r;
}
var ym = hm;
function vm(e) {
  return e != null && typeof e == "object";
}
var ot = vm;
var _m = bt;
var Sm = ot;
var wm = "[object Arguments]";
function bm(e) {
  return Sm(e) && _m(e) == wm;
}
var Cm = bm;
var $o = Cm;
var Am = ot;
var ga = Object.prototype;
var Em = ga.hasOwnProperty;
var Tm = ga.propertyIsEnumerable;
var Im = $o(/* @__PURE__ */ function() {
  return arguments;
}()) ? $o : function(e) {
  return Am(e) && Em.call(e, "callee") && !Tm.call(e, "callee");
};
var jr = Im;
var En = { exports: {} };
function Pm() {
  return false;
}
var km = Pm;
En.exports;
(function(e, t) {
  var n = $e, r = km, o = t && !t.nodeType && t, i = o && true && e && !e.nodeType && e, a = i && i.exports === o, s = a ? n.Buffer : void 0, l = s ? s.isBuffer : void 0, c = l || r;
  e.exports = c;
})(En, En.exports);
var Hr = En.exports;
var Mm = 9007199254740991;
var Nm = /^(?:0|[1-9]\d*)$/;
function Um(e, t) {
  var n = typeof e;
  return t = t ?? Mm, !!t && (n == "number" || n != "symbol" && Nm.test(e)) && e > -1 && e % 1 == 0 && e < t;
}
var Vn = Um;
var Fm = 9007199254740991;
function Om(e) {
  return typeof e == "number" && e > -1 && e % 1 == 0 && e <= Fm;
}
var Kr = Om;
var $m = bt;
var Rm = Kr;
var xm = ot;
var Dm = "[object Arguments]";
var Lm = "[object Array]";
var Bm = "[object Boolean]";
var zm = "[object Date]";
var Gm = "[object Error]";
var Wm = "[object Function]";
var Vm = "[object Map]";
var jm = "[object Number]";
var Hm = "[object Object]";
var Km = "[object RegExp]";
var Ym = "[object Set]";
var qm = "[object String]";
var Jm = "[object WeakMap]";
var Zm = "[object ArrayBuffer]";
var Qm = "[object DataView]";
var Xm = "[object Float32Array]";
var eg = "[object Float64Array]";
var tg = "[object Int8Array]";
var ng = "[object Int16Array]";
var rg = "[object Int32Array]";
var og = "[object Uint8Array]";
var ig = "[object Uint8ClampedArray]";
var ag = "[object Uint16Array]";
var sg = "[object Uint32Array]";
var ee = {};
ee[Xm] = ee[eg] = ee[tg] = ee[ng] = ee[rg] = ee[og] = ee[ig] = ee[ag] = ee[sg] = true;
ee[Dm] = ee[Lm] = ee[Zm] = ee[Bm] = ee[Qm] = ee[zm] = ee[Gm] = ee[Wm] = ee[Vm] = ee[jm] = ee[Hm] = ee[Km] = ee[Ym] = ee[qm] = ee[Jm] = false;
function lg(e) {
  return xm(e) && Rm(e.length) && !!ee[$m(e)];
}
var cg = lg;
function ug(e) {
  return function(t) {
    return e(t);
  };
}
var dg = ug;
var Tn = { exports: {} };
Tn.exports;
(function(e, t) {
  var n = aa, r = t && !t.nodeType && t, o = r && true && e && !e.nodeType && e, i = o && o.exports === r, a = i && n.process, s = function() {
    try {
      var l = o && o.require && o.require("util").types;
      return l || a && a.binding && a.binding("util");
    } catch {
    }
  }();
  e.exports = s;
})(Tn, Tn.exports);
var fg = Tn.exports;
var pg = cg;
var mg = dg;
var Ro = fg;
var xo = Ro && Ro.isTypedArray;
var gg = xo ? mg(xo) : pg;
var Yr = gg;
var hg = ym;
var yg = jr;
var vg = Ke;
var _g = Hr;
var Sg = Vn;
var wg = Yr;
var bg = Object.prototype;
var Cg = bg.hasOwnProperty;
function Ag(e, t) {
  var n = vg(e), r = !n && yg(e), o = !n && !r && _g(e), i = !n && !r && !o && wg(e), a = n || r || o || i, s = a ? hg(e.length, String) : [], l = s.length;
  for (var c in e)
    (t || Cg.call(e, c)) && !(a && // Safari 9 has enumerable `arguments.length` in strict mode.
    (c == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
    o && (c == "offset" || c == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    i && (c == "buffer" || c == "byteLength" || c == "byteOffset") || // Skip index properties.
    Sg(c, l))) && s.push(c);
  return s;
}
var ha = Ag;
var Eg = Object.prototype;
function Tg(e) {
  var t = e && e.constructor, n = typeof t == "function" && t.prototype || Eg;
  return e === n;
}
var qr = Tg;
function Ig(e, t) {
  return function(n) {
    return e(t(n));
  };
}
var ya = Ig;
var Pg = ya;
var kg = Pg(Object.keys, Object);
var Mg = kg;
var Ng = qr;
var Ug = Mg;
var Fg = Object.prototype;
var Og = Fg.hasOwnProperty;
function $g(e) {
  if (!Ng(e))
    return Ug(e);
  var t = [];
  for (var n in Object(e))
    Og.call(e, n) && n != "constructor" && t.push(n);
  return t;
}
var Rg = $g;
var xg = zr;
var Dg = Kr;
function Lg(e) {
  return e != null && Dg(e.length) && !xg(e);
}
var jn = Lg;
var Bg = ha;
var zg = Rg;
var Gg = jn;
function Wg(e) {
  return Gg(e) ? Bg(e) : zg(e);
}
var va = Wg;
var Vg = fa;
var jg = ma;
var Hg = va;
function Kg(e) {
  return Vg(e, Hg, jg);
}
var Yg = Kg;
var Do = Yg;
var qg = 1;
var Jg = Object.prototype;
var Zg = Jg.hasOwnProperty;
function Qg(e, t, n, r, o, i) {
  var a = n & qg, s = Do(e), l = s.length, c = Do(t), d = c.length;
  if (l != d && !a)
    return false;
  for (var m = l; m--; ) {
    var f2 = s[m];
    if (!(a ? f2 in t : Zg.call(t, f2)))
      return false;
  }
  var p = i.get(e), y = i.get(t);
  if (p && y)
    return p == t && y == e;
  var _ = true;
  i.set(e, t), i.set(t, e);
  for (var b = a; ++m < l; ) {
    f2 = s[m];
    var h2 = e[f2], S = t[f2];
    if (r)
      var v = a ? r(S, h2, f2, t, e, i) : r(h2, S, f2, e, t, i);
    if (!(v === void 0 ? h2 === S || o(h2, S, n, r, i) : v)) {
      _ = false;
      break;
    }
    b || (b = f2 == "constructor");
  }
  if (_ && !b) {
    var w = e.constructor, E = t.constructor;
    w != E && "constructor" in e && "constructor" in t && !(typeof w == "function" && w instanceof w && typeof E == "function" && E instanceof E) && (_ = false);
  }
  return i.delete(e), i.delete(t), _;
}
var Xg = Qg;
var eh = rt;
var th = $e;
var nh = eh(th, "DataView");
var rh = nh;
var oh = rt;
var ih = $e;
var ah = oh(ih, "Promise");
var sh = ah;
var lh = rt;
var ch = $e;
var uh = lh(ch, "Set");
var dh = uh;
var fh = rt;
var ph = $e;
var mh = fh(ph, "WeakMap");
var gh = mh;
var Sr = rh;
var wr = Gr;
var br = sh;
var Cr = dh;
var Ar = gh;
var _a = bt;
var Tt = la;
var Lo = "[object Map]";
var hh = "[object Object]";
var Bo = "[object Promise]";
var zo = "[object Set]";
var Go = "[object WeakMap]";
var Wo = "[object DataView]";
var yh = Tt(Sr);
var vh = Tt(wr);
var _h = Tt(br);
var Sh = Tt(Cr);
var wh = Tt(Ar);
var tt = _a;
(Sr && tt(new Sr(new ArrayBuffer(1))) != Wo || wr && tt(new wr()) != Lo || br && tt(br.resolve()) != Bo || Cr && tt(new Cr()) != zo || Ar && tt(new Ar()) != Go) && (tt = function(e) {
  var t = _a(e), n = t == hh ? e.constructor : void 0, r = n ? Tt(n) : "";
  if (r)
    switch (r) {
      case yh:
        return Wo;
      case vh:
        return Lo;
      case _h:
        return Bo;
      case Sh:
        return zo;
      case wh:
        return Go;
    }
  return t;
});
var bh = tt;
var ar = Vr;
var Ch = ca;
var Ah = nm;
var Eh = Xg;
var Vo = bh;
var jo = Ke;
var Ho = Hr;
var Th = Yr;
var Ih = 1;
var Ko = "[object Arguments]";
var Yo = "[object Array]";
var an = "[object Object]";
var Ph = Object.prototype;
var qo = Ph.hasOwnProperty;
function kh(e, t, n, r, o, i) {
  var a = jo(e), s = jo(t), l = a ? Yo : Vo(e), c = s ? Yo : Vo(t);
  l = l == Ko ? an : l, c = c == Ko ? an : c;
  var d = l == an, m = c == an, f2 = l == c;
  if (f2 && Ho(e)) {
    if (!Ho(t))
      return false;
    a = true, d = false;
  }
  if (f2 && !d)
    return i || (i = new ar()), a || Th(e) ? Ch(e, t, n, r, o, i) : Ah(e, t, l, n, r, o, i);
  if (!(n & Ih)) {
    var p = d && qo.call(e, "__wrapped__"), y = m && qo.call(t, "__wrapped__");
    if (p || y) {
      var _ = p ? e.value() : e, b = y ? t.value() : t;
      return i || (i = new ar()), o(_, b, n, r, i);
    }
  }
  return f2 ? (i || (i = new ar()), Eh(e, t, n, r, o, i)) : false;
}
var Mh = kh;
var Nh = Mh;
var Jo = ot;
function Sa(e, t, n, r, o) {
  return e === t ? true : e == null || t == null || !Jo(e) && !Jo(t) ? e !== e && t !== t : Nh(e, t, n, r, Sa, o);
}
var wa = Sa;
var Uh = Vr;
var Fh = wa;
var Oh = 1;
var $h = 2;
function Rh(e, t, n, r) {
  var o = n.length, i = o, a = !r;
  if (e == null)
    return !i;
  for (e = Object(e); o--; ) {
    var s = n[o];
    if (a && s[2] ? s[1] !== e[s[0]] : !(s[0] in e))
      return false;
  }
  for (; ++o < i; ) {
    s = n[o];
    var l = s[0], c = e[l], d = s[1];
    if (a && s[2]) {
      if (c === void 0 && !(l in e))
        return false;
    } else {
      var m = new Uh();
      if (r)
        var f2 = r(c, d, l, e, t, m);
      if (!(f2 === void 0 ? Fh(d, c, Oh | $h, r, m) : f2))
        return false;
    }
  }
  return true;
}
var xh = Rh;
var Dh = He;
function Lh(e) {
  return e === e && !Dh(e);
}
var ba = Lh;
var Bh = ba;
var zh = va;
function Gh(e) {
  for (var t = zh(e), n = t.length; n--; ) {
    var r = t[n], o = e[r];
    t[n] = [r, o, Bh(o)];
  }
  return t;
}
var Wh = Gh;
function Vh(e, t) {
  return function(n) {
    return n == null ? false : n[e] === t && (t !== void 0 || e in Object(n));
  };
}
var Ca = Vh;
var jh = xh;
var Hh = Wh;
var Kh = Ca;
function Yh(e) {
  var t = Hh(e);
  return t.length == 1 && t[0][2] ? Kh(t[0][0], t[0][1]) : function(n) {
    return n === e || jh(n, e, t);
  };
}
var qh = Yh;
var Jh = bt;
var Zh = ot;
var Qh = "[object Symbol]";
function Xh(e) {
  return typeof e == "symbol" || Zh(e) && Jh(e) == Qh;
}
var Jr = Xh;
var ey = Ke;
var ty = Jr;
var ny = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
var ry = /^\w*$/;
function oy(e, t) {
  if (ey(e))
    return false;
  var n = typeof e;
  return n == "number" || n == "symbol" || n == "boolean" || e == null || ty(e) ? true : ry.test(e) || !ny.test(e) || t != null && e in Object(t);
}
var Zr = oy;
var Aa = Wr;
var iy = "Expected a function";
function Qr(e, t) {
  if (typeof e != "function" || t != null && typeof t != "function")
    throw new TypeError(iy);
  var n = function() {
    var r = arguments, o = t ? t.apply(this, r) : r[0], i = n.cache;
    if (i.has(o))
      return i.get(o);
    var a = e.apply(this, r);
    return n.cache = i.set(o, a) || i, a;
  };
  return n.cache = new (Qr.Cache || Aa)(), n;
}
Qr.Cache = Aa;
var ay = Qr;
var sy = ay;
var ly = 500;
function cy(e) {
  var t = sy(e, function(r) {
    return n.size === ly && n.clear(), r;
  }), n = t.cache;
  return t;
}
var uy = cy;
var dy = uy;
var fy = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
var py = /\\(\\)?/g;
var my = dy(function(e) {
  var t = [];
  return e.charCodeAt(0) === 46 && t.push(""), e.replace(fy, function(n, r, o, i) {
    t.push(o ? i.replace(py, "$1") : r || n);
  }), t;
});
var gy = my;
var Zo = zn;
var hy = ia;
var yy = Ke;
var vy = Jr;
var Qo = Zo ? Zo.prototype : void 0;
var Xo = Qo ? Qo.toString : void 0;
function Ea(e) {
  if (typeof e == "string")
    return e;
  if (yy(e))
    return hy(e, Ea) + "";
  if (vy(e))
    return Xo ? Xo.call(e) : "";
  var t = e + "";
  return t == "0" && 1 / e == -1 / 0 ? "-0" : t;
}
var _y = Ea;
var Sy = _y;
function wy(e) {
  return e == null ? "" : Sy(e);
}
var by = wy;
var Cy = Ke;
var Ay = Zr;
var Ey = gy;
var Ty = by;
function Iy(e, t) {
  return Cy(e) ? e : Ay(e, t) ? [e] : Ey(Ty(e));
}
var Hn = Iy;
var Py = Jr;
function ky(e) {
  if (typeof e == "string" || Py(e))
    return e;
  var t = e + "";
  return t == "0" && 1 / e == -1 / 0 ? "-0" : t;
}
var Yt = ky;
var My = Hn;
var Ny = Yt;
function Uy(e, t) {
  t = My(t, e);
  for (var n = 0, r = t.length; e != null && n < r; )
    e = e[Ny(t[n++])];
  return n && n == r ? e : void 0;
}
var Xr = Uy;
var Fy = Xr;
function Oy(e, t, n) {
  var r = e == null ? void 0 : Fy(e, t);
  return r === void 0 ? n : r;
}
var $y = Oy;
function Ry(e, t) {
  return e != null && t in Object(e);
}
var xy = Ry;
var Dy = Hn;
var Ly = jr;
var By = Ke;
var zy = Vn;
var Gy = Kr;
var Wy = Yt;
function Vy(e, t, n) {
  t = Dy(t, e);
  for (var r = -1, o = t.length, i = false; ++r < o; ) {
    var a = Wy(t[r]);
    if (!(i = e != null && n(e, a)))
      break;
    e = e[a];
  }
  return i || ++r != o ? i : (o = e == null ? 0 : e.length, !!o && Gy(o) && zy(a, o) && (By(e) || Ly(e)));
}
var jy = Vy;
var Hy = xy;
var Ky = jy;
function Yy(e, t) {
  return e != null && Ky(e, t, Hy);
}
var qy = Yy;
var Jy = wa;
var Zy = $y;
var Qy = qy;
var Xy = Zr;
var ev = ba;
var tv = Ca;
var nv = Yt;
var rv = 1;
var ov = 2;
function iv(e, t) {
  return Xy(e) && ev(t) ? tv(nv(e), t) : function(n) {
    var r = Zy(n, e);
    return r === void 0 && r === t ? Qy(n, e) : Jy(t, r, rv | ov);
  };
}
var av = iv;
function sv(e) {
  return e;
}
var eo = sv;
function lv(e) {
  return function(t) {
    return t == null ? void 0 : t[e];
  };
}
var cv = lv;
var uv = Xr;
function dv(e) {
  return function(t) {
    return uv(t, e);
  };
}
var fv = dv;
var pv = cv;
var mv = fv;
var gv = Zr;
var hv = Yt;
function yv(e) {
  return gv(e) ? pv(hv(e)) : mv(e);
}
var vv2 = yv;
var _v = qh;
var Sv = av;
var wv = eo;
var bv = Ke;
var Cv = vv2;
function Av(e) {
  return typeof e == "function" ? e : e == null ? wv : typeof e == "object" ? bv(e) ? Sv(e[0], e[1]) : _v(e) : Cv(e);
}
var Ev = Av;
var Tv = rt;
var Iv = function() {
  try {
    var e = Tv(Object, "defineProperty");
    return e({}, "", {}), e;
  } catch {
  }
}();
var Ta = Iv;
var ei = Ta;
function Pv(e, t, n) {
  t == "__proto__" && ei ? ei(e, t, {
    configurable: true,
    enumerable: true,
    value: n,
    writable: true
  }) : e[t] = n;
}
var to = Pv;
var kv = to;
var Mv = Kt;
var Nv = Object.prototype;
var Uv = Nv.hasOwnProperty;
function Fv(e, t, n) {
  var r = e[t];
  (!(Uv.call(e, t) && Mv(r, n)) || n === void 0 && !(t in e)) && kv(e, t, n);
}
var Ia = Fv;
var Ov = Ia;
var $v = Hn;
var Rv = Vn;
var ti = He;
var xv = Yt;
function Dv(e, t, n, r) {
  if (!ti(e))
    return e;
  t = $v(t, e);
  for (var o = -1, i = t.length, a = i - 1, s = e; s != null && ++o < i; ) {
    var l = xv(t[o]), c = n;
    if (l === "__proto__" || l === "constructor" || l === "prototype")
      return e;
    if (o != a) {
      var d = s[l];
      c = r ? r(d, l, s) : void 0, c === void 0 && (c = ti(d) ? d : Rv(t[o + 1]) ? [] : {});
    }
    Ov(s, l, c), s = s[l];
  }
  return e;
}
var Lv = Dv;
var Bv = Xr;
var zv = Lv;
var Gv = Hn;
function Wv(e, t, n) {
  for (var r = -1, o = t.length, i = {}; ++r < o; ) {
    var a = t[r], s = Bv(e, a);
    n(s, a) && zv(i, Gv(a, e), s);
  }
  return i;
}
var Vv = Wv;
var jv = ya;
var Hv = jv(Object.getPrototypeOf, Object);
var no = Hv;
var Kv = da;
var Yv = no;
var qv = ma;
var Jv = pa;
var Zv = Object.getOwnPropertySymbols;
var Qv = Zv ? function(e) {
  for (var t = []; e; )
    Kv(t, qv(e)), e = Yv(e);
  return t;
} : Jv;
var Xv = Qv;
function e_(e) {
  var t = [];
  if (e != null)
    for (var n in Object(e))
      t.push(n);
  return t;
}
var t_ = e_;
var n_ = He;
var r_ = qr;
var o_ = t_;
var i_ = Object.prototype;
var a_ = i_.hasOwnProperty;
function s_(e) {
  if (!n_(e))
    return o_(e);
  var t = r_(e), n = [];
  for (var r in e)
    r == "constructor" && (t || !a_.call(e, r)) || n.push(r);
  return n;
}
var l_ = s_;
var c_ = ha;
var u_ = l_;
var d_ = jn;
function f_(e) {
  return d_(e) ? c_(e, true) : u_(e);
}
var ro = f_;
var p_ = fa;
var m_ = Xv;
var g_ = ro;
function h_(e) {
  return p_(e, g_, m_);
}
var y_ = h_;
var v_ = ia;
var __ = Ev;
var S_ = Vv;
var w_ = y_;
function b_(e, t) {
  if (e == null)
    return {};
  var n = v_(w_(e), function(r) {
    return [r];
  });
  return t = __(t), S_(e, n, function(r, o) {
    return t(r, o[0]);
  });
}
var C_ = b_;
var A_ = oa(C_);
var E_ = true;
var T_ = "";
var Kn = (e, t) => `${e}${t}`.replace(/[^A-Z0-9+]/gi, "");
var I_ = (e, t) => {
  switch (t) {
    case "address":
    case "birthdate":
    case "email":
    case "family_name":
    case "gender":
    case "given_name":
    case "locale":
    case "middle_name":
    case "name":
    case "nickname":
    case "phone_number":
    case "picture":
    case "preferred_username":
    case "profile":
    case "updated_at":
    case "website":
    case "zoneinfo":
      return true;
    // Otherwise, it's a custom attribute
    default:
      return t.startsWith("custom:");
  }
};
var P_ = (e) => {
  const { phone_number: t, ...n } = A_(e, I_);
  if (Ci(t) && t !== T_) {
    const { country_code: r } = e;
    return {
      ...n,
      phone_number: Kn(r, t)
    };
  }
  return n;
};
var k_ = (e, t, n) => {
  const { password: r, ...o } = t, i = P_(o), a = {
    autoSignIn: E_,
    userAttributes: {
      // use `username` value for `phone_number`
      ...n === "phone_number" ? { ...i, phone_number: e } : i
    }
  };
  return { username: e, password: r, options: a };
};
var M_ = ({ formValues: e, loginMechanisms: t }) => {
  const n = t[0];
  if (n === "phone_number") {
    const { country_code: r, phone_number: o } = e;
    return Kn(r, o);
  }
  return e[n];
};
var { assign: J } = Zi;
var N_ = J({ actorDoneData: void 0 });
var U_ = J({ challengeName: void 0 });
var F_ = J({ missingAttributes: void 0 });
var O_ = J({ remoteError: void 0 });
var $_ = J({ formValues: {} });
var R_ = J({ touched: {} });
var x_ = J({ user: void 0 });
var D_ = J({ validationError: {} });
var L_ = J({
  totpSecretCode: (e, { data: t }) => {
    var r;
    const { sharedSecret: n } = ((r = t.nextStep) == null ? void 0 : r.totpSetupDetails) ?? {};
    return n;
  }
});
var B_ = J({
  allowedMfaTypes: (e, { data: t }) => {
    var n;
    return (n = t.nextStep) == null ? void 0 : n.allowedMFATypes;
  }
});
var z_ = J({ step: "SIGN_IN" });
var G_ = J({
  step: "SHOULD_CONFIRM_USER_ATTRIBUTE"
});
var W_ = J({
  step: "CONFIRM_ATTRIBUTE_COMPLETE"
});
var V_ = J({
  challengeName: (e, { data: t }) => {
    const { signInStep: n } = t.nextStep;
    switch (n) {
      case "CONFIRM_SIGN_IN_WITH_SMS_CODE":
        return "SMS_MFA";
      case "CONFIRM_SIGN_IN_WITH_TOTP_CODE":
        return "SOFTWARE_TOKEN_MFA";
      case "CONFIRM_SIGN_IN_WITH_EMAIL_CODE":
        return "EMAIL_OTP";
      case "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION":
      case "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP":
      case "CONTINUE_SIGN_IN_WITH_TOTP_SETUP":
        return "MFA_SETUP";
      case "CONTINUE_SIGN_IN_WITH_MFA_SELECTION":
        return "SELECT_MFA_TYPE";
      default:
        return;
    }
  }
});
var j_ = J({
  username: ({ formValues: e, loginMechanisms: t }) => {
    const n = t[0], { username: r, country_code: o } = e;
    return n === "phone_number" ? Kn(o, r) : r;
  }
});
var H_ = J({ username: M_ });
var K_ = J({
  username: ({ formValues: e, loginMechanisms: t }) => {
    const n = t[0], { username: r, country_code: o } = e;
    return n === "phone_number" ? Kn(o, r) : r;
  }
});
var Y_ = J({
  step: (e, { data: t }) => t.nextStep.signInStep === "DONE" ? "SIGN_IN_COMPLETE" : t.nextStep.signInStep
});
var q_ = J({
  step: (e, { data: t }) => t.nextStep.signUpStep === "DONE" ? "SIGN_UP_COMPLETE" : t.nextStep.signUpStep
});
var J_ = J({
  step: (e, { data: t }) => t.nextStep.resetPasswordStep === "DONE" ? "RESET_PASSWORD_COMPLETE" : t.nextStep.resetPasswordStep
});
var Z_ = J({
  missingAttributes: (e, { data: t }) => {
    var n;
    return (n = t.nextStep) == null ? void 0 : n.missingAttributes;
  }
});
var Q_ = J({
  validationError: (e, { data: t }) => t
});
var X_ = J({
  remoteError: (e, { data: t }) => t.name === "NoUserPoolError" ? "Configuration error (see console) – please contact the administrator" : (t == null ? void 0 : t.message) || t
});
var eS = J({ user: (e, { data: t }) => t });
var ni = (e) => ({
  Destination: e.destination,
  DeliveryMedium: e.deliveryMedium,
  AttributeName: e.attributName
});
var tS = J({
  codeDeliveryDetails: (e, { data: t }) => {
    var n;
    return (n = t == null ? void 0 : t.nextStep) != null && n.codeDeliveryDetails ? ni(t.nextStep.codeDeliveryDetails) : ni(t);
  }
});
var nS = J({
  formValues: (e, { data: t }) => {
    const { name: n, value: r } = t;
    return { ...e.formValues, [n]: r };
  }
});
var rS = J({
  formValues: (e, { data: t }) => (
    // do not trim password
    vl({ ...e.formValues, ...t }, "password")
  )
});
var oS = J({
  touched: (e, { data: t }) => ({
    ...e.touched,
    [t.name]: true
  })
});
var iS = J({
  unverifiedUserAttributes: (e, { data: t }) => {
    const { email: n, phone_number: r } = t;
    return {
      ...n && { email: n },
      ...r && { phone_number: r }
    };
  }
});
var aS = J({ selectedUserAttribute: void 0 });
var sS = J({
  selectedUserAttribute: (e) => {
    var t;
    return (t = e.formValues) == null ? void 0 : t.unverifiedAttr;
  }
});
var lS = J({ step: "CONFIRM_SIGN_UP" });
var qt = {
  clearActorDoneData: N_,
  clearChallengeName: U_,
  clearError: O_,
  clearFormValues: $_,
  clearMissingAttributes: F_,
  clearSelectedUserAttribute: aS,
  clearTouched: R_,
  clearUser: x_,
  clearValidationError: D_,
  handleBlur: oS,
  handleInput: nS,
  handleSubmit: rS,
  setAllowedMfaTypes: B_,
  setChallengeName: V_,
  setCodeDeliveryDetails: tS,
  setFieldErrors: Q_,
  setMissingAttributes: Z_,
  setNextResetPasswordStep: J_,
  setNextSignInStep: Y_,
  setNextSignUpStep: q_,
  setRemoteError: X_,
  setConfirmAttributeCompleteStep: W_,
  setConfirmSignUpSignUpStep: lS,
  setShouldVerifyUserAttributeStep: G_,
  setSelectedUserAttribute: sS,
  setSignInStep: z_,
  setTotpSecretCode: L_,
  setUser: eS,
  setUnverifiedUserAttributes: iS,
  setUsernameForgotPassword: j_,
  setUsernameSignIn: K_,
  setUsernameSignUp: H_
};
var cS = [
  "CONFIRM_SIGN_IN_WITH_SMS_CODE",
  "CONFIRM_SIGN_IN_WITH_TOTP_CODE",
  "CONFIRM_SIGN_IN_WITH_EMAIL_CODE"
];
var uS = (e, { data: t }) => (t == null ? void 0 : t.nextStep.signInStep) === "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED";
var dS = (e, { data: t }) => {
  var n;
  return ((n = t == null ? void 0 : t.nextStep) == null ? void 0 : n.signInStep) === "RESET_PASSWORD";
};
var fS = (e, { data: t }) => (t == null ? void 0 : t.nextStep.signInStep) === "CONFIRM_SIGN_UP";
var pS = (e, { data: t }) => (t == null ? void 0 : t.nextStep.signUpStep) === "COMPLETE_AUTO_SIGN_IN";
var mS = (e, { data: t }) => (t == null ? void 0 : t.nextStep.signInStep) === "DONE";
var gS = (e, { data: t }) => (t == null ? void 0 : t.nextStep.signUpStep) === "DONE";
var hS = (e, { data: t }) => (t == null ? void 0 : t.nextStep.resetPasswordStep) === "DONE";
var yS = (e, { data: t }) => (t == null ? void 0 : t.step) === "CONFIRM_ATTRIBUTE_COMPLETE";
var vS = (e, { data: t }) => (t == null ? void 0 : t.step) === "CONFIRM_ATTRIBUTE_WITH_CODE";
var _S = (e, { data: t }) => (t == null ? void 0 : t.step) === "SHOULD_CONFIRM_USER_ATTRIBUTE";
var SS = (e, { data: t }) => (t == null ? void 0 : t.step) === "RESET_PASSWORD";
var wS = (e, { data: t }) => (t == null ? void 0 : t.step) === "CONFIRM_SIGN_UP";
var bS = ({ step: e }) => cS.includes(e);
var CS = ({ step: e }) => e === "CONTINUE_SIGN_IN_WITH_TOTP_SETUP";
var AS = ({ step: e }) => e === "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP";
var ES = ({ step: e }) => [
  "CONTINUE_SIGN_IN_WITH_MFA_SELECTION",
  "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION"
].includes(e);
var TS = ({ step: e }) => e === "RESET_PASSWORD";
var IS = ({ step: e }) => e === "CONFIRM_RESET_PASSWORD_WITH_CODE";
var PS = ({ step: e }) => e === "CONFIRM_SIGN_UP";
var kS = (e, { data: t }) => {
  const { email: n, phone_number: r, phone_number_verified: o, email_verified: i } = t;
  return !n && !r ? false : (i === void 0 || i === "false") && (o === void 0 || o === "false");
};
var MS = (e, { data: t }) => t.message === "User is already confirmed.";
var Yn = {
  hasCompletedAttributeConfirmation: yS,
  hasCompletedResetPassword: hS,
  hasCompletedSignIn: mS,
  hasCompletedSignUp: gS,
  isConfirmSignUpStep: wS,
  isConfirmUserAttributeStep: vS,
  isResetPasswordStep: SS,
  isShouldConfirmUserAttributeStep: _S,
  isUserAlreadyConfirmed: MS,
  shouldAutoSignIn: pS,
  shouldConfirmResetPassword: IS,
  shouldConfirmSignIn: bS,
  shouldConfirmSignInWithNewPassword: uS,
  shouldConfirmSignUp: PS,
  shouldConfirmSignUpFromSignIn: fS,
  shouldResetPassword: TS,
  shouldResetPasswordFromSignIn: dS,
  shouldSetupTotp: CS,
  shouldSetupEmail: AS,
  shouldSelectMfaType: ES,
  shouldVerifyAttribute: kS
};
var NS = to;
var US = Kt;
function FS(e, t, n) {
  (n !== void 0 && !US(e[t], n) || n === void 0 && !(t in e)) && NS(e, t, n);
}
var Pa = FS;
function OS(e) {
  return function(t, n, r) {
    for (var o = -1, i = Object(t), a = r(t), s = a.length; s--; ) {
      var l = a[e ? s : ++o];
      if (n(i[l], l, i) === false)
        break;
    }
    return t;
  };
}
var $S = OS;
var RS = $S;
var xS = RS();
var DS = xS;
var In = { exports: {} };
In.exports;
(function(e, t) {
  var n = $e, r = t && !t.nodeType && t, o = r && true && e && !e.nodeType && e, i = o && o.exports === r, a = i ? n.Buffer : void 0, s = a ? a.allocUnsafe : void 0;
  function l(c, d) {
    if (d)
      return c.slice();
    var m = c.length, f2 = s ? s(m) : new c.constructor(m);
    return c.copy(f2), f2;
  }
  e.exports = l;
})(In, In.exports);
var LS = In.exports;
var ri = ua;
function BS(e) {
  var t = new e.constructor(e.byteLength);
  return new ri(t).set(new ri(e)), t;
}
var zS = BS;
var GS = zS;
function WS(e, t) {
  var n = t ? GS(e.buffer) : e.buffer;
  return new e.constructor(n, e.byteOffset, e.length);
}
var VS = WS;
function jS(e, t) {
  var n = -1, r = e.length;
  for (t || (t = Array(r)); ++n < r; )
    t[n] = e[n];
  return t;
}
var HS = jS;
var KS = He;
var oi = Object.create;
var YS = /* @__PURE__ */ function() {
  function e() {
  }
  return function(t) {
    if (!KS(t))
      return {};
    if (oi)
      return oi(t);
    e.prototype = t;
    var n = new e();
    return e.prototype = void 0, n;
  };
}();
var qS = YS;
var JS = qS;
var ZS = no;
var QS = qr;
function XS(e) {
  return typeof e.constructor == "function" && !QS(e) ? JS(ZS(e)) : {};
}
var ew = XS;
var tw = jn;
var nw = ot;
function rw(e) {
  return nw(e) && tw(e);
}
var ow = rw;
var iw = bt;
var aw = no;
var sw = ot;
var lw = "[object Object]";
var cw = Function.prototype;
var uw = Object.prototype;
var ka = cw.toString;
var dw = uw.hasOwnProperty;
var fw = ka.call(Object);
function pw(e) {
  if (!sw(e) || iw(e) != lw)
    return false;
  var t = aw(e);
  if (t === null)
    return true;
  var n = dw.call(t, "constructor") && t.constructor;
  return typeof n == "function" && n instanceof n && ka.call(n) == fw;
}
var mw = pw;
function gw(e, t) {
  if (!(t === "constructor" && typeof e[t] == "function") && t != "__proto__")
    return e[t];
}
var Ma = gw;
var hw = Ia;
var yw = to;
function vw(e, t, n, r) {
  var o = !n;
  n || (n = {});
  for (var i = -1, a = t.length; ++i < a; ) {
    var s = t[i], l = r ? r(n[s], e[s], s, n, e) : void 0;
    l === void 0 && (l = e[s]), o ? yw(n, s, l) : hw(n, s, l);
  }
  return n;
}
var _w = vw;
var Sw = _w;
var ww = ro;
function bw(e) {
  return Sw(e, ww(e));
}
var Cw = bw;
var ii = Pa;
var Aw = LS;
var Ew = VS;
var Tw = HS;
var Iw = ew;
var ai = jr;
var si = Ke;
var Pw = ow;
var kw = Hr;
var Mw = zr;
var Nw = He;
var Uw = mw;
var Fw = Yr;
var li = Ma;
var Ow = Cw;
function $w(e, t, n, r, o, i, a) {
  var s = li(e, n), l = li(t, n), c = a.get(l);
  if (c) {
    ii(e, n, c);
    return;
  }
  var d = i ? i(s, l, n + "", e, t, a) : void 0, m = d === void 0;
  if (m) {
    var f2 = si(l), p = !f2 && kw(l), y = !f2 && !p && Fw(l);
    d = l, f2 || p || y ? si(s) ? d = s : Pw(s) ? d = Tw(s) : p ? (m = false, d = Aw(l, true)) : y ? (m = false, d = Ew(l, true)) : d = [] : Uw(l) || ai(l) ? (d = s, ai(s) ? d = Ow(s) : (!Nw(s) || Mw(s)) && (d = Iw(l))) : m = false;
  }
  m && (a.set(l, d), o(d, l, r, i, a), a.delete(l)), ii(e, n, d);
}
var Rw = $w;
var xw = Vr;
var Dw = Pa;
var Lw = DS;
var Bw = Rw;
var zw = He;
var Gw = ro;
var Ww = Ma;
function Na(e, t, n, r, o) {
  e !== t && Lw(t, function(i, a) {
    if (o || (o = new xw()), zw(i))
      Bw(e, t, a, n, Na, r, o);
    else {
      var s = r ? r(Ww(e, a), i, a + "", e, t, o) : void 0;
      s === void 0 && (s = i), Dw(e, a, s);
    }
  }, Gw);
}
var Vw = Na;
function jw(e, t, n) {
  switch (n.length) {
    case 0:
      return e.call(t);
    case 1:
      return e.call(t, n[0]);
    case 2:
      return e.call(t, n[0], n[1]);
    case 3:
      return e.call(t, n[0], n[1], n[2]);
  }
  return e.apply(t, n);
}
var Hw = jw;
var Kw = Hw;
var ci = Math.max;
function Yw(e, t, n) {
  return t = ci(t === void 0 ? e.length - 1 : t, 0), function() {
    for (var r = arguments, o = -1, i = ci(r.length - t, 0), a = Array(i); ++o < i; )
      a[o] = r[t + o];
    o = -1;
    for (var s = Array(t + 1); ++o < t; )
      s[o] = r[o];
    return s[t] = n(a), Kw(e, this, s);
  };
}
var qw = Yw;
function Jw(e) {
  return function() {
    return e;
  };
}
var Zw = Jw;
var Qw = Zw;
var ui = Ta;
var Xw = eo;
var eb = ui ? function(e, t) {
  return ui(e, "toString", {
    configurable: true,
    enumerable: false,
    value: Qw(t),
    writable: true
  });
} : Xw;
var tb = eb;
var nb = 800;
var rb = 16;
var ob = Date.now;
function ib(e) {
  var t = 0, n = 0;
  return function() {
    var r = ob(), o = rb - (r - n);
    if (n = r, o > 0) {
      if (++t >= nb)
        return arguments[0];
    } else
      t = 0;
    return e.apply(void 0, arguments);
  };
}
var ab = ib;
var sb = tb;
var lb = ab;
var cb = lb(sb);
var ub = cb;
var db = eo;
var fb = qw;
var pb = ub;
function mb(e, t) {
  return pb(fb(e, t, db), e + "");
}
var gb = mb;
var hb = Kt;
var yb = jn;
var vb = Vn;
var _b = He;
function Sb(e, t, n) {
  if (!_b(n))
    return false;
  var r = typeof t;
  return (r == "number" ? yb(n) && vb(t, n.length) : r == "string" && t in n) ? hb(n[t], e) : false;
}
var wb = Sb;
var bb = gb;
var Cb = wb;
function Ab(e) {
  return bb(function(t, n) {
    var r = -1, o = n.length, i = o > 1 ? n[o - 1] : void 0, a = o > 2 ? n[2] : void 0;
    for (i = e.length > 3 && typeof i == "function" ? (o--, i) : void 0, a && Cb(n[0], n[1], a) && (i = o < 3 ? void 0 : i, o = 1), t = Object(t); ++r < o; ) {
      var s = n[r];
      s && e(t, s, r, i);
    }
    return t;
  });
}
var Eb = Ab;
var Tb = Vw;
var Ib = Eb;
var Pb = Ib(function(e, t, n) {
  Tb(e, t, n);
});
var kb = Pb;
var Mb = oa(kb);
var qn = async (e, t, n, r) => {
  const o = await Promise.all(r.map((a) => a(e, t, n))), i = Mb({}, ...o);
  return Ai(i) ? Promise.resolve() : Promise.reject(i);
};
var Nb = 8;
var Ub = (e) => Array.isArray(e);
var Fb = (e) => {
  if (e)
    return Ub(e) ? Object.entries(e).map(([t, n]) => Object.keys(n)[0]) : Object.keys(e);
};
var Ze = {
  async getAmplifyConfig() {
    var s, l, c, d;
    const e = DefaultAmplify.getConfig(), t = (s = e.Auth) == null ? void 0 : s.Cognito, { loginWith: n, userAttributes: r } = ((l = e.Auth) == null ? void 0 : l.Cognito) ?? {}, o = n ? Object.entries(n).filter(([m, f2]) => m !== "oauth").filter(([m, f2]) => !!f2).map((m) => m[0] === "phone" ? "phone_number" : m[0]) : void 0, i = Fb(r), a = (c = n == null ? void 0 : n.oauth) != null && c.providers ? (d = n.oauth.providers) == null ? void 0 : d.map((m) => m.toString().toLowerCase()) : void 0;
    return {
      ...t,
      loginMechanisms: o,
      signUpAttributes: i,
      socialProviders: a
    };
  },
  getCurrentUser: getCurrentUser2,
  handleSignIn: signIn,
  handleSignUp: signUp,
  handleConfirmSignIn: confirmSignIn,
  handleConfirmSignUp: confirmSignUp,
  handleForgotPasswordSubmit: confirmResetPassword,
  handleForgotPassword: resetPassword,
  handleResendSignUpCode: resendSignUpCode,
  // Validation hooks for overriding
  async validateCustomSignUp(e, t) {
  },
  async validateFormPassword(e, t, n) {
    const { password: r } = e, { password: o } = t;
    if (!o || !n)
      return null;
    const i = [], a = n.minLength ?? Nb;
    return r.length < a && i.push(`Password must have at least ${a} characters`), n.requireLowercase && !/[a-z]/.test(r) && i.push("Password must have lower case letters"), n.requireUppercase && !/[A-Z]/.test(r) && i.push("Password must have upper case letters"), n.requireNumbers && !/[0-9]/.test(r) && i.push("Password must have numbers"), n.requireSpecialCharacters && !hl(r) && i.push("Password must have special characters"), i.length !== 0 ? { password: i } : null;
  },
  async validateConfirmPassword(e, t) {
    const { password: n, confirm_password: r } = e, { confirm_password: o, password: i } = t;
    if (!n && !r)
      return null;
    if ((n || r) && n !== r && (o && i || (n == null ? void 0 : n.length) >= 6 && (r == null ? void 0 : r.length) >= 6))
      return {
        confirm_password: "Your passwords must match"
      };
  },
  async validatePreferredUsername(e, t) {
  }
};
function Ob({ services: e }) {
  return St({
    id: "forgotPasswordActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          {
            cond: "shouldResetPassword",
            target: "confirmResetPassword"
          },
          {
            cond: "shouldConfirmResetPassword",
            target: "confirmResetPassword"
          },
          {
            target: "forgotPassword"
          }
        ]
      },
      forgotPassword: {
        initial: "edit",
        entry: "sendUpdate",
        exit: ["clearError", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              CHANGE: { actions: "handleInput" },
              BLUR: { actions: "handleBlur" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["sendUpdate", "clearError", "setUsernameForgotPassword"],
            invoke: {
              src: "handleResetPassword",
              onDone: {
                actions: [
                  "setCodeDeliveryDetails",
                  "setNextResetPasswordStep"
                ],
                target: "#forgotPasswordActor.confirmResetPassword"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      confirmResetPassword: {
        type: "parallel",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "valid",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "invalid",
                    actions: "setFieldErrors"
                  }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              CHANGE: {
                actions: "handleInput",
                target: ".pending"
              },
              BLUR: {
                actions: "handleBlur",
                target: ".pending"
              }
            }
          },
          submission: {
            initial: "idle",
            states: {
              idle: {
                entry: "sendUpdate",
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" },
                  RESEND: "resendCode",
                  CHANGE: { actions: "handleInput" },
                  BLUR: { actions: "handleBlur" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "pending",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "idle",
                    actions: "setFieldErrors"
                  }
                }
              },
              resendCode: {
                tags: "pending",
                entry: ["clearError", "sendUpdate"],
                invoke: {
                  src: "handleResetPassword",
                  onDone: { target: "idle" },
                  onError: { actions: "setRemoteError", target: "idle" }
                }
              },
              pending: {
                tags: "pending",
                entry: ["clearError", "sendUpdate"],
                invoke: {
                  src: "handleConfirmResetPassword",
                  onDone: [
                    {
                      cond: "hasCompletedResetPassword",
                      actions: "setNextResetPasswordStep",
                      target: "#forgotPasswordActor.resolved"
                    },
                    {
                      actions: "setSignInStep",
                      target: "#forgotPasswordActor.resolved"
                    }
                  ],
                  onError: { actions: "setRemoteError", target: "idle" }
                }
              }
            }
          }
        }
      },
      resolved: {
        type: "final",
        data: ({ step: t }) => ({ step: t })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...qt, sendUpdate: Dn() },
    guards: Yn,
    services: {
      handleResetPassword({ username: t }) {
        return e.handleForgotPassword({ username: t });
      },
      handleConfirmResetPassword({ formValues: t, username: n }) {
        const { confirmation_code: r, password: o } = t;
        return e.handleForgotPasswordSubmit({
          confirmationCode: r,
          newPassword: o,
          username: n
        });
      },
      validateFields(t) {
        return qn(t.formValues, t.touched, t.passwordSettings, [
          Ze.validateFormPassword,
          Ze.validateConfirmPassword
        ]);
      }
    }
  });
}
var Ua = (e) => ({
  entry: ["sendUpdate", "clearError"],
  invoke: {
    src: "signInWithRedirect",
    onDone: { target: e },
    onError: { actions: "setRemoteError", target: e }
  }
});
var $b = (e) => [
  "CONTINUE_SIGN_IN_WITH_MFA_SELECTION",
  "CONTINUE_SIGN_IN_WITH_MFA_SETUP_SELECTION"
].includes(e) ? "mfa_type" : e === "CONTINUE_SIGN_IN_WITH_EMAIL_SETUP" ? "email" : "confirmation_code";
var Er = {
  onDone: [
    {
      cond: "hasCompletedSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.fetchUserAttributes"
    },
    {
      cond: "shouldConfirmSignInWithNewPassword",
      actions: ["setMissingAttributes", "setNextSignInStep"],
      target: "#signInActor.forceChangePassword"
    },
    {
      cond: "shouldResetPasswordFromSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.resetPassword"
    },
    {
      cond: "shouldConfirmSignUpFromSignIn",
      actions: "setNextSignInStep",
      target: "#signInActor.resendSignUpCode"
    },
    {
      actions: [
        "setChallengeName",
        "setMissingAttributes",
        "setNextSignInStep",
        "setTotpSecretCode",
        "setAllowedMfaTypes"
      ],
      target: "#signInActor.init"
    }
  ],
  onError: { actions: "setRemoteError", target: "edit" }
};
var Rb = {
  onDone: [
    {
      cond: "shouldVerifyAttribute",
      actions: [
        "setShouldVerifyUserAttributeStep",
        "setUnverifiedUserAttributes"
      ],
      target: "#signInActor.resolved"
    },
    {
      actions: "setConfirmAttributeCompleteStep",
      target: "#signInActor.resolved"
    }
  ],
  onError: {
    actions: "setConfirmAttributeCompleteStep",
    target: "#signInActor.resolved"
  }
};
var sn = (e) => ({
  initial: "edit",
  exit: e,
  states: {
    edit: {
      entry: "sendUpdate",
      on: {
        SUBMIT: { actions: "handleSubmit", target: "submit" },
        SIGN_IN: "#signInActor.signIn",
        CHANGE: { actions: "handleInput" }
      }
    },
    submit: {
      tags: "pending",
      entry: ["sendUpdate", "clearError"],
      invoke: { src: "confirmSignIn", ...Er }
    }
  }
});
function xb({ services: e }) {
  return St({
    id: "signInActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          {
            cond: "shouldConfirmSignIn",
            target: "confirmSignIn"
          },
          {
            cond: "shouldSetupTotp",
            target: "setupTotp"
          },
          {
            cond: "shouldSetupEmail",
            target: "setupEmail"
          },
          {
            cond: "shouldSelectMfaType",
            target: "selectMfaType"
          },
          {
            cond: ({ step: t }) => t === "CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED",
            actions: "setActorDoneData",
            target: "forceChangePassword"
          },
          { target: "signIn" }
        ]
      },
      federatedSignIn: Ua("signIn"),
      fetchUserAttributes: {
        invoke: {
          src: "fetchUserAttributes",
          ...Rb
        }
      },
      resendSignUpCode: {
        invoke: {
          src: "handleResendSignUpCode",
          onDone: {
            actions: "setCodeDeliveryDetails",
            target: "#signInActor.resolved"
          },
          onError: {
            actions: "setRemoteError",
            target: "#signInActor.signIn"
          }
        }
      },
      resetPassword: {
        invoke: {
          src: "resetPassword",
          onDone: [
            {
              actions: "setCodeDeliveryDetails",
              target: "#signInActor.resolved"
            }
          ],
          onError: { actions: ["setRemoteError", "sendUpdate"] }
        }
      },
      signIn: {
        initial: "edit",
        exit: "clearTouched",
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              CHANGE: { actions: "handleInput" },
              FEDERATED_SIGN_IN: { target: "#signInActor.federatedSignIn" },
              SUBMIT: { actions: "handleSubmit", target: "submit" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate", "setUsernameSignIn"],
            exit: "clearFormValues",
            invoke: { src: "handleSignIn", ...Er }
          }
        }
      },
      confirmSignIn: sn([
        "clearChallengeName",
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      forceChangePassword: {
        entry: "sendUpdate",
        type: "parallel",
        exit: ["clearFormValues", "clearError", "clearTouched"],
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateFields",
                  onDone: {
                    target: "valid",
                    actions: "clearValidationError"
                  },
                  onError: {
                    target: "invalid",
                    actions: "setFieldErrors"
                  }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              SIGN_IN: {
                actions: "setSignInStep",
                target: "#signInActor.resolved"
              },
              CHANGE: {
                actions: "handleInput",
                target: ".pending"
              },
              BLUR: {
                actions: "handleBlur",
                target: ".pending"
              }
            }
          },
          submit: {
            initial: "edit",
            entry: "clearError",
            states: {
              edit: {
                entry: "sendUpdate",
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateFields",
                  onDone: {
                    actions: "clearValidationError",
                    target: "pending"
                  },
                  onError: { actions: "setFieldErrors", target: "edit" }
                }
              },
              pending: {
                tags: "pending",
                entry: ["sendUpdate", "clearError"],
                invoke: {
                  src: "handleForceChangePassword",
                  ...Er
                }
              }
            }
          }
        }
      },
      setupTotp: sn([
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      setupEmail: sn([
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      selectMfaType: sn([
        "clearFormValues",
        "clearError",
        "clearTouched"
      ]),
      resolved: {
        type: "final",
        data: (t) => ({
          codeDeliveryDetails: t.codeDeliveryDetails,
          remoteError: t.remoteError,
          step: t.step,
          unverifiedUserAttributes: t.unverifiedUserAttributes,
          username: t.username
        })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...qt, sendUpdate: Dn() },
    guards: Yn,
    services: {
      async fetchUserAttributes() {
        return fetchUserAttributes2();
      },
      resetPassword({ username: t }) {
        return resetPassword({ username: t });
      },
      handleResendSignUpCode({ username: t }) {
        return e.handleResendSignUpCode({ username: t });
      },
      handleSignIn({ formValues: t, username: n }) {
        const { password: r } = t;
        return e.handleSignIn({ username: n, password: r });
      },
      confirmSignIn({ formValues: t, step: n }) {
        const r = $b(n), { [r]: o } = t;
        return e.handleConfirmSignIn({ challengeResponse: o });
      },
      async handleForceChangePassword({ formValues: t }) {
        let {
          password: n,
          phone_number: r,
          country_code: o,
          // destructure and toss UI confirm_password field
          // to prevent error from sending to confirmSignIn
          confirm_password: i,
          ...a
        } = t, s;
        return r && (s = `${o}${r}`.replace(/[^A-Z0-9+]/gi, ""), a = {
          ...a,
          phone_number: s
        }), confirmSignIn({
          challengeResponse: n,
          options: { userAttributes: a }
        });
      },
      signInWithRedirect(t, { data: n }) {
        return signInWithRedirect(n);
      },
      async validateFields(t) {
        return qn(t.formValues, t.touched, t.passwordSettings, [
          Ze.validateFormPassword,
          Ze.validateConfirmPassword
        ]);
      }
    }
  });
}
var Db = {
  onDone: [
    { actions: "setCodeDeliveryDetails", target: "#signUpActor.resolved" }
  ],
  onError: { actions: ["setRemoteError", "sendUpdate"] }
};
var Lb = {
  onDone: [
    {
      cond: "hasCompletedSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.fetchUserAttributes"
    },
    {
      cond: "shouldConfirmSignInWithNewPassword",
      actions: "setNextSignInStep",
      target: "#signUpActor.resolved"
    },
    {
      cond: "shouldResetPasswordFromSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.resetPassword"
    },
    {
      cond: "shouldConfirmSignUpFromSignIn",
      actions: "setNextSignInStep",
      target: "#signUpActor.resendSignUpCode"
    },
    {
      actions: [
        "setNextSignInStep",
        "setChallengeName",
        "setMissingAttributes",
        "setTotpSecretCode",
        "setAllowedMfaTypes"
      ],
      target: "#signUpActor.resolved"
    }
  ],
  onError: {
    actions: "setRemoteError",
    target: "#signUpActor.resolved"
  }
};
var Bb = {
  onDone: [
    {
      cond: "shouldVerifyAttribute",
      actions: [
        "setShouldVerifyUserAttributeStep",
        "setUnverifiedUserAttributes"
      ],
      target: "#signUpActor.resolved"
    },
    {
      actions: "setConfirmAttributeCompleteStep",
      target: "#signUpActor.resolved"
    }
  ],
  onError: {
    actions: "setConfirmAttributeCompleteStep",
    target: "#signUpActor.resolved"
  }
};
function zb({ services: e }) {
  return St({
    id: "signUpActor",
    initial: "init",
    predictableActionArguments: true,
    states: {
      init: {
        always: [
          { cond: "shouldConfirmSignUp", target: "confirmSignUp" },
          { target: "signUp" }
        ]
      },
      autoSignIn: {
        tags: "pending",
        invoke: { src: "autoSignIn", ...Lb }
      },
      fetchUserAttributes: {
        invoke: {
          src: "fetchUserAttributes",
          ...Bb
        }
      },
      federatedSignIn: Ua("signUp"),
      resetPassword: {
        invoke: { src: "resetPassword", ...Db }
      },
      resendSignUpCode: {
        tags: "pending",
        entry: "sendUpdate",
        exit: "sendUpdate",
        invoke: {
          src: "resendSignUpCode",
          onDone: {
            actions: ["setCodeDeliveryDetails", "sendUpdate"],
            target: "#signUpActor.confirmSignUp"
          },
          onError: [
            {
              cond: "isUserAlreadyConfirmed",
              target: "#signUpActor.resolved"
            },
            { actions: ["setRemoteError", "sendUpdate"] }
          ]
        }
      },
      signUp: {
        type: "parallel",
        exit: "clearTouched",
        on: {
          FEDERATED_SIGN_IN: { target: "federatedSignIn" }
        },
        states: {
          validation: {
            initial: "pending",
            states: {
              pending: {
                invoke: {
                  src: "validateSignUp",
                  onDone: {
                    actions: "clearValidationError",
                    target: "valid"
                  },
                  onError: { actions: "setFieldErrors", target: "invalid" }
                }
              },
              valid: { entry: "sendUpdate" },
              invalid: { entry: "sendUpdate" }
            },
            on: {
              BLUR: { actions: "handleBlur", target: ".pending" },
              CHANGE: { actions: "handleInput", target: ".pending" }
            }
          },
          submission: {
            initial: "idle",
            states: {
              idle: {
                entry: ["sendUpdate"],
                on: {
                  SUBMIT: { actions: "handleSubmit", target: "validate" }
                }
              },
              validate: {
                entry: "sendUpdate",
                invoke: {
                  src: "validateSignUp",
                  onDone: {
                    target: "handleSignUp",
                    actions: "clearValidationError"
                  },
                  onError: { actions: "setFieldErrors", target: "idle" }
                }
              },
              handleSignUp: {
                tags: "pending",
                entry: ["setUsernameSignUp", "clearError"],
                exit: "sendUpdate",
                invoke: {
                  src: "handleSignUp",
                  onDone: [
                    {
                      cond: "hasCompletedSignUp",
                      actions: "setNextSignUpStep",
                      target: "#signUpActor.resolved"
                    },
                    {
                      cond: "shouldAutoSignIn",
                      actions: "setNextSignUpStep",
                      target: "#signUpActor.autoSignIn"
                    },
                    {
                      actions: [
                        "setCodeDeliveryDetails",
                        "setNextSignUpStep"
                      ],
                      target: "#signUpActor.init"
                    }
                  ],
                  onError: {
                    actions: ["sendUpdate", "setRemoteError"],
                    target: "idle"
                  }
                }
              }
            }
          }
        }
      },
      confirmSignUp: {
        initial: "edit",
        entry: "sendUpdate",
        states: {
          edit: {
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              CHANGE: { actions: "handleInput" },
              BLUR: { actions: "handleBlur" },
              RESEND: "#signUpActor.resendSignUpCode"
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmSignUp",
              onDone: [
                {
                  cond: "shouldAutoSignIn",
                  actions: ["setNextSignUpStep", "clearFormValues"],
                  target: "#signUpActor.autoSignIn"
                },
                {
                  actions: "setNextSignUpStep",
                  target: "#signUpActor.init"
                }
              ],
              onError: {
                actions: ["setRemoteError", "sendUpdate"],
                target: "edit"
              }
            }
          }
        }
      },
      resolved: {
        type: "final",
        data: (t) => ({
          challengeName: t.challengeName,
          missingAttributes: t.missingAttributes,
          remoteError: t.remoteError,
          step: t.step,
          totpSecretCode: t.totpSecretCode,
          username: t.username,
          unverifiedUserAttributes: t.unverifiedUserAttributes,
          allowedMfaTypes: t.allowedMfaTypes
        })
      }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...qt, sendUpdate: Dn() },
    guards: Yn,
    services: {
      autoSignIn() {
        return autoSignIn();
      },
      async fetchUserAttributes() {
        return fetchUserAttributes2();
      },
      confirmSignUp({ formValues: t, username: n }) {
        const { confirmation_code: r } = t, o = { username: n, confirmationCode: r };
        return e.handleConfirmSignUp(o);
      },
      resendSignUpCode({ username: t }) {
        return e.handleResendSignUpCode({ username: t });
      },
      signInWithRedirect(t, { data: n }) {
        return signInWithRedirect(n);
      },
      handleSignUp(t) {
        const { formValues: n, loginMechanisms: r, username: o } = t, i = r[0], a = k_(o, n, i);
        return e.handleSignUp(a);
      },
      async validateSignUp(t) {
        return qn(t.formValues, t.touched, t.passwordSettings, [
          // Validation of password
          e.validateFormPassword,
          // Validation for default form fields
          e.validateConfirmPassword,
          e.validatePreferredUsername,
          // Validation for any custom Sign Up fields
          e.validateCustomSignUp
        ]);
      }
    }
  });
}
var Gb = () => St({
  initial: "pending",
  id: "signOutActor",
  predictableActionArguments: true,
  states: {
    pending: {
      tags: "pending",
      invoke: {
        src: "signOut",
        onDone: "resolved",
        onError: "rejected"
      }
    },
    resolved: { type: "final" },
    rejected: { type: "final" }
  }
}, {
  services: {
    signOut: () => signOut()
  }
});
function Wb() {
  return St({
    id: "verifyUserAttributesActor",
    initial: "selectUserAttributes",
    predictableActionArguments: true,
    states: {
      selectUserAttributes: {
        initial: "edit",
        exit: ["clearError", "clearTouched", "sendUpdate"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SKIP: { target: "#verifyUserAttributesActor.resolved" },
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "sendUserAttributeVerificationCode",
              onDone: {
                actions: [
                  "setSelectedUserAttribute",
                  "setCodeDeliveryDetails"
                ],
                target: "#verifyUserAttributesActor.confirmVerifyUserAttribute"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      confirmVerifyUserAttribute: {
        initial: "edit",
        exit: ["clearError", "clearFormValues", "clearTouched"],
        states: {
          edit: {
            entry: "sendUpdate",
            on: {
              SUBMIT: { actions: "handleSubmit", target: "submit" },
              SKIP: "#verifyUserAttributesActor.resolved",
              CHANGE: { actions: "handleInput" }
            }
          },
          submit: {
            tags: "pending",
            entry: ["clearError", "sendUpdate"],
            invoke: {
              src: "confirmVerifyUserAttribute",
              onDone: {
                actions: [
                  "setConfirmAttributeCompleteStep",
                  "clearSelectedUserAttribute"
                ],
                target: "#verifyUserAttributesActor.resolved"
              },
              onError: {
                actions: "setRemoteError",
                target: "edit"
              }
            }
          }
        }
      },
      resolved: { type: "final", data: ({ step: e }) => ({ step: e }) }
    }
  }, {
    // sendUpdate is a HOC
    actions: { ...qt, sendUpdate: Dn() },
    services: {
      sendUserAttributeVerificationCode({ formValues: { unverifiedAttr: e } }) {
        return sendUserAttributeVerificationCode({
          userAttributeKey: e
        });
      },
      async confirmVerifyUserAttribute({ formValues: { confirmation_code: e }, selectedUserAttribute: t }) {
        return confirmUserAttribute({
          confirmationCode: e,
          userAttributeKey: t
        });
      },
      async validateFields(e) {
        return qn(e.formValues, e.touched, e.passwordSettings, [
          Ze.validateFormPassword,
          Ze.validateConfirmPassword
        ]);
      }
    }
  });
}
var ln = (e, t) => {
  var n, r, o, i, a, s;
  return {
    ...e.actorDoneData,
    step: ((n = e == null ? void 0 : e.actorDoneData) == null ? void 0 : n.step) ?? t,
    // initialize empty objects on actor start
    formValues: {},
    touched: {},
    validationError: {},
    // values included on `context.config` that should be available in actors
    formFields: (r = e.config) == null ? void 0 : r.formFields,
    loginMechanisms: (o = e.config) == null ? void 0 : o.loginMechanisms,
    passwordSettings: (i = e.config) == null ? void 0 : i.passwordSettings,
    signUpAttributes: (a = e.config) == null ? void 0 : a.signUpAttributes,
    socialProviders: (s = e.config) == null ? void 0 : s.socialProviders
  };
};
var { choose: Vb, stop: jb } = Zi;
var Ut = (e) => jb(e);
var Hb = {
  on: {
    INIT: {
      actions: "configure",
      target: "getConfig"
    },
    SIGN_OUT: "#authenticator.signOut"
  }
};
var Kb = {
  always: { actions: "configure", target: "getConfig" }
};
function Yb(e) {
  const { useNextWaitConfig: t, ...n } = {};
  return St({
    id: "authenticator",
    initial: "idle",
    context: {
      user: void 0,
      config: {},
      services: Ze,
      actorRef: void 0,
      hasSetup: false
    },
    predictableActionArguments: true,
    states: {
      // See: https://xstate.js.org/docs/guides/communication.html#invoking-promises
      idle: {
        invoke: {
          src: "handleGetCurrentUser",
          onDone: { actions: "setUser", target: "setup" },
          onError: { target: "setup" }
        }
      },
      setup: {
        initial: "initConfig",
        states: {
          initConfig: t ? Kb : Hb,
          getConfig: {
            invoke: {
              src: "getAmplifyConfig",
              onDone: [
                {
                  actions: ["applyAmplifyConfig", "setHasSetup"],
                  cond: "hasUser",
                  target: "#authenticator.authenticated"
                },
                {
                  actions: ["applyAmplifyConfig", "setHasSetup"],
                  target: "goToInitialState"
                }
              ]
            }
          },
          goToInitialState: {
            always: [
              {
                cond: "isInitialStateSignUp",
                target: "#authenticator.signUpActor"
              },
              {
                cond: "isInitialStateResetPassword",
                target: "#authenticator.forgotPasswordActor"
              },
              { target: "#authenticator.signInActor" }
            ]
          }
        }
      },
      getCurrentUser: {
        invoke: {
          src: "handleGetCurrentUser",
          onDone: {
            actions: "setUser",
            target: "#authenticator.authenticated"
          },
          onError: { target: "#authenticator.setup" }
        }
      },
      signInActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignInActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: Ut("signInActor")
          }
        },
        on: {
          FORGOT_PASSWORD: "forgotPasswordActor",
          SIGN_IN: "signInActor",
          SIGN_UP: "signUpActor",
          "done.invoke.signInActor": [
            {
              cond: "hasCompletedAttributeConfirmation",
              target: "#authenticator.getCurrentUser"
            },
            {
              cond: "isShouldConfirmUserAttributeStep",
              actions: "setActorDoneData",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              cond: "isResetPasswordStep",
              actions: "setActorDoneData",
              target: "#authenticator.forgotPasswordActor"
            },
            {
              cond: "isConfirmSignUpStep",
              actions: "setActorDoneData",
              target: "#authenticator.signUpActor"
            }
          ]
        }
      },
      signUpActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignUpActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: Ut("signUpActor")
          }
        },
        on: {
          SIGN_IN: "signInActor",
          "done.invoke.signUpActor": [
            {
              cond: "hasCompletedAttributeConfirmation",
              target: "#authenticator.getCurrentUser"
            },
            {
              cond: "isShouldConfirmUserAttributeStep",
              actions: "setActorDoneData",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              cond: "isConfirmUserAttributeStep",
              target: "#authenticator.verifyUserAttributesActor"
            },
            {
              actions: "setActorDoneData",
              target: "#authenticator.signInActor"
            }
          ]
        }
      },
      forgotPasswordActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: {
              actions: "spawnForgotPasswordActor",
              target: "runActor"
            }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: Ut("forgotPasswordActor")
          }
        },
        on: {
          SIGN_IN: "signInActor",
          "done.invoke.forgotPasswordActor": [
            { target: "#authenticator.signInActor" }
          ]
        }
      },
      verifyUserAttributesActor: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: {
              actions: "spawnVerifyUserAttributesActor",
              target: "runActor"
            }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: Ut("verifyUserAttributesActor")
          }
        },
        on: {
          "done.invoke.verifyUserAttributesActor": [
            {
              actions: "setActorDoneData",
              target: "#authenticator.getCurrentUser"
            }
          ]
        }
      },
      authenticated: {
        initial: "idle",
        states: {
          idle: { on: { TOKEN_REFRESH: "refreshUser" } },
          refreshUser: {
            invoke: {
              src: "#authenticator.getCurrentUser",
              onDone: { actions: "setUser", target: "idle" },
              onError: { target: "#authenticator.signOut" }
            }
          }
        },
        on: { SIGN_OUT: "signOut" }
      },
      signOut: {
        initial: "spawnActor",
        states: {
          spawnActor: {
            always: { actions: "spawnSignOutActor", target: "runActor" }
          },
          runActor: {
            entry: "clearActorDoneData",
            exit: Ut("signOutActor")
          }
        },
        on: {
          "done.invoke.signOutActor": {
            actions: "clearUser",
            target: "setup.getConfig"
          }
        }
      }
    },
    on: {
      SIGN_IN_WITH_REDIRECT: { target: "#authenticator.getCurrentUser" },
      CHANGE: { actions: "forwardToActor" },
      BLUR: { actions: "forwardToActor" },
      SUBMIT: { actions: "forwardToActor" },
      FEDERATED_SIGN_IN: { actions: "forwardToActor" },
      RESEND: { actions: "forwardToActor" },
      SIGN_IN: { actions: "forwardToActor" },
      SKIP: { actions: "forwardToActor" }
    }
  }, {
    actions: {
      ...qt,
      forwardToActor: Vb([
        { cond: "hasActor", actions: _u(({ actorRef: o }) => o) }
      ]),
      setActorDoneData: Le({
        actorDoneData: (o, i) => ({
          challengeName: i.data.challengeName,
          codeDeliveryDetails: i.data.codeDeliveryDetails,
          missingAttributes: i.data.missingAttributes,
          remoteError: i.data.remoteError,
          username: i.data.username,
          step: i.data.step,
          totpSecretCode: i.data.totpSecretCode,
          unverifiedUserAttributes: i.data.unverifiedUserAttributes,
          allowedMfaTypes: i.data.allowedMfaTypes
        })
      }),
      applyAmplifyConfig: Le({
        config(o, { data: i }) {
          const { loginMechanisms: a = i.loginMechanisms ?? [], signUpAttributes: s = i.signUpAttributes ?? [], socialProviders: l = i.socialProviders ?? [], initialState: c, formFields: d, passwordSettings: m = i.passwordFormat ?? {} } = o.config;
          return a.length === 0 && a.push("username"), {
            formFields: qb(d) ?? {},
            initialState: c,
            loginMechanisms: a,
            passwordSettings: m,
            signUpAttributes: s,
            socialProviders: l
          };
        }
      }),
      spawnSignInActor: Le({
        actorRef: (o, i) => {
          const { services: a } = o, s = xb({ services: a }).withContext(ln(o, "SIGN_IN"));
          return kt(s, { name: "signInActor" });
        }
      }),
      spawnSignUpActor: Le({
        actorRef: (o, i) => {
          const { services: a } = o, s = zb({ services: a }).withContext(ln(o, "SIGN_UP"));
          return kt(s, { name: "signUpActor" });
        }
      }),
      spawnForgotPasswordActor: Le({
        actorRef: (o, i) => {
          const { services: a } = o, s = Ob({ services: a }).withContext(ln(o, "FORGOT_PASSWORD"));
          return kt(s, { name: "forgotPasswordActor" });
        }
      }),
      spawnVerifyUserAttributesActor: Le({
        actorRef: (o) => {
          const i = Wb().withContext(ln(o));
          return kt(i, { name: "verifyUserAttributesActor" });
        }
      }),
      spawnSignOutActor: Le({
        actorRef: (o) => {
          const i = Gb().withContext({ user: o == null ? void 0 : o.user });
          return kt(i, { name: "signOutActor" });
        }
      }),
      configure: Le((o, i) => {
        const { services: a, ...s } = Zs(n) ? i.data ?? {} : n;
        return {
          services: { ...Ze, ...a },
          config: s
        };
      }),
      setHasSetup: Le({ hasSetup: true })
    },
    guards: {
      ...Yn,
      hasActor: ({ actorRef: o }) => !!o,
      isInitialStateSignUp: ({ config: o }) => o.initialState === "signUp",
      isInitialStateResetPassword: ({ config: o }) => o.initialState === "forgotPassword",
      shouldSetup: ({ hasSetup: o }) => !o,
      hasUser: ({ user: o }) => !!o
    },
    services: {
      getAmplifyConfig: ({ services: o }) => o.getAmplifyConfig(),
      handleGetCurrentUser: ({ services: o }) => o.getCurrentUser()
    }
  });
}
function qb(e) {
  return e && Object.keys(e).forEach((t) => {
    Object.keys(e[t]).forEach((n) => {
      let r = e[t][n];
      r.required = r.isRequired;
    });
  }), e;
}
var ve = {
  Accordion: "amplify-accordion",
  AccordionItem: "amplify-accordion__item",
  AccordionItemTrigger: "amplify-accordion__item__trigger",
  AccordionItemContent: "amplify-accordion__item__content",
  AccordionItemIcon: "amplify-accordion__item__icon",
  Alert: "amplify-alert",
  AlertIcon: "amplify-alert__icon",
  AlertHeading: "amplify-alert__heading",
  AlertBody: "amplify-alert__body",
  AlertDismiss: "amplify-alert__dismiss",
  Autocomplete: "amplify-autocomplete",
  AutocompleteMenu: "amplify-autocomplete__menu",
  AutocompleteMenuEmpty: "amplify-autocomplete__menu--empty",
  AutocompleteMenuFooter: "amplify-autocomplete__menu__footer",
  AutocompleteMenuHeader: "amplify-autocomplete__menu__header",
  AutocompleteMenuLoading: "amplify-autocomplete__menu--loading",
  AutocompleteMenuOption: "amplify-autocomplete__menu__option",
  AutocompleteMenuOptions: "amplify-autocomplete__menu__options",
  Avatar: "amplify-avatar",
  AvatarIcon: "amplify-avatar__icon",
  AvatarImage: "amplify-avatar__image",
  AvatarLoader: "amplify-avatar__loader",
  AIConversation: "amplify-ai-conversation",
  AIConversationScrollView: "amplify-ai-conversation__scrollview",
  AIConversationAttachment: "amplify-ai-conversation__attachment",
  AIConversationAttachmentList: "amplify-ai-conversation__attachment__list",
  AIConversationAttachmentImage: "amplify-ai-conversation__attachment__image",
  AIConversationAttachmentName: "amplify-ai-conversation__attachment__name",
  AIConversationAttachmentSize: "amplify-ai-conversation__attachment__size",
  AIConversationAttachmentRemove: "amplify-ai-conversation__attachment__remove",
  AIConversationForm: "amplify-ai-conversation__form",
  AIConversationFormAttach: "amplify-ai-conversation__form__attach",
  AIConversationFormError: "amplify-ai-conversation__form__error",
  AIConversationFormSend: "amplify-ai-conversation__form__send",
  AIConversationFormField: "amplify-ai-conversation__form__field",
  AIConversationFormDropzone: "amplify-ai-conversation__form__dropzone",
  AIConversationMessage: "amplify-ai-conversation__message",
  AIConversationMessageAvatar: "amplify-ai-conversation__message__avatar",
  AIConversationMessageSender: "amplify-ai-conversation__message__sender",
  AIConversationMessageSenderUsername: "amplify-ai-conversation__message__sender__username",
  AIConversationMessageSenderTimestamp: "amplify-ai-conversation__message__sender__timestamp",
  AIConversationMessageBody: "amplify-ai-conversation__message__body",
  AIConversationMessageContent: "amplify-ai-conversation__message__content",
  AIConversationMessageActions: "amplify-ai-conversation__message__actions",
  AIConversationMessageList: "amplify-ai-conversation__message__list",
  AIConversationPrompt: "amplify-ai-conversation__prompt",
  Badge: "amplify-badge",
  Breadcrumbs: "amplify-breadcrumbs",
  BreadcrumbsList: "amplify-breadcrumbs__list",
  BreadcrumbsItem: "amplify-breadcrumbs__item",
  BreadcrumbsSeparator: "amplify-breadcrumbs__separator",
  BreadcrumbsLink: "amplify-breadcrumbs__link",
  Button: "amplify-button",
  ButtonGroup: "amplify-buttongroup",
  ButtonLoaderWrapper: "amplify-button__loader-wrapper",
  Card: "amplify-card",
  Checkbox: "amplify-checkbox",
  CheckboxButton: "amplify-checkbox__button",
  CheckboxIcon: "amplify-checkbox__icon",
  CheckboxInput: "amplify-checkbox__input",
  CheckboxLabel: "amplify-checkbox__label",
  CheckboxField: "amplify-checkboxfield",
  Collection: "amplify-collection",
  CollectionItems: "amplify-collection-items",
  CollectionSearch: "amplify-collection-search",
  CollectionPagination: "amplify-collection-pagination",
  CountryCodeSelect: "amplify-countrycodeselect",
  DialCodeSelect: "amplify-dialcodeselect",
  Divider: "amplify-divider",
  DividerLabel: "amplify-divider--label",
  DropZone: "amplify-dropzone",
  Field: "amplify-field",
  FieldDescription: "amplify-field__description",
  FieldErrorMessage: "amplify-field__error-message",
  FieldGroup: "amplify-field-group",
  FieldGroupControl: "amplify-field-group__control",
  FieldGroupOuterEnd: "amplify-field-group__outer-end",
  FieldGroupOuterStart: "amplify-field-group__outer-start",
  FieldGroupInnerEnd: "amplify-field-group__inner-end",
  FieldGroupInnerStart: "amplify-field-group__inner-start",
  FieldGroupIcon: "amplify-field-group__icon",
  FieldGroupIconButton: "amplify-field-group__icon-button",
  FieldGroupHasInnerEnd: "amplify-field-group--has-inner-end",
  FieldGroupHasInnerStart: "amplify-field-group--has-inner-start",
  FieldShowPassword: "amplify-field__show-password",
  FieldGroupFieldWrapper: "amplify-field-group__field-wrapper",
  Fieldset: "amplify-fieldset",
  FieldsetLegend: "amplify-fieldset__legend",
  FileUploader: "amplify-fileuploader",
  FileUploaderDropZone: "amplify-fileuploader__dropzone",
  FileUploaderDropZoneIcon: "amplify-fileuploader__dropzone__icon",
  FileUploaderDropZoneText: "amplify-fileuploader__dropzone__text",
  FileUploaderFilePicker: "amplify-fileuploader__file__picker",
  FileUploaderFile: "amplify-fileuploader__file",
  FileUploaderFileWrapper: "amplify-fileuploader__file__wrapper",
  FileUploaderFileList: "amplify-fileuploader__file__list",
  FileUploaderFileName: "amplify-fileuploader__file__name",
  FileUploaderFileSize: "amplify-fileuploader__file__size",
  FileUploaderFileInfo: "amplify-fileuploader__file__info",
  FileUploaderFileImage: "amplify-fileuploader__file__image",
  FileUploaderFileMain: "amplify-fileuploader__file__main",
  FileUploaderFileStatus: "amplify-fileuploader__file__status",
  FileUploaderLoader: "amplify-fileuploader__loader",
  FileUploaderPreviewer: "amplify-fileuploader__previewer",
  FileUploaderPreviewerText: "amplify-fileuploader__previewer__text",
  FileUploaderPreviewerActions: "amplify-fileuploader__previewer__actions",
  FileUploaderPreviewerFooter: "amplify-fileuploader__previewer__footer",
  Flex: "amplify-flex",
  Grid: "amplify-grid",
  Heading: "amplify-heading",
  HighlightMatch: "amplify-highlightmatch",
  HighlightMatchHighlighted: "amplify-highlightmatch__highlighted",
  Icon: "amplify-icon",
  Image: "amplify-image",
  Input: "amplify-input",
  Label: "amplify-label",
  Link: "amplify-link",
  Loader: "amplify-loader",
  LoaderLabel: "amplify-loader__label",
  MenuContent: "amplify-menu__content",
  MenuItem: "amplify-menu__content__item",
  MenuTrigger: "amplify-menu__trigger",
  MenuWrapper: "amplify-menu__wrapper",
  Message: "amplify-message",
  MessageIcon: "amplify-message__icon",
  MessageHeading: "amplify-message__heading",
  MessageBody: "amplify-message__body",
  MessageContent: "amplify-message__content",
  MessageDismiss: "amplify-message__dismiss",
  Pagination: "amplify-pagination",
  PaginationItem: "amplify-pagination__item",
  PasswordField: "amplify-passwordfield",
  PhoneNumberField: "amplify-phonenumberfield",
  Placeholder: "amplify-placeholder",
  Radio: "amplify-radio",
  RadioButton: "amplify-radio__button",
  RadioInput: "amplify-radio__input",
  RadioLabel: "amplify-radio__label",
  RadioGroupField: "amplify-radiogroupfield",
  RadioGroup: "amplify-radiogroup",
  Rating: "amplify-rating",
  RatingItem: "amplify-rating__item",
  RatingIcon: "amplify-rating__icon",
  RatingLabel: "amplify-rating__label",
  ScrollView: "amplify-scrollview",
  SearchField: "amplify-searchfield",
  SearchFieldClear: "amplify-searchfield__clear",
  SearchFieldSearch: "amplify-searchfield__search",
  Select: "amplify-select",
  SelectField: "amplify-selectfield",
  SelectWrapper: "amplify-select__wrapper",
  SelectIcon: "amplify-select__icon",
  SliderField: "amplify-sliderfield",
  SliderFieldGroup: "amplify-sliderfield__group",
  SliderFieldLabel: "amplify-sliderfield__label",
  SliderFieldRange: "amplify-sliderfield__range",
  SliderFieldRoot: "amplify-sliderfield__root",
  SliderFieldThumb: "amplify-sliderfield__thumb",
  SliderFieldTrack: "amplify-sliderfield__track",
  StepperField: "amplify-stepperfield",
  StepperFieldButtonDecrease: "amplify-stepperfield__button--decrease",
  StepperFieldButtonIncrease: "amplify-stepperfield__button--increase",
  StepperFieldInput: "amplify-stepperfield__input",
  StorageImage: "amplify-storageimage",
  StorageManager: "amplify-storagemanager",
  StorageManagerDropZone: "amplify-storagemanager__dropzone",
  StorageManagerDropZoneIcon: "amplify-storagemanager__dropzone__icon",
  StorageManagerDropZoneText: "amplify-storagemanager__dropzone__text",
  StorageManagerFilePicker: "amplify-storagemanager__file__picker",
  StorageManagerFile: "amplify-storagemanager__file",
  StorageManagerFileWrapper: "amplify-storagemanager__file__wrapper",
  StorageManagerFileList: "amplify-storagemanager__file__list",
  StorageManagerFileName: "amplify-storagemanager__file__name",
  StorageManagerFileSize: "amplify-storagemanager__file__size",
  StorageManagerFileInfo: "amplify-storagemanager__file__info",
  StorageManagerFileImage: "amplify-storagemanager__file__image",
  StorageManagerFileMain: "amplify-storagemanager__file__main",
  StorageManagerFileStatus: "amplify-storagemanager__file__status",
  StorageManagerLoader: "amplify-storagemanager__loader",
  StorageManagerPreviewer: "amplify-storagemanager__previewer",
  StorageManagerPreviewerText: "amplify-storagemanager__previewer__text",
  StorageManagerPreviewerActions: "amplify-storagemanager__previewer__actions",
  StorageManagerPreviewerFooter: "amplify-storagemanager__previewer__footer",
  SwitchField: "amplify-switchfield",
  SwitchLabel: "amplify-switch__label",
  SwitchThumb: "amplify-switch__thumb",
  SwitchTrack: "amplify-switch__track",
  SwitchWrapper: "amplify-switch__wrapper",
  Table: "amplify-table",
  TableCaption: "amplify-table__caption",
  TableBody: "amplify-table__body",
  TableTd: "amplify-table__td",
  TableTh: "amplify-table__th",
  TableFoot: "amplify-table__foot",
  TableHead: "amplify-table__head",
  TableRow: "amplify-table__row",
  Tabs: "amplify-tabs",
  TabsList: "amplify-tabs__list",
  TabsItem: "amplify-tabs__item",
  TabsPanel: "amplify-tabs__panel",
  Text: "amplify-text",
  Textarea: "amplify-textarea",
  TextAreaField: "amplify-textareafield",
  TextField: "amplify-textfield",
  ToggleButton: "amplify-togglebutton",
  ToggleButtonGroup: "amplify-togglebuttongroup",
  VisuallyHidden: "amplify-visually-hidden"
};
var Jb = ({ componentName: e, packageName: t, version: n }) => {
  const r = [`ui-${t}`, n];
  switch (e) {
    case "AIConversation": {
      setCustomUserAgent({
        ...Bs,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "Authenticator": {
      setCustomUserAgent({
        ...Gs,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "ChangePassword":
    case "DeleteUser": {
      setCustomUserAgent({
        ...zs,
        additionalDetails: [["AccountSettings"], r]
      });
      break;
    }
    case "FileUploader": {
      setCustomUserAgent({
        ...Ws,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "InAppMessaging": {
      setCustomUserAgent({
        ...Vs,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "LocationSearch": {
      setCustomUserAgent({
        ...js,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "MapView": {
      setCustomUserAgent({
        ...Hs,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "StorageManager": {
      setCustomUserAgent({
        ...Ks,
        additionalDetails: [[e], r]
      });
      break;
    }
    case "StorageBrowser": {
      setCustomUserAgent({
        ...Ys,
        additionalDetails: [[e], r]
      });
      break;
    }
  }
  return Xs;
};
var Zb = {
  key: 0,
  class: "amplify-flex amplify-alert amplify-alert--error amplify-authenticator__base",
  "data-variation": "error",
  role: "alert"
};
var Qb = { class: "amplify-flex amplify-authenticator__icon-wrapper" };
var Xb = createBaseVNode("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  class: "amplify-icon",
  "aria-hidden": "true",
  viewBox: "0 0 24 24",
  fill: "currentColor"
}, [
  createBaseVNode("path", { d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z" })
], -1);
var eC = createBaseVNode("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  class: "amplify-icon",
  "aria-hidden": "true",
  viewBox: "0 0 24 24",
  fill: "currentColor"
}, [
  createBaseVNode("path", { d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" })
], -1);
var Me = defineComponent({
  __name: "base-alert",
  setup(e) {
    const t = ref(true), n = F("Dismiss alert");
    function r() {
      t.value = false;
    }
    return (o, i) => {
      const a = _e;
      return t.value ? (openBlock(), createElementBlock("div", Zb, [
        createBaseVNode("div", Qb, [
          Xb,
          createBaseVNode("div", null, [
            renderSlot(o.$slots, "default")
          ])
        ]),
        createVNode(a, {
          class: "amplify-field-group__control amplify-alert__dismiss",
          "aria-label": unref(n),
          fullwidth: false,
          variation: "link",
          type: "button",
          onClick: r
        }, {
          default: withCtx(() => [
            eC
          ]),
          _: 1
        }, 8, ["aria-label"])
      ])) : createCommentVNode("", true);
    };
  }
});
var Ne = defineComponent({
  __name: "base-field-set",
  setup(e) {
    const t = useSlots();
    return (n, r) => renderSlot(n.$slots, "fieldSetI", mergeProps(n.$attrs, {
      slotData: unref(t).default && unref(t).default()
    }), () => [
      createBaseVNode("fieldset", mergeProps(n.$attrs, { "data-amplify-fieldset": "" }), [
        renderSlot(n.$slots, "default")
      ], 16)
    ]);
  }
});
function tC(e) {
  return getCurrentScope() ? (onScopeDispose(e), true) : false;
}
function Fa(e) {
  let t = 0, n, r;
  const o = () => {
    t -= 1, r && t <= 0 && (r.stop(), n = void 0, r = void 0);
  };
  return (...i) => (t += 1, n || (r = effectScope(true), n = r.run(() => e(...i))), tC(o), n);
}
function nC(e) {
  return "state" in e;
}
var di = function() {
};
function rC(e) {
  return "getSnapshot" in e ? e.getSnapshot() : nC(e) ? e.state : void 0;
}
function oC(e, t) {
  t === void 0 && (t = rC);
  var n = isRef(e) ? e : shallowRef(e), r = shallowRef(t(n.value)), o = function(i) {
    n.value.send(i);
  };
  return watch(n, function(i, a, s) {
    r.value = t(i);
    var l = i.subscribe({
      next: function(c) {
        return r.value = c;
      },
      error: di,
      complete: di
    }).unsubscribe;
    s(function() {
      return l();
    });
  }, {
    immediate: true
  }), { state: r, send: o };
}
var iC = (e) => {
  var t, n, r;
  return {
    ...(r = (n = (t = Ur(e)) == null ? void 0 : t.formFields) == null ? void 0 : n.setupTotp) == null ? void 0 : r.QR
  };
};
var oo = Fa(() => {
  const e = Yb(), t = ra(e).start(), n = ref("configuring"), { state: r, send: o } = oC(t), i = () => {
    n.value = "authenticated";
  }, a = () => {
    n.value = "unauthenticated";
  }, s = el(
    t,
    (l, c) => Ei(l, c, { onSignIn: i, onSignOut: a })
  );
  return getCurrentUser2().then(() => {
    n.value = "authenticated";
  }).catch(() => {
    n.value = "unauthenticated";
  }), onScopeDispose(() => {
    s();
  }), { authStatus: n, service: t, send: o, state: r };
});
var he = Fa(() => {
  const { authStatus: e, state: t, send: n } = oo(), r = reactive({});
  return watchEffect(() => {
    const o = al({ send: n, state: t.value });
    for (const a of Object.keys(o))
      r[a] = o[a];
    const i = o.route === "setupTotp" ? iC(t.value) : null;
    r.QRFields = i, r.authStatus = e.value, r.send = n, r.state = t;
  }), r;
});
var aC = (e = 21) => crypto.getRandomValues(new Uint8Array(e)).reduce((t, n) => (n &= 63, n < 36 ? t += n.toString(36) : n < 62 ? t += (n - 26).toString(36).toUpperCase() : n > 62 ? t += "-" : t += "_", t), "");
var Jt = defineComponent({
  __name: "base-input",
  emits: ["update:modelValue"],
  setup(e, { emit: t }) {
    const n = (r) => {
      t("update:modelValue", r.target.value);
    };
    return (r, o) => (openBlock(), createElementBlock("input", {
      onChange: o[0] || (o[0] = (i) => n(i)),
      "data-amplify-input": ""
    }, null, 32));
  }
});
var sC = {};
var lC = { "data-amplify-label": "" };
function cC(e, t) {
  return openBlock(), createElementBlock("label", lC, [
    renderSlot(e.$slots, "default")
  ]);
}
var Zt = Mn(sC, [["render", cC]]);
var uC = ["aria-label", "aria-checked"];
var dC = createBaseVNode("path", { d: "M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z" }, null, -1);
var fC = [
  dC
];
var pC = createBaseVNode("path", {
  d: "M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z",
  fill: "none"
}, null, -1);
var mC = createBaseVNode("path", { d: "M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z" }, null, -1);
var gC = [
  pC,
  mC
];
var hC = {
  inheritAttrs: false
};
var Oa = defineComponent({
  ...hC,
  __name: "password-control",
  props: {
    name: null,
    label: null,
    autocomplete: { default: "new-password" },
    hasError: { type: Boolean, default: false },
    labelHidden: { type: Boolean },
    placeholder: null,
    required: { type: Boolean, default: true },
    describedBy: null
  },
  setup(e) {
    const t = e, n = F("Show password"), r = F("Hide password"), o = ref("password"), i = ref(n), a = Math.floor(Math.random() * 999999), { name: s, label: l, autocomplete: c, hasError: d, labelHidden: m, placeholder: f2, required: p } = toRefs(t), y = ref("");
    function _() {
      i.value = i.value === n ? r : n, o.value = o.value === "password" ? "text" : "password";
    }
    const b = F((f2 == null ? void 0 : f2.value) ?? l.value), h2 = F(l.value);
    return (S, v) => {
      const w = Zt, E = Jt, I = me;
      return openBlock(), createBlock(I, {
        class: normalizeClass([
          unref(ve).Flex,
          unref(ve).Field,
          unref(ve).TextField,
          unref(ve).PasswordField
        ])
      }, {
        default: withCtx(() => [
          createVNode(w, {
            class: normalizeClass(["amplify-label", { "amplify-visually-hidden": unref(m) }]),
            for: "amplify-field-" + unref(a)
          }, {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(h2)), 1)
            ]),
            _: 1
          }, 8, ["class", "for"]),
          createVNode(I, {
            class: normalizeClass([unref(ve).Flex, unref(ve).FieldGroup])
          }, {
            default: withCtx(() => [
              createVNode(I, {
                class: normalizeClass(unref(ve).FieldGroupFieldWrapper)
              }, {
                default: withCtx(() => [
                  createVNode(E, mergeProps(S.$attrs, {
                    modelValue: y.value,
                    "onUpdate:modelValue": v[0] || (v[0] = (P) => y.value = P),
                    class: [
                      unref(ve).Input,
                      unref(ve).FieldGroupControl
                    ],
                    id: "amplify-field-" + unref(a),
                    "data-amplify-password": "true",
                    name: unref(s),
                    autocomplete: unref(c),
                    required: unref(p) ?? true,
                    placeholder: unref(b),
                    type: o.value,
                    "aria-invalid": unref(d),
                    "aria-describedBy": e.describedBy,
                    autocapitalize: "off"
                  }), null, 16, ["modelValue", "class", "id", "name", "autocomplete", "required", "placeholder", "type", "aria-invalid", "aria-describedBy"])
                ]),
                _: 1
              }, 8, ["class"]),
              createVNode(I, {
                class: normalizeClass(unref(ve).FieldGroupOuterEnd)
              }, {
                default: withCtx(() => [
                  createBaseVNode("button", {
                    "aria-label": i.value,
                    "aria-checked": o.value !== "password",
                    class: normalizeClass([
                      unref(ve).Button,
                      unref(ve).FieldGroupControl,
                      unref(ve).FieldShowPassword
                    ]),
                    "data-fullwidth": "false",
                    type: "button",
                    role: "switch",
                    onClick: _
                  }, [
                    o.value === "password" ? (openBlock(), createElementBlock("svg", {
                      key: 0,
                      xmlns: "http://www.w3.org/2000/svg",
                      fill: "currentColor",
                      viewBox: "0 0 24 24",
                      class: normalizeClass(unref(ve).Icon)
                    }, fC, 2)) : (openBlock(), createElementBlock("svg", {
                      key: 1,
                      xmlns: "http://www.w3.org/2000/svg",
                      fill: "currentColor",
                      viewBox: "0 0 24 24",
                      class: normalizeClass(unref(ve).Icon)
                    }, gC, 2))
                  ], 10, uC)
                ]),
                _: 1
              }, 8, ["class"])
            ]),
            _: 1
          }, 8, ["class"])
        ]),
        _: 1
      }, 8, ["class"]);
    };
  }
});
var yC = ["value", "selected"];
var vC = defineComponent({
  __name: "base-select",
  props: {
    selectValue: { default: "" },
    options: null
  },
  emits: ["update:selectValue"],
  setup(e, { emit: t }) {
    const n = e, { options: r, selectValue: o } = toRefs(n), i = (a) => {
      t("update:selectValue", a.target.value);
    };
    return (a, s) => (openBlock(), createElementBlock("select", {
      onChange: s[0] || (s[0] = (l) => i(l))
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(unref(r), (l, c) => (openBlock(), createElementBlock("option", {
        key: c,
        value: l,
        selected: l == unref(o) ? true : void 0
      }, toDisplayString(l), 9, yC))), 128))
    ], 32));
  }
});
var _C = createBaseVNode("svg", {
  xmlns: "http://www.w3.org/2000/svg",
  fill: "currentColor",
  viewBox: "0 0 24 24",
  class: "amplify-icon"
}, [
  createBaseVNode("path", { d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z" })
], -1);
var SC = defineComponent({
  __name: "alias-control",
  props: {
    label: { default: "Username" },
    name: { default: "username" },
    placeholder: { default: "" },
    autocomplete: { default: "" },
    labelHidden: { type: Boolean },
    required: { type: Boolean, default: true },
    dialCode: null,
    dialCodeList: null,
    type: { default: "text" },
    hasError: { type: Boolean },
    describedBy: null
  },
  setup(e) {
    const t = e, { label: n, name: r, placeholder: o, autocomplete: i, labelHidden: a, required: s, dialCode: l, dialCodeList: c } = toRefs(t), d = Math.floor(Math.random() * 999999), m = Math.floor(Math.random() * 999999);
    return (f2, p) => {
      const y = Zt, _ = vC, b = me, h2 = Jt;
      return openBlock(), createBlock(b, { class: "amplify-flex amplify-field amplify-textfield amplify-phonenumberfield" }, {
        default: withCtx(() => [
          createVNode(y, mergeProps({
            for: "amplify-field-" + unref(d),
            class: ["amplify-label", { "amplify-visually-hidden": unref(a) }]
          }, f2.$attrs), {
            default: withCtx(() => [
              createTextVNode(toDisplayString(unref(n)), 1)
            ]),
            _: 1
          }, 16, ["for", "class"]),
          createVNode(b, { class: "amplify-flex amplify-field-group" }, {
            default: withCtx(() => [
              createVNode(b, { class: "amplify-field-group__outer-start" }, {
                default: withCtx(() => [
                  e.type === "tel" ? (openBlock(), createBlock(b, {
                    key: 0,
                    class: "amplify-flex amplify-field amplify-selectfield amplify-countrycodeselect amplify-dialcodeselect amplify-authenticator__column"
                  }, {
                    default: withCtx(() => [
                      createVNode(y, mergeProps({
                        for: "amplify-field-" + unref(m),
                        class: "amplify-label amplify-visually-hidden"
                      }, f2.$attrs), {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString("Country Code"))
                        ]),
                        _: 1
                      }, 16, ["for"]),
                      createVNode(b, { class: "amplify-select__wrapper" }, {
                        default: withCtx(() => [
                          createVNode(_, {
                            class: "amplify-select amplify-field-group__control",
                            id: "amplify-field-" + unref(m),
                            autocomplete: "tel-country-code",
                            "aria-label": "country code",
                            name: "country_code",
                            options: unref(c),
                            "select-value": unref(l)
                          }, null, 8, ["id", "options", "select-value"]),
                          createVNode(b, { class: "amplify-flex amplify-select__icon" }, {
                            default: withCtx(() => [
                              _C
                            ]),
                            _: 1
                          })
                        ]),
                        _: 1
                      })
                    ]),
                    _: 1
                  })) : createCommentVNode("", true)
                ]),
                _: 1
              }),
              createVNode(b, { class: "amplify-field-group__field-wrapper" }, {
                default: withCtx(() => [
                  createVNode(h2, {
                    class: "amplify-input amplify-field-group__control",
                    id: "amplify-field-" + unref(d),
                    autocomplete: unref(i),
                    name: unref(r),
                    required: unref(s) ?? true,
                    type: e.type,
                    placeholder: unref(o),
                    "aria-invalid": e.hasError,
                    "aria-describedBy": e.describedBy,
                    autocapitalize: "off"
                  }, null, 8, ["id", "autocomplete", "name", "required", "type", "placeholder", "aria-invalid", "aria-describedBy"])
                ]),
                _: 1
              })
            ]),
            _: 1
          })
        ]),
        _: 1
      });
    };
  }
});
var wC = ["id"];
var $a = defineComponent({
  __name: "base-form-field",
  props: {
    name: { default: "" },
    formField: { default: () => ({}) }
  },
  setup(e) {
    const t = e, { name: n, formField: r } = toRefs(t), { validationErrors: o } = toRefs(he()), { type: i } = r.value, a = i === "password", s = aC(12), l = computed(() => dl(o.value[n.value])), c = computed(() => {
      var m;
      return ((m = l.value) == null ? void 0 : m.length) > 0;
    }), d = computed(() => c.value ? s : void 0);
    return (m, f2) => (openBlock(), createElementBlock(Fragment, null, [
      a ? (openBlock(), createBlock(Oa, {
        key: 0,
        name: unref(n),
        label: unref(r).label,
        placeholder: unref(r).placeholder,
        required: unref(r).isRequired,
        "label-hidden": unref(r).labelHidden,
        autocomplete: unref(r).autocomplete,
        hasError: unref(c),
        describedBy: unref(d)
      }, null, 8, ["name", "label", "placeholder", "required", "label-hidden", "autocomplete", "hasError", "describedBy"])) : (openBlock(), createBlock(SC, {
        key: 1,
        name: unref(n),
        label: unref(r).label,
        placeholder: unref(r).placeholder,
        required: unref(r).isRequired,
        "label-hidden": unref(r).labelHidden,
        autocomplete: unref(r).autocomplete,
        "dial-code": unref(r).dialCode,
        "dial-code-list": unref(r).dialCodeList,
        type: unref(r).type,
        hasError: unref(c),
        describedBy: unref(d)
      }, null, 8, ["name", "label", "placeholder", "required", "label-hidden", "autocomplete", "dial-code", "dial-code-list", "type", "hasError", "describedBy"])),
      unref(c) ? (openBlock(), createElementBlock("div", {
        key: 2,
        id: unref(d)
      }, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(unref(l), (p, y) => (openBlock(), createElementBlock("p", {
          key: y,
          role: "alert",
          "data-variation": "error",
          class: "amplify-text amplify-text--error"
        }, toDisplayString(unref(F)(p)), 1))), 128))
      ], 8, wC)) : createCommentVNode("", true)
    ], 64));
  }
});
var Fe = defineComponent({
  __name: "base-form-fields",
  props: {
    route: null
  },
  setup(e) {
    const t = e, { route: n } = toRefs(t), { state: r } = oo();
    let o = [];
    return onBeforeMount(() => {
      o = vc(n.value, r.value);
    }), (i, a) => (openBlock(true), createElementBlock(Fragment, null, renderList(unref(o), ([s, l]) => (openBlock(), createBlock($a, {
      name: s,
      key: s,
      formField: l
    }, null, 8, ["name", "formField"]))), 128));
  }
});
var cn = defineComponent({
  __name: "federated-sign-in-button",
  props: {
    provider: null
  },
  setup(e) {
    const t = e, { provider: n } = toRefs(t), { toFederatedSignIn: r } = he(), o = () => {
      r({ provider: n.value });
    };
    return (i, a) => {
      const s = _e;
      return openBlock(), createBlock(s, {
        class: "amplify-authenticator__federated-button",
        type: "button",
        onClick: o
      }, {
        default: withCtx(() => [
          renderSlot(i.$slots, "default")
        ]),
        _: 3
      });
    };
  }
});
var bC = createBaseVNode("svg", {
  "aria-label": "Amazon icon",
  class: "amplify-icon",
  viewBox: "0 0 248 268"
}, [
  createBaseVNode("path", {
    d: "M139.056521,147.024612 C133.548808,156.744524 124.782731,162.726926 115.087401,162.726926 C101.790721,162.726926 93.9937779,152.612964 93.9937779,137.68681 C93.9937779,108.224571 120.447551,102.879017 145.533369,102.879017 L145.533369,110.365976 C145.533369,123.831358 145.876354,135.063787 139.056521,147.024612 M207.206992,162.579655 C209.400505,165.692256 209.887066,169.437725 207.063416,171.770186 C199.996315,177.653081 187.429476,188.590967 180.513926,194.716661 L180.46208,194.621133 C178.176838,196.663031 174.862638,196.810303 172.27828,195.445057 C160.780281,185.9162 158.686473,181.494078 152.405048,172.403055 C133.405233,191.751331 119.909143,197.534719 95.309886,197.534719 C66.1281801,197.534719 43.4791563,179.599451 43.4791563,143.669212 C43.4791563,115.616003 58.6782107,96.5105248 80.4019706,87.1727225 C99.2063636,78.9096034 125.464714,77.4528107 145.533369,75.1641337 L145.533369,70.694248 C145.533369,62.4749122 146.167493,52.7510201 141.297893,45.6541312 C137.110277,39.2856386 129.018206,36.6586354 121.859376,36.6586354 C108.658413,36.6586354 96.9171331,43.4171982 94.0416364,57.4199213 C93.4593582,60.532522 91.1701278,63.5933787 88.003492,63.7406501 L54.4387473,60.1424518 C51.6150972,59.5095829 48.4484614,57.2248862 49.2740201,52.8982915 C56.9712583,12.2553679 93.7983558,0 126.732964,0 C143.587124,0 165.606011,4.47386604 178.902691,17.2148315 C195.760839,32.917146 194.149604,53.8694866 194.149604,76.6726704 L194.149604,130.542157 C194.149604,146.734049 200.87372,153.830938 207.206992,162.579655 Z M233.826346,208.038962 C230.467669,203.683255 211.550709,205.9821 203.056405,206.998432 C200.470662,207.321077 200.076227,205.042397 202.406981,203.404973 C217.475208,192.664928 242.201125,195.766353 245.081698,199.363845 C247.966255,202.981502 244.336653,228.071183 230.172839,240.049379 C228.001452,241.888455 225.929671,240.904388 226.89783,238.468418 C230.077218,230.430525 237.204944,212.418868 233.826346,208.038962 Z M126.768855,264 C74.0234043,264 42.0764048,241.955028 17.7852554,217.541992 C12.9733903,212.705982 6.71799208,206.295994 3.31151296,200.690918 C1.90227474,198.372135 5.59096074,195.021875 8.0442063,196.84375 C38.2390146,219.267578 82.1011654,239.538304 125.529506,239.538304 C154.819967,239.538304 191.046475,227.469543 220.66851,214.867659 C225.146771,212.966167 225.146771,219.180222 224.511585,221.060516 C224.183264,222.03242 209.514625,236.221149 189.247207,247.047411 C170.304273,257.166172 146.397132,264 126.768855,264 Z",
    fill: "#FF9900"
  })
], -1);
var CC = { class: "amplify-text" };
var AC = createBaseVNode("svg", {
  "aria-label": "Apple icon",
  class: "amplify-icon",
  fill: "#000",
  preserveAspectRatio: "xMidYMid",
  stroke: "#000",
  strokeWidth: "0",
  viewBox: "0 0 1024 1024",
  xmlns: "http://www.w3.org/2000/svg"
}, [
  createBaseVNode("path", { d: "M747.4 535.7c-.4-68.2 30.5-119.6 92.9-157.5-34.9-50-87.7-77.5-157.3-82.8-65.9-5.2-138 38.4-164.4 38.4-27.9 0-91.7-36.6-141.9-36.6C273.1 298.8 163 379.8 163 544.6c0 48.7 8.9 99 26.7 150.8 23.8 68.2 109.6 235.3 199.1 232.6 46.8-1.1 79.9-33.2 140.8-33.2 59.1 0 89.7 33.2 141.9 33.2 90.3-1.3 167.9-153.2 190.5-221.6-121.1-57.1-114.6-167.2-114.6-170.7zm-105.1-305c50.7-60.2 46.1-115 44.6-134.7-44.8 2.6-96.6 30.5-126.1 64.8-32.5 36.8-51.6 82.3-47.5 133.6 48.4 3.7 92.6-21.2 129-63.7z" })
], -1);
var EC = { class: "amplify-text" };
var TC = createBaseVNode("svg", {
  "aria-label": "Facebook icon",
  class: "amplify-icon",
  viewBox: "0 0 279 538"
}, [
  createBaseVNode("path", {
    d: "M82.3409742,538 L82.3409742,292.936652 L0,292.936652 L0,196.990154 L82.2410458,196.990154 L82.2410458,126.4295 C82.2410458,44.575144 132.205229,0 205.252865,0 C240.227794,0 270.306232,2.59855099 279,3.79788222 L279,89.2502322 L228.536175,89.2502322 C188.964542,89.2502322 181.270057,108.139699 181.270057,135.824262 L181.270057,196.89021 L276.202006,196.89021 L263.810888,292.836708 L181.16913,292.836708 L181.16913,538 L82.3409742,538 Z",
    fill: "#1877F2"
  })
], -1);
var IC = { class: "amplify-text" };
var PC = createBaseVNode("svg", {
  "aria-label": "Google icon",
  class: "amplify-icon",
  viewBox: "0 0 256 262",
  xmlns: "http://www.w3.org/2000/svg",
  preserveAspectRatio: "xMidYMid"
}, [
  createBaseVNode("path", {
    d: "M255.878 133.451c0-10.734-.871-18.567-2.756-26.69H130.55v48.448h71.947c-1.45 12.04-9.283 30.172-26.69 42.356l-.244 1.622 38.755 30.023 2.685.268c24.659-22.774 38.875-56.282 38.875-96.027",
    fill: "#4285F4"
  }),
  createBaseVNode("path", {
    d: "M130.55 261.1c35.248 0 64.839-11.605 86.453-31.622l-41.196-31.913c-11.024 7.688-25.82 13.055-45.257 13.055-34.523 0-63.824-22.773-74.269-54.25l-1.531.13-40.298 31.187-.527 1.465C35.393 231.798 79.49 261.1 130.55 261.1",
    fill: "#34A853"
  }),
  createBaseVNode("path", {
    d: "M56.281 156.37c-2.756-8.123-4.351-16.827-4.351-25.82 0-8.994 1.595-17.697 4.206-25.82l-.073-1.73L15.26 71.312l-1.335.635C5.077 89.644 0 109.517 0 130.55s5.077 40.905 13.925 58.602l42.356-32.782",
    fill: "#FBBC05"
  }),
  createBaseVNode("path", {
    d: "M130.55 50.479c24.514 0 41.05 10.589 50.479 19.438l36.844-35.974C195.245 12.91 165.798 0 130.55 0 79.49 0 35.393 29.301 13.925 71.947l42.211 32.783c10.59-31.477 39.891-54.251 74.414-54.251",
    fill: "#EB4335"
  })
], -1);
var kC = { class: "amplify-text" };
var MC = ["data-label"];
var io = defineComponent({
  __name: "federated-sign-in",
  setup(e) {
    const t = he(), { route: n, socialProviders: r } = t, o = r == null ? void 0 : r.includes("amazon"), i = r == null ? void 0 : r.includes("apple"), a = r == null ? void 0 : r.includes("facebook"), s = r == null ? void 0 : r.includes("google"), l = a || s || o || i, { getSignInWithFederationText: c, getOrText: d } = Se, m = computed(() => fr), f2 = computed(() => c(n, "amazon")), p = computed(() => c(n, "apple")), y = computed(() => c(n, "facebook")), _ = computed(() => c(n, "google")), b = computed(() => d());
    return (h2, S) => {
      const v = me;
      return unref(l) ? (openBlock(), createBlock(v, {
        key: 0,
        class: "amplify-flex amplify-authenticator__federated-buttons"
      }, {
        default: withCtx(() => [
          unref(o) ? (openBlock(), createBlock(cn, {
            key: 0,
            provider: unref(m).Amazon
          }, {
            default: withCtx(() => [
              bC,
              createBaseVNode("span", CC, toDisplayString(unref(f2)), 1)
            ]),
            _: 1
          }, 8, ["provider"])) : createCommentVNode("", true),
          unref(i) ? (openBlock(), createBlock(cn, {
            key: 1,
            provider: unref(m).Apple
          }, {
            default: withCtx(() => [
              AC,
              createBaseVNode("span", EC, toDisplayString(unref(p)), 1)
            ]),
            _: 1
          }, 8, ["provider"])) : createCommentVNode("", true),
          unref(a) ? (openBlock(), createBlock(cn, {
            key: 2,
            provider: unref(m).Facebook
          }, {
            default: withCtx(() => [
              TC,
              createBaseVNode("span", IC, toDisplayString(unref(y)), 1)
            ]),
            _: 1
          }, 8, ["provider"])) : createCommentVNode("", true),
          unref(s) ? (openBlock(), createBlock(cn, {
            key: 3,
            provider: unref(m).Google
          }, {
            default: withCtx(() => [
              PC,
              createBaseVNode("span", kC, toDisplayString(unref(_)), 1)
            ]),
            _: 1
          }, 8, ["provider"])) : createCommentVNode("", true),
          createBaseVNode("hr", {
            class: "amplify-divider amplify-divider--horizontal amplify-divider--small",
            "aria-orientation": "horizontal",
            "data-label": unref(b)
          }, null, 8, MC)
        ]),
        _: 1
      })) : createCommentVNode("", true);
    };
  }
});
var NC = createBaseVNode("legend", { class: "amplify-visually-hidden" }, "Sign in", -1);
var UC = { "data-amplify-footer": "" };
var Ra = defineComponent({
  __name: "sign-in",
  setup(e) {
    const t = he(), { submitForm: n, updateForm: r, toForgotPassword: o } = t, { error: i, isPending: a } = toRefs(t), { getForgotPasswordText: s, getSignInText: l, getSigningInText: c } = Se, d = computed(() => s()), m = computed(() => l()), f2 = computed(() => c()), p = (b) => {
      const { name: h2, value: S } = b.target;
      r({ name: h2, value: S });
    }, y = (b) => {
      n(ke(b));
    }, _ = () => {
      o();
    };
    return (b, h2) => {
      const S = Ne, v = Me, w = _e, E = me, I = Pe, P = Ie;
      return renderSlot(b.$slots, "signInSlotI", normalizeProps(guardReactiveProps(b.$attrs)), () => [
        renderSlot(b.$slots, "header"),
        createVNode(E, normalizeProps(guardReactiveProps(b.$attrs)), {
          default: withCtx(() => [
            createVNode(I, {
              "data-amplify-authenticator-signin": "",
              onInput: p,
              onSubmit: withModifiers(y, ["prevent"]),
              method: "post"
            }, {
              formt: withCtx(({ slotData: k }) => [
                renderSlot(b.$slots, "form", {
                  info: k,
                  onSignInSubmit: y,
                  onInput: p,
                  onForgotPasswordClicked: _
                })
              ]),
              default: withCtx(() => [
                createVNode(io),
                createVNode(E, { class: "amplify-flex amplify-authenticator__column" }, {
                  default: withCtx(() => [
                    createVNode(S, {
                      disabled: unref(a),
                      class: "amplify-flex amplify-authenticator__column"
                    }, {
                      fieldSetI: withCtx(({ slotData: k }) => [
                        renderSlot(b.$slots, "signin-fields", { info: k })
                      ]),
                      default: withCtx(() => [
                        NC,
                        createVNode(Fe, { route: "signIn" })
                      ]),
                      _: 3
                    }, 8, ["disabled"]),
                    unref(i) ? (openBlock(), createBlock(v, { key: 0 }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(F)(unref(i))), 1)
                      ]),
                      _: 1
                    })) : createCommentVNode("", true),
                    createVNode(w, {
                      disabled: unref(a),
                      class: "amplify-field-group__control amplify-authenticator__font",
                      fullwidth: true,
                      loading: false,
                      variation: "primary"
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(a) ? unref(f2) : unref(m)), 1)
                      ]),
                      _: 1
                    }, 8, ["disabled"])
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16),
        createVNode(P, null, {
          default: withCtx(() => [
            renderSlot(b.$slots, "footer", {}, () => [
              createBaseVNode("div", UC, [
                createVNode(w, {
                  onClick: _,
                  class: "amplify-field-group__control amplify-authenticator__font",
                  variation: "link",
                  fullwidth: true,
                  size: "small",
                  style: { "font-weight": "normal" },
                  type: "button"
                }, {
                  default: withCtx(() => [
                    createTextVNode(toDisplayString(unref(d)), 1)
                  ]),
                  _: 1
                })
              ])
            ])
          ]),
          _: 3
        })
      ]);
    };
  }
});
var xa = defineComponent({
  __name: "authenticator-sign-up-form-fields",
  setup(e) {
    return (t, n) => (openBlock(), createBlock(Fe, { route: "signUp" }));
  }
});
var Da = defineComponent({
  __name: "sign-up",
  setup(e) {
    const t = he(), { submitForm: n, updateBlur: r, updateForm: o } = t, { error: i, hasValidationErrors: a, isPending: s } = toRefs(t), { getCreateAccountText: l } = Se, c = computed(() => l()), d = (p) => {
      const { checked: y, name: _, type: b, value: h2 } = p.target;
      o({
        name: _,
        value: b === "checkbox" && !y ? void 0 : h2
      });
    };
    function m(p) {
      const { name: y } = p.target;
      r({ name: y });
    }
    const f2 = (p) => {
      n(ke(p));
    };
    return (p, y) => {
      const _ = Ne, b = Me, h2 = _e, S = me, v = Pe, w = Ie;
      return renderSlot(p.$slots, "signUpSlotI", normalizeProps(guardReactiveProps(p.$attrs)), () => [
        renderSlot(p.$slots, "header"),
        createVNode(S, normalizeProps(guardReactiveProps(p.$attrs)), {
          default: withCtx(() => [
            createVNode(v, {
              onInput: d,
              onBlurCapture: m,
              onSubmit: withModifiers(f2, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(io),
                createVNode(S, { class: "amplify-flex amplify-authenticator__column" }, {
                  default: withCtx(() => [
                    createVNode(_, {
                      class: "amplify-flex amplify-authenticator__column",
                      disabled: unref(s)
                    }, {
                      fieldSetI: withCtx(({ slotData: E }) => [
                        renderSlot(p.$slots, "signup-fields", { info: E })
                      ]),
                      default: withCtx(() => [
                        createVNode(xa)
                      ]),
                      _: 3
                    }, 8, ["disabled"]),
                    unref(i) ? (openBlock(), createBlock(b, { key: 0 }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(F)(unref(i))), 1)
                      ]),
                      _: 1
                    })) : createCommentVNode("", true),
                    createVNode(h2, {
                      class: "amplify-field-group__control amplify-authenticator__font",
                      fullwidth: true,
                      loading: false,
                      variation: "primary",
                      style: { "border-radius": "0px", "font-weight": "normal" },
                      disabled: unref(s) || unref(a)
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(c)), 1)
                      ]),
                      _: 1
                    }, 8, ["disabled"])
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16),
        createVNode(w, null, {
          default: withCtx(() => [
            renderSlot(p.$slots, "footer")
          ]),
          _: 3
        })
      ]);
    };
  }
});
var FC = {};
function OC(e, t) {
  const n = me;
  return openBlock(), createBlock(n, {
    tabindex: "0",
    "aria-orientation": "horizontal",
    "data-orientation": "horizontal",
    class: "amplify-authenticator__tabs amplify-tabs"
  }, {
    default: withCtx(() => [
      createVNode(n, {
        class: "amplify-tabs__list amplify-tabs__list--top amplify-tabs__list--equal amplify-authenticator__tabs-wrapper",
        role: "tablist"
      }, {
        default: withCtx(() => [
          renderSlot(e.$slots, "default")
        ]),
        _: 3
      })
    ]),
    _: 3
  });
}
var $C = Mn(FC, [["render", OC]]);
var RC = ["tabindex", "aria-selected", "id", "aria-controls"];
var xC = defineComponent({
  __name: "base-two-tab-item",
  props: {
    label: null,
    id: null,
    active: { type: Boolean, default: false }
  },
  setup(e) {
    const t = e, { active: n, id: r, label: o } = toRefs(t);
    return (i, a) => (openBlock(), createElementBlock("button", {
      tabindex: unref(n) ? 0 : -1,
      "aria-selected": unref(n) ? "true" : "false",
      class: normalizeClass([{ "amplify-tabs__item--active": unref(n) }, "amplify-tabs__item"]),
      id: `${unref(r)}-tab`,
      "aria-controls": `${unref(r)}-panel`,
      role: "tab"
    }, toDisplayString(unref(o)), 11, RC));
  }
});
var DC = "4.3.3";
var LC = {};
function BC(e, t) {
  return renderSlot(e.$slots, "textI", normalizeProps(guardReactiveProps(e.$attrs)), () => [
    createBaseVNode("span", mergeProps(e.$attrs, { "data-amplify-text": "" }), [
      renderSlot(e.$slots, "default")
    ], 16)
  ]);
}
var ao = Mn(LC, [["render", BC]]);
var Re = defineComponent({
  props: {
    level: {
      type: Number,
      default: 1
    }
  },
  inheritAttrs: false,
  setup(e, { slots: t, attrs: n }) {
    var a, s;
    const r = t.default ? t.default() : [], o = t.headingI ? t.headingI() : [], i = `${n.class || ""} amplify-heading--${e.level}`;
    if (((s = (a = o[0]) == null ? void 0 : a.children) == null ? void 0 : s.length) === 0)
      o[0].children = [
        h(`h${e.level}`, { ...n, class: i }, [r])
      ];
    else
      return () => h(`h${e.level}`, { "data-amplify-heading": "", ...n, class: i }, [
        //@ts-ignore
        o[0] ? h(o[0].children[0]) : h(r[0])
      ]);
    return () => o;
  }
});
var La = defineComponent({
  __name: "confirm-sign-up",
  setup(e) {
    const t = he(), { codeDeliveryDetails: n, error: r, isPending: o } = toRefs(t), { resendCode: i, submitForm: a, updateForm: s } = t, { getDeliveryMethodText: l, getDeliveryMessageText: c, getResendCodeText: d, getConfirmText: m } = Se, f2 = computed(() => l(n.value)), p = computed(() => d()), y = computed(() => m()), _ = computed(() => c(n.value)), b = (w) => {
      const { name: E, value: I } = w.target;
      s({ name: E, value: I });
    }, h2 = (w) => {
      S(w);
    }, S = (w) => {
      a(ke(w));
    }, v = () => {
      i();
    };
    return (w, E) => {
      const I = Re, P = ao, k = Ne, U = Me, O = _e, $ = Ie, B = me, z = Pe;
      return renderSlot(w.$slots, "confirmSignUpSlotI", normalizeProps(guardReactiveProps(w.$attrs)), () => [
        createVNode(B, normalizeProps(guardReactiveProps(w.$attrs)), {
          default: withCtx(() => [
            createVNode(z, {
              onInput: b,
              onSubmit: withModifiers(h2, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(B, { class: "amplify-flex amplify-authenticator__column" }, {
                  default: withCtx(() => [
                    renderSlot(w.$slots, "header", {}, () => [
                      createVNode(I, {
                        class: "amplify-heading amplify-authenticator__heading",
                        level: 3
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(f2)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(P, { class: "amplify-authenticator__subtitle" }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(_)), 1)
                      ]),
                      _: 1
                    }),
                    createVNode(k, {
                      class: "amplify-flex amplify-authenticator__column",
                      disabled: unref(o)
                    }, {
                      default: withCtx(() => [
                        createVNode(Fe, { route: "confirmSignUp" })
                      ]),
                      _: 1
                    }, 8, ["disabled"]),
                    createVNode($, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(r) ? (openBlock(), createBlock(U, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(r))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(O, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          loading: false,
                          variation: "primary",
                          type: "submit",
                          disabled: unref(o)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(y)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(O, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          variation: "default",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(v, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(p)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(w.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                })
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var Ba = defineComponent({
  __name: "confirm-sign-in",
  setup(e) {
    const t = he(), { submitForm: n, toSignIn: r, updateForm: o } = t, { error: i, isPending: a, challengeName: s } = toRefs(t), l = computed(() => s.value), { getBackToSignInText: c, getConfirmText: d, getChallengeText: m } = Se, f2 = computed(() => m(l.value)), p = computed(() => c()), y = computed(() => d()), _ = (S) => {
      const { name: v, value: w } = S.target;
      o({ name: v, value: w });
    }, b = (S) => {
      n(ke(S));
    }, h2 = () => {
      r();
    };
    return (S, v) => {
      const w = Re, E = me, I = Me, P = _e, k = Ie, U = Ne, O = Pe;
      return renderSlot(S.$slots, "confirmSignInSlotI", normalizeProps(guardReactiveProps(S.$attrs)), () => [
        createVNode(E, normalizeProps(guardReactiveProps(S.$attrs)), {
          default: withCtx(() => [
            createVNode(O, {
              "data-amplify-authenticator-confirmsignin": "",
              onInput: _,
              onSubmit: withModifiers(b, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(U, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(a)
                }, {
                  default: withCtx(() => [
                    renderSlot(S.$slots, "header", {}, () => [
                      createVNode(w, {
                        level: 3,
                        class: "amplify-heading"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(f2)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(E, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        createVNode(Fe, { route: "confirmSignIn" })
                      ]),
                      _: 1
                    }),
                    createVNode(k, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(i) ? (openBlock(), createBlock(I, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(i))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(P, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          loading: false,
                          variation: "primary",
                          style: { "font-weight": "normal" },
                          disabled: unref(a)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(y)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(P, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          size: "small",
                          variation: "link",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(h2, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(p)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(S.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var Qt = {};
var zC = function() {
  return typeof Promise == "function" && Promise.prototype && Promise.prototype.then;
};
var za = {};
var Ce = {};
var so;
var GC = [
  0,
  // Not used
  26,
  44,
  70,
  100,
  134,
  172,
  196,
  242,
  292,
  346,
  404,
  466,
  532,
  581,
  655,
  733,
  815,
  901,
  991,
  1085,
  1156,
  1258,
  1364,
  1474,
  1588,
  1706,
  1828,
  1921,
  2051,
  2185,
  2323,
  2465,
  2611,
  2761,
  2876,
  3034,
  3196,
  3362,
  3532,
  3706
];
Ce.getSymbolSize = function(t) {
  if (!t) throw new Error('"version" cannot be null or undefined');
  if (t < 1 || t > 40) throw new Error('"version" should be in range from 1 to 40');
  return t * 4 + 17;
};
Ce.getSymbolTotalCodewords = function(t) {
  return GC[t];
};
Ce.getBCHDigit = function(e) {
  let t = 0;
  for (; e !== 0; )
    t++, e >>>= 1;
  return t;
};
Ce.setToSJISFunction = function(t) {
  if (typeof t != "function")
    throw new Error('"toSJISFunc" is not a valid function.');
  so = t;
};
Ce.isKanjiModeEnabled = function() {
  return typeof so < "u";
};
Ce.toSJIS = function(t) {
  return so(t);
};
var Jn = {};
(function(e) {
  e.L = { bit: 1 }, e.M = { bit: 0 }, e.Q = { bit: 3 }, e.H = { bit: 2 };
  function t(n) {
    if (typeof n != "string")
      throw new Error("Param is not a string");
    switch (n.toLowerCase()) {
      case "l":
      case "low":
        return e.L;
      case "m":
      case "medium":
        return e.M;
      case "q":
      case "quartile":
        return e.Q;
      case "h":
      case "high":
        return e.H;
      default:
        throw new Error("Unknown EC Level: " + n);
    }
  }
  e.isValid = function(r) {
    return r && typeof r.bit < "u" && r.bit >= 0 && r.bit < 4;
  }, e.from = function(r, o) {
    if (e.isValid(r))
      return r;
    try {
      return t(r);
    } catch {
      return o;
    }
  };
})(Jn);
function Ga() {
  this.buffer = [], this.length = 0;
}
Ga.prototype = {
  get: function(e) {
    const t = Math.floor(e / 8);
    return (this.buffer[t] >>> 7 - e % 8 & 1) === 1;
  },
  put: function(e, t) {
    for (let n = 0; n < t; n++)
      this.putBit((e >>> t - n - 1 & 1) === 1);
  },
  getLengthInBits: function() {
    return this.length;
  },
  putBit: function(e) {
    const t = Math.floor(this.length / 8);
    this.buffer.length <= t && this.buffer.push(0), e && (this.buffer[t] |= 128 >>> this.length % 8), this.length++;
  }
};
var WC = Ga;
function Xt(e) {
  if (!e || e < 1)
    throw new Error("BitMatrix size must be defined and greater than 0");
  this.size = e, this.data = new Uint8Array(e * e), this.reservedBit = new Uint8Array(e * e);
}
Xt.prototype.set = function(e, t, n, r) {
  const o = e * this.size + t;
  this.data[o] = n, r && (this.reservedBit[o] = true);
};
Xt.prototype.get = function(e, t) {
  return this.data[e * this.size + t];
};
Xt.prototype.xor = function(e, t, n) {
  this.data[e * this.size + t] ^= n;
};
Xt.prototype.isReserved = function(e, t) {
  return this.reservedBit[e * this.size + t];
};
var VC = Xt;
var Wa = {};
(function(e) {
  const t = Ce.getSymbolSize;
  e.getRowColCoords = function(r) {
    if (r === 1) return [];
    const o = Math.floor(r / 7) + 2, i = t(r), a = i === 145 ? 26 : Math.ceil((i - 13) / (2 * o - 2)) * 2, s = [i - 7];
    for (let l = 1; l < o - 1; l++)
      s[l] = s[l - 1] - a;
    return s.push(6), s.reverse();
  }, e.getPositions = function(r) {
    const o = [], i = e.getRowColCoords(r), a = i.length;
    for (let s = 0; s < a; s++)
      for (let l = 0; l < a; l++)
        s === 0 && l === 0 || // top-left
        s === 0 && l === a - 1 || // bottom-left
        s === a - 1 && l === 0 || o.push([i[s], i[l]]);
    return o;
  };
})(Wa);
var Va = {};
var jC = Ce.getSymbolSize;
var fi = 7;
Va.getPositions = function(t) {
  const n = jC(t);
  return [
    // top-left
    [0, 0],
    // top-right
    [n - fi, 0],
    // bottom-left
    [0, n - fi]
  ];
};
var ja = {};
(function(e) {
  e.Patterns = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
  };
  const t = {
    N1: 3,
    N2: 3,
    N3: 40,
    N4: 10
  };
  e.isValid = function(o) {
    return o != null && o !== "" && !isNaN(o) && o >= 0 && o <= 7;
  }, e.from = function(o) {
    return e.isValid(o) ? parseInt(o, 10) : void 0;
  }, e.getPenaltyN1 = function(o) {
    const i = o.size;
    let a = 0, s = 0, l = 0, c = null, d = null;
    for (let m = 0; m < i; m++) {
      s = l = 0, c = d = null;
      for (let f2 = 0; f2 < i; f2++) {
        let p = o.get(m, f2);
        p === c ? s++ : (s >= 5 && (a += t.N1 + (s - 5)), c = p, s = 1), p = o.get(f2, m), p === d ? l++ : (l >= 5 && (a += t.N1 + (l - 5)), d = p, l = 1);
      }
      s >= 5 && (a += t.N1 + (s - 5)), l >= 5 && (a += t.N1 + (l - 5));
    }
    return a;
  }, e.getPenaltyN2 = function(o) {
    const i = o.size;
    let a = 0;
    for (let s = 0; s < i - 1; s++)
      for (let l = 0; l < i - 1; l++) {
        const c = o.get(s, l) + o.get(s, l + 1) + o.get(s + 1, l) + o.get(s + 1, l + 1);
        (c === 4 || c === 0) && a++;
      }
    return a * t.N2;
  }, e.getPenaltyN3 = function(o) {
    const i = o.size;
    let a = 0, s = 0, l = 0;
    for (let c = 0; c < i; c++) {
      s = l = 0;
      for (let d = 0; d < i; d++)
        s = s << 1 & 2047 | o.get(c, d), d >= 10 && (s === 1488 || s === 93) && a++, l = l << 1 & 2047 | o.get(d, c), d >= 10 && (l === 1488 || l === 93) && a++;
    }
    return a * t.N3;
  }, e.getPenaltyN4 = function(o) {
    let i = 0;
    const a = o.data.length;
    for (let l = 0; l < a; l++) i += o.data[l];
    return Math.abs(Math.ceil(i * 100 / a / 5) - 10) * t.N4;
  };
  function n(r, o, i) {
    switch (r) {
      case e.Patterns.PATTERN000:
        return (o + i) % 2 === 0;
      case e.Patterns.PATTERN001:
        return o % 2 === 0;
      case e.Patterns.PATTERN010:
        return i % 3 === 0;
      case e.Patterns.PATTERN011:
        return (o + i) % 3 === 0;
      case e.Patterns.PATTERN100:
        return (Math.floor(o / 2) + Math.floor(i / 3)) % 2 === 0;
      case e.Patterns.PATTERN101:
        return o * i % 2 + o * i % 3 === 0;
      case e.Patterns.PATTERN110:
        return (o * i % 2 + o * i % 3) % 2 === 0;
      case e.Patterns.PATTERN111:
        return (o * i % 3 + (o + i) % 2) % 2 === 0;
      default:
        throw new Error("bad maskPattern:" + r);
    }
  }
  e.applyMask = function(o, i) {
    const a = i.size;
    for (let s = 0; s < a; s++)
      for (let l = 0; l < a; l++)
        i.isReserved(l, s) || i.xor(l, s, n(o, l, s));
  }, e.getBestMask = function(o, i) {
    const a = Object.keys(e.Patterns).length;
    let s = 0, l = 1 / 0;
    for (let c = 0; c < a; c++) {
      i(c), e.applyMask(c, o);
      const d = e.getPenaltyN1(o) + e.getPenaltyN2(o) + e.getPenaltyN3(o) + e.getPenaltyN4(o);
      e.applyMask(c, o), d < l && (l = d, s = c);
    }
    return s;
  };
})(ja);
var Zn = {};
var qe = Jn;
var un = [
  // L  M  Q  H
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  2,
  1,
  2,
  2,
  4,
  1,
  2,
  4,
  4,
  2,
  4,
  4,
  4,
  2,
  4,
  6,
  5,
  2,
  4,
  6,
  6,
  2,
  5,
  8,
  8,
  4,
  5,
  8,
  8,
  4,
  5,
  8,
  11,
  4,
  8,
  10,
  11,
  4,
  9,
  12,
  16,
  4,
  9,
  16,
  16,
  6,
  10,
  12,
  18,
  6,
  10,
  17,
  16,
  6,
  11,
  16,
  19,
  6,
  13,
  18,
  21,
  7,
  14,
  21,
  25,
  8,
  16,
  20,
  25,
  8,
  17,
  23,
  25,
  9,
  17,
  23,
  34,
  9,
  18,
  25,
  30,
  10,
  20,
  27,
  32,
  12,
  21,
  29,
  35,
  12,
  23,
  34,
  37,
  12,
  25,
  34,
  40,
  13,
  26,
  35,
  42,
  14,
  28,
  38,
  45,
  15,
  29,
  40,
  48,
  16,
  31,
  43,
  51,
  17,
  33,
  45,
  54,
  18,
  35,
  48,
  57,
  19,
  37,
  51,
  60,
  19,
  38,
  53,
  63,
  20,
  40,
  56,
  66,
  21,
  43,
  59,
  70,
  22,
  45,
  62,
  74,
  24,
  47,
  65,
  77,
  25,
  49,
  68,
  81
];
var dn = [
  // L  M  Q  H
  7,
  10,
  13,
  17,
  10,
  16,
  22,
  28,
  15,
  26,
  36,
  44,
  20,
  36,
  52,
  64,
  26,
  48,
  72,
  88,
  36,
  64,
  96,
  112,
  40,
  72,
  108,
  130,
  48,
  88,
  132,
  156,
  60,
  110,
  160,
  192,
  72,
  130,
  192,
  224,
  80,
  150,
  224,
  264,
  96,
  176,
  260,
  308,
  104,
  198,
  288,
  352,
  120,
  216,
  320,
  384,
  132,
  240,
  360,
  432,
  144,
  280,
  408,
  480,
  168,
  308,
  448,
  532,
  180,
  338,
  504,
  588,
  196,
  364,
  546,
  650,
  224,
  416,
  600,
  700,
  224,
  442,
  644,
  750,
  252,
  476,
  690,
  816,
  270,
  504,
  750,
  900,
  300,
  560,
  810,
  960,
  312,
  588,
  870,
  1050,
  336,
  644,
  952,
  1110,
  360,
  700,
  1020,
  1200,
  390,
  728,
  1050,
  1260,
  420,
  784,
  1140,
  1350,
  450,
  812,
  1200,
  1440,
  480,
  868,
  1290,
  1530,
  510,
  924,
  1350,
  1620,
  540,
  980,
  1440,
  1710,
  570,
  1036,
  1530,
  1800,
  570,
  1064,
  1590,
  1890,
  600,
  1120,
  1680,
  1980,
  630,
  1204,
  1770,
  2100,
  660,
  1260,
  1860,
  2220,
  720,
  1316,
  1950,
  2310,
  750,
  1372,
  2040,
  2430
];
Zn.getBlocksCount = function(t, n) {
  switch (n) {
    case qe.L:
      return un[(t - 1) * 4 + 0];
    case qe.M:
      return un[(t - 1) * 4 + 1];
    case qe.Q:
      return un[(t - 1) * 4 + 2];
    case qe.H:
      return un[(t - 1) * 4 + 3];
    default:
      return;
  }
};
Zn.getTotalCodewordsCount = function(t, n) {
  switch (n) {
    case qe.L:
      return dn[(t - 1) * 4 + 0];
    case qe.M:
      return dn[(t - 1) * 4 + 1];
    case qe.Q:
      return dn[(t - 1) * 4 + 2];
    case qe.H:
      return dn[(t - 1) * 4 + 3];
    default:
      return;
  }
};
var Ha = {};
var Qn = {};
var Lt = new Uint8Array(512);
var Pn = new Uint8Array(256);
(function() {
  let t = 1;
  for (let n = 0; n < 255; n++)
    Lt[n] = t, Pn[t] = n, t <<= 1, t & 256 && (t ^= 285);
  for (let n = 255; n < 512; n++)
    Lt[n] = Lt[n - 255];
})();
Qn.log = function(t) {
  if (t < 1) throw new Error("log(" + t + ")");
  return Pn[t];
};
Qn.exp = function(t) {
  return Lt[t];
};
Qn.mul = function(t, n) {
  return t === 0 || n === 0 ? 0 : Lt[Pn[t] + Pn[n]];
};
(function(e) {
  const t = Qn;
  e.mul = function(r, o) {
    const i = new Uint8Array(r.length + o.length - 1);
    for (let a = 0; a < r.length; a++)
      for (let s = 0; s < o.length; s++)
        i[a + s] ^= t.mul(r[a], o[s]);
    return i;
  }, e.mod = function(r, o) {
    let i = new Uint8Array(r);
    for (; i.length - o.length >= 0; ) {
      const a = i[0];
      for (let l = 0; l < o.length; l++)
        i[l] ^= t.mul(o[l], a);
      let s = 0;
      for (; s < i.length && i[s] === 0; ) s++;
      i = i.slice(s);
    }
    return i;
  }, e.generateECPolynomial = function(r) {
    let o = new Uint8Array([1]);
    for (let i = 0; i < r; i++)
      o = e.mul(o, new Uint8Array([1, t.exp(i)]));
    return o;
  };
})(Ha);
var Ka = Ha;
function lo(e) {
  this.genPoly = void 0, this.degree = e, this.degree && this.initialize(this.degree);
}
lo.prototype.initialize = function(t) {
  this.degree = t, this.genPoly = Ka.generateECPolynomial(this.degree);
};
lo.prototype.encode = function(t) {
  if (!this.genPoly)
    throw new Error("Encoder not initialized");
  const n = new Uint8Array(t.length + this.degree);
  n.set(t);
  const r = Ka.mod(n, this.genPoly), o = this.degree - r.length;
  if (o > 0) {
    const i = new Uint8Array(this.degree);
    return i.set(r, o), i;
  }
  return r;
};
var HC = lo;
var Ya = {};
var Qe = {};
var co = {};
co.isValid = function(t) {
  return !isNaN(t) && t >= 1 && t <= 40;
};
var xe = {};
var qa = "[0-9]+";
var KC = "[A-Z $%*+\\-./:]+";
var Vt = "(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+";
Vt = Vt.replace(/u/g, "\\u");
var YC = "(?:(?![A-Z0-9 $%*+\\-./:]|" + Vt + `)(?:.|[\r
]))+`;
xe.KANJI = new RegExp(Vt, "g");
xe.BYTE_KANJI = new RegExp("[^A-Z0-9 $%*+\\-./:]+", "g");
xe.BYTE = new RegExp(YC, "g");
xe.NUMERIC = new RegExp(qa, "g");
xe.ALPHANUMERIC = new RegExp(KC, "g");
var qC = new RegExp("^" + Vt + "$");
var JC = new RegExp("^" + qa + "$");
var ZC = new RegExp("^[A-Z0-9 $%*+\\-./:]+$");
xe.testKanji = function(t) {
  return qC.test(t);
};
xe.testNumeric = function(t) {
  return JC.test(t);
};
xe.testAlphanumeric = function(t) {
  return ZC.test(t);
};
(function(e) {
  const t = co, n = xe;
  e.NUMERIC = {
    id: "Numeric",
    bit: 1,
    ccBits: [10, 12, 14]
  }, e.ALPHANUMERIC = {
    id: "Alphanumeric",
    bit: 2,
    ccBits: [9, 11, 13]
  }, e.BYTE = {
    id: "Byte",
    bit: 4,
    ccBits: [8, 16, 16]
  }, e.KANJI = {
    id: "Kanji",
    bit: 8,
    ccBits: [8, 10, 12]
  }, e.MIXED = {
    bit: -1
  }, e.getCharCountIndicator = function(i, a) {
    if (!i.ccBits) throw new Error("Invalid mode: " + i);
    if (!t.isValid(a))
      throw new Error("Invalid version: " + a);
    return a >= 1 && a < 10 ? i.ccBits[0] : a < 27 ? i.ccBits[1] : i.ccBits[2];
  }, e.getBestModeForData = function(i) {
    return n.testNumeric(i) ? e.NUMERIC : n.testAlphanumeric(i) ? e.ALPHANUMERIC : n.testKanji(i) ? e.KANJI : e.BYTE;
  }, e.toString = function(i) {
    if (i && i.id) return i.id;
    throw new Error("Invalid mode");
  }, e.isValid = function(i) {
    return i && i.bit && i.ccBits;
  };
  function r(o) {
    if (typeof o != "string")
      throw new Error("Param is not a string");
    switch (o.toLowerCase()) {
      case "numeric":
        return e.NUMERIC;
      case "alphanumeric":
        return e.ALPHANUMERIC;
      case "kanji":
        return e.KANJI;
      case "byte":
        return e.BYTE;
      default:
        throw new Error("Unknown mode: " + o);
    }
  }
  e.from = function(i, a) {
    if (e.isValid(i))
      return i;
    try {
      return r(i);
    } catch {
      return a;
    }
  };
})(Qe);
(function(e) {
  const t = Ce, n = Zn, r = Jn, o = Qe, i = co, a = 7973, s = t.getBCHDigit(a);
  function l(f2, p, y) {
    for (let _ = 1; _ <= 40; _++)
      if (p <= e.getCapacity(_, y, f2))
        return _;
  }
  function c(f2, p) {
    return o.getCharCountIndicator(f2, p) + 4;
  }
  function d(f2, p) {
    let y = 0;
    return f2.forEach(function(_) {
      const b = c(_.mode, p);
      y += b + _.getBitsLength();
    }), y;
  }
  function m(f2, p) {
    for (let y = 1; y <= 40; y++)
      if (d(f2, y) <= e.getCapacity(y, p, o.MIXED))
        return y;
  }
  e.from = function(p, y) {
    return i.isValid(p) ? parseInt(p, 10) : y;
  }, e.getCapacity = function(p, y, _) {
    if (!i.isValid(p))
      throw new Error("Invalid QR Code version");
    typeof _ > "u" && (_ = o.BYTE);
    const b = t.getSymbolTotalCodewords(p), h2 = n.getTotalCodewordsCount(p, y), S = (b - h2) * 8;
    if (_ === o.MIXED) return S;
    const v = S - c(_, p);
    switch (_) {
      case o.NUMERIC:
        return Math.floor(v / 10 * 3);
      case o.ALPHANUMERIC:
        return Math.floor(v / 11 * 2);
      case o.KANJI:
        return Math.floor(v / 13);
      case o.BYTE:
      default:
        return Math.floor(v / 8);
    }
  }, e.getBestVersionForData = function(p, y) {
    let _;
    const b = r.from(y, r.M);
    if (Array.isArray(p)) {
      if (p.length > 1)
        return m(p, b);
      if (p.length === 0)
        return 1;
      _ = p[0];
    } else
      _ = p;
    return l(_.mode, _.getLength(), b);
  }, e.getEncodedBits = function(p) {
    if (!i.isValid(p) || p < 7)
      throw new Error("Invalid QR Code version");
    let y = p << 12;
    for (; t.getBCHDigit(y) - s >= 0; )
      y ^= a << t.getBCHDigit(y) - s;
    return p << 12 | y;
  };
})(Ya);
var Ja = {};
var Tr = Ce;
var Za = 1335;
var QC = 21522;
var pi = Tr.getBCHDigit(Za);
Ja.getEncodedBits = function(t, n) {
  const r = t.bit << 3 | n;
  let o = r << 10;
  for (; Tr.getBCHDigit(o) - pi >= 0; )
    o ^= Za << Tr.getBCHDigit(o) - pi;
  return (r << 10 | o) ^ QC;
};
var Qa = {};
var XC = Qe;
function pt(e) {
  this.mode = XC.NUMERIC, this.data = e.toString();
}
pt.getBitsLength = function(t) {
  return 10 * Math.floor(t / 3) + (t % 3 ? t % 3 * 3 + 1 : 0);
};
pt.prototype.getLength = function() {
  return this.data.length;
};
pt.prototype.getBitsLength = function() {
  return pt.getBitsLength(this.data.length);
};
pt.prototype.write = function(t) {
  let n, r, o;
  for (n = 0; n + 3 <= this.data.length; n += 3)
    r = this.data.substr(n, 3), o = parseInt(r, 10), t.put(o, 10);
  const i = this.data.length - n;
  i > 0 && (r = this.data.substr(n), o = parseInt(r, 10), t.put(o, i * 3 + 1));
};
var e1 = pt;
var t1 = Qe;
var sr = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  " ",
  "$",
  "%",
  "*",
  "+",
  "-",
  ".",
  "/",
  ":"
];
function mt(e) {
  this.mode = t1.ALPHANUMERIC, this.data = e;
}
mt.getBitsLength = function(t) {
  return 11 * Math.floor(t / 2) + 6 * (t % 2);
};
mt.prototype.getLength = function() {
  return this.data.length;
};
mt.prototype.getBitsLength = function() {
  return mt.getBitsLength(this.data.length);
};
mt.prototype.write = function(t) {
  let n;
  for (n = 0; n + 2 <= this.data.length; n += 2) {
    let r = sr.indexOf(this.data[n]) * 45;
    r += sr.indexOf(this.data[n + 1]), t.put(r, 11);
  }
  this.data.length % 2 && t.put(sr.indexOf(this.data[n]), 6);
};
var n1 = mt;
var r1 = function(t) {
  for (var n = [], r = t.length, o = 0; o < r; o++) {
    var i = t.charCodeAt(o);
    if (i >= 55296 && i <= 56319 && r > o + 1) {
      var a = t.charCodeAt(o + 1);
      a >= 56320 && a <= 57343 && (i = (i - 55296) * 1024 + a - 56320 + 65536, o += 1);
    }
    if (i < 128) {
      n.push(i);
      continue;
    }
    if (i < 2048) {
      n.push(i >> 6 | 192), n.push(i & 63 | 128);
      continue;
    }
    if (i < 55296 || i >= 57344 && i < 65536) {
      n.push(i >> 12 | 224), n.push(i >> 6 & 63 | 128), n.push(i & 63 | 128);
      continue;
    }
    if (i >= 65536 && i <= 1114111) {
      n.push(i >> 18 | 240), n.push(i >> 12 & 63 | 128), n.push(i >> 6 & 63 | 128), n.push(i & 63 | 128);
      continue;
    }
    n.push(239, 191, 189);
  }
  return new Uint8Array(n).buffer;
};
var o1 = r1;
var i1 = Qe;
function gt(e) {
  this.mode = i1.BYTE, this.data = new Uint8Array(o1(e));
}
gt.getBitsLength = function(t) {
  return t * 8;
};
gt.prototype.getLength = function() {
  return this.data.length;
};
gt.prototype.getBitsLength = function() {
  return gt.getBitsLength(this.data.length);
};
gt.prototype.write = function(e) {
  for (let t = 0, n = this.data.length; t < n; t++)
    e.put(this.data[t], 8);
};
var a1 = gt;
var s1 = Qe;
var l1 = Ce;
function ht(e) {
  this.mode = s1.KANJI, this.data = e;
}
ht.getBitsLength = function(t) {
  return t * 13;
};
ht.prototype.getLength = function() {
  return this.data.length;
};
ht.prototype.getBitsLength = function() {
  return ht.getBitsLength(this.data.length);
};
ht.prototype.write = function(e) {
  let t;
  for (t = 0; t < this.data.length; t++) {
    let n = l1.toSJIS(this.data[t]);
    if (n >= 33088 && n <= 40956)
      n -= 33088;
    else if (n >= 57408 && n <= 60351)
      n -= 49472;
    else
      throw new Error(
        "Invalid SJIS character: " + this.data[t] + `
Make sure your charset is UTF-8`
      );
    n = (n >>> 8 & 255) * 192 + (n & 255), e.put(n, 13);
  }
};
var c1 = ht;
var Xa = { exports: {} };
(function(e) {
  var t = {
    single_source_shortest_paths: function(n, r, o) {
      var i = {}, a = {};
      a[r] = 0;
      var s = t.PriorityQueue.make();
      s.push(r, 0);
      for (var l, c, d, m, f2, p, y, _, b; !s.empty(); ) {
        l = s.pop(), c = l.value, m = l.cost, f2 = n[c] || {};
        for (d in f2)
          f2.hasOwnProperty(d) && (p = f2[d], y = m + p, _ = a[d], b = typeof a[d] > "u", (b || _ > y) && (a[d] = y, s.push(d, y), i[d] = c));
      }
      if (typeof o < "u" && typeof a[o] > "u") {
        var h2 = ["Could not find a path from ", r, " to ", o, "."].join("");
        throw new Error(h2);
      }
      return i;
    },
    extract_shortest_path_from_predecessor_list: function(n, r) {
      for (var o = [], i = r; i; )
        o.push(i), n[i], i = n[i];
      return o.reverse(), o;
    },
    find_path: function(n, r, o) {
      var i = t.single_source_shortest_paths(n, r, o);
      return t.extract_shortest_path_from_predecessor_list(
        i,
        o
      );
    },
    /**
     * A very naive priority queue implementation.
     */
    PriorityQueue: {
      make: function(n) {
        var r = t.PriorityQueue, o = {}, i;
        n = n || {};
        for (i in r)
          r.hasOwnProperty(i) && (o[i] = r[i]);
        return o.queue = [], o.sorter = n.sorter || r.default_sorter, o;
      },
      default_sorter: function(n, r) {
        return n.cost - r.cost;
      },
      /**
       * Add a new item to the queue and ensure the highest priority element
       * is at the front of the queue.
       */
      push: function(n, r) {
        var o = { value: n, cost: r };
        this.queue.push(o), this.queue.sort(this.sorter);
      },
      /**
       * Return the highest priority element in the queue.
       */
      pop: function() {
        return this.queue.shift();
      },
      empty: function() {
        return this.queue.length === 0;
      }
    }
  };
  e.exports = t;
})(Xa);
var u1 = Xa.exports;
(function(e) {
  const t = Qe, n = e1, r = n1, o = a1, i = c1, a = xe, s = Ce, l = u1;
  function c(h2) {
    return unescape(encodeURIComponent(h2)).length;
  }
  function d(h2, S, v) {
    const w = [];
    let E;
    for (; (E = h2.exec(v)) !== null; )
      w.push({
        data: E[0],
        index: E.index,
        mode: S,
        length: E[0].length
      });
    return w;
  }
  function m(h2) {
    const S = d(a.NUMERIC, t.NUMERIC, h2), v = d(a.ALPHANUMERIC, t.ALPHANUMERIC, h2);
    let w, E;
    return s.isKanjiModeEnabled() ? (w = d(a.BYTE, t.BYTE, h2), E = d(a.KANJI, t.KANJI, h2)) : (w = d(a.BYTE_KANJI, t.BYTE, h2), E = []), S.concat(v, w, E).sort(function(P, k) {
      return P.index - k.index;
    }).map(function(P) {
      return {
        data: P.data,
        mode: P.mode,
        length: P.length
      };
    });
  }
  function f2(h2, S) {
    switch (S) {
      case t.NUMERIC:
        return n.getBitsLength(h2);
      case t.ALPHANUMERIC:
        return r.getBitsLength(h2);
      case t.KANJI:
        return i.getBitsLength(h2);
      case t.BYTE:
        return o.getBitsLength(h2);
    }
  }
  function p(h2) {
    return h2.reduce(function(S, v) {
      const w = S.length - 1 >= 0 ? S[S.length - 1] : null;
      return w && w.mode === v.mode ? (S[S.length - 1].data += v.data, S) : (S.push(v), S);
    }, []);
  }
  function y(h2) {
    const S = [];
    for (let v = 0; v < h2.length; v++) {
      const w = h2[v];
      switch (w.mode) {
        case t.NUMERIC:
          S.push([
            w,
            { data: w.data, mode: t.ALPHANUMERIC, length: w.length },
            { data: w.data, mode: t.BYTE, length: w.length }
          ]);
          break;
        case t.ALPHANUMERIC:
          S.push([
            w,
            { data: w.data, mode: t.BYTE, length: w.length }
          ]);
          break;
        case t.KANJI:
          S.push([
            w,
            { data: w.data, mode: t.BYTE, length: c(w.data) }
          ]);
          break;
        case t.BYTE:
          S.push([
            { data: w.data, mode: t.BYTE, length: c(w.data) }
          ]);
      }
    }
    return S;
  }
  function _(h2, S) {
    const v = {}, w = { start: {} };
    let E = ["start"];
    for (let I = 0; I < h2.length; I++) {
      const P = h2[I], k = [];
      for (let U = 0; U < P.length; U++) {
        const O = P[U], $ = "" + I + U;
        k.push($), v[$] = { node: O, lastCount: 0 }, w[$] = {};
        for (let B = 0; B < E.length; B++) {
          const z = E[B];
          v[z] && v[z].node.mode === O.mode ? (w[z][$] = f2(v[z].lastCount + O.length, O.mode) - f2(v[z].lastCount, O.mode), v[z].lastCount += O.length) : (v[z] && (v[z].lastCount = O.length), w[z][$] = f2(O.length, O.mode) + 4 + t.getCharCountIndicator(O.mode, S));
        }
      }
      E = k;
    }
    for (let I = 0; I < E.length; I++)
      w[E[I]].end = 0;
    return { map: w, table: v };
  }
  function b(h2, S) {
    let v;
    const w = t.getBestModeForData(h2);
    if (v = t.from(S, w), v !== t.BYTE && v.bit < w.bit)
      throw new Error('"' + h2 + '" cannot be encoded with mode ' + t.toString(v) + `.
 Suggested mode is: ` + t.toString(w));
    switch (v === t.KANJI && !s.isKanjiModeEnabled() && (v = t.BYTE), v) {
      case t.NUMERIC:
        return new n(h2);
      case t.ALPHANUMERIC:
        return new r(h2);
      case t.KANJI:
        return new i(h2);
      case t.BYTE:
        return new o(h2);
    }
  }
  e.fromArray = function(S) {
    return S.reduce(function(v, w) {
      return typeof w == "string" ? v.push(b(w, null)) : w.data && v.push(b(w.data, w.mode)), v;
    }, []);
  }, e.fromString = function(S, v) {
    const w = m(S, s.isKanjiModeEnabled()), E = y(w), I = _(E, v), P = l.find_path(I.map, "start", "end"), k = [];
    for (let U = 1; U < P.length - 1; U++)
      k.push(I.table[P[U]].node);
    return e.fromArray(p(k));
  }, e.rawSplit = function(S) {
    return e.fromArray(
      m(S, s.isKanjiModeEnabled())
    );
  };
})(Qa);
var Xn = Ce;
var lr = Jn;
var d1 = WC;
var f1 = VC;
var p1 = Wa;
var m1 = Va;
var Ir = ja;
var Pr = Zn;
var g1 = HC;
var kn = Ya;
var h1 = Ja;
var y1 = Qe;
var cr = Qa;
function v1(e, t) {
  const n = e.size, r = m1.getPositions(t);
  for (let o = 0; o < r.length; o++) {
    const i = r[o][0], a = r[o][1];
    for (let s = -1; s <= 7; s++)
      if (!(i + s <= -1 || n <= i + s))
        for (let l = -1; l <= 7; l++)
          a + l <= -1 || n <= a + l || (s >= 0 && s <= 6 && (l === 0 || l === 6) || l >= 0 && l <= 6 && (s === 0 || s === 6) || s >= 2 && s <= 4 && l >= 2 && l <= 4 ? e.set(i + s, a + l, true, true) : e.set(i + s, a + l, false, true));
  }
}
function _1(e) {
  const t = e.size;
  for (let n = 8; n < t - 8; n++) {
    const r = n % 2 === 0;
    e.set(n, 6, r, true), e.set(6, n, r, true);
  }
}
function S1(e, t) {
  const n = p1.getPositions(t);
  for (let r = 0; r < n.length; r++) {
    const o = n[r][0], i = n[r][1];
    for (let a = -2; a <= 2; a++)
      for (let s = -2; s <= 2; s++)
        a === -2 || a === 2 || s === -2 || s === 2 || a === 0 && s === 0 ? e.set(o + a, i + s, true, true) : e.set(o + a, i + s, false, true);
  }
}
function w1(e, t) {
  const n = e.size, r = kn.getEncodedBits(t);
  let o, i, a;
  for (let s = 0; s < 18; s++)
    o = Math.floor(s / 3), i = s % 3 + n - 8 - 3, a = (r >> s & 1) === 1, e.set(o, i, a, true), e.set(i, o, a, true);
}
function ur(e, t, n) {
  const r = e.size, o = h1.getEncodedBits(t, n);
  let i, a;
  for (i = 0; i < 15; i++)
    a = (o >> i & 1) === 1, i < 6 ? e.set(i, 8, a, true) : i < 8 ? e.set(i + 1, 8, a, true) : e.set(r - 15 + i, 8, a, true), i < 8 ? e.set(8, r - i - 1, a, true) : i < 9 ? e.set(8, 15 - i - 1 + 1, a, true) : e.set(8, 15 - i - 1, a, true);
  e.set(r - 8, 8, 1, true);
}
function b1(e, t) {
  const n = e.size;
  let r = -1, o = n - 1, i = 7, a = 0;
  for (let s = n - 1; s > 0; s -= 2)
    for (s === 6 && s--; ; ) {
      for (let l = 0; l < 2; l++)
        if (!e.isReserved(o, s - l)) {
          let c = false;
          a < t.length && (c = (t[a] >>> i & 1) === 1), e.set(o, s - l, c), i--, i === -1 && (a++, i = 7);
        }
      if (o += r, o < 0 || n <= o) {
        o -= r, r = -r;
        break;
      }
    }
}
function C1(e, t, n) {
  const r = new d1();
  n.forEach(function(l) {
    r.put(l.mode.bit, 4), r.put(l.getLength(), y1.getCharCountIndicator(l.mode, e)), l.write(r);
  });
  const o = Xn.getSymbolTotalCodewords(e), i = Pr.getTotalCodewordsCount(e, t), a = (o - i) * 8;
  for (r.getLengthInBits() + 4 <= a && r.put(0, 4); r.getLengthInBits() % 8 !== 0; )
    r.putBit(0);
  const s = (a - r.getLengthInBits()) / 8;
  for (let l = 0; l < s; l++)
    r.put(l % 2 ? 17 : 236, 8);
  return A1(r, e, t);
}
function A1(e, t, n) {
  const r = Xn.getSymbolTotalCodewords(t), o = Pr.getTotalCodewordsCount(t, n), i = r - o, a = Pr.getBlocksCount(t, n), s = r % a, l = a - s, c = Math.floor(r / a), d = Math.floor(i / a), m = d + 1, f2 = c - d, p = new g1(f2);
  let y = 0;
  const _ = new Array(a), b = new Array(a);
  let h2 = 0;
  const S = new Uint8Array(e.buffer);
  for (let P = 0; P < a; P++) {
    const k = P < l ? d : m;
    _[P] = S.slice(y, y + k), b[P] = p.encode(_[P]), y += k, h2 = Math.max(h2, k);
  }
  const v = new Uint8Array(r);
  let w = 0, E, I;
  for (E = 0; E < h2; E++)
    for (I = 0; I < a; I++)
      E < _[I].length && (v[w++] = _[I][E]);
  for (E = 0; E < f2; E++)
    for (I = 0; I < a; I++)
      v[w++] = b[I][E];
  return v;
}
function E1(e, t, n, r) {
  let o;
  if (Array.isArray(e))
    o = cr.fromArray(e);
  else if (typeof e == "string") {
    let c = t;
    if (!c) {
      const d = cr.rawSplit(e);
      c = kn.getBestVersionForData(d, n);
    }
    o = cr.fromString(e, c || 40);
  } else
    throw new Error("Invalid data");
  const i = kn.getBestVersionForData(o, n);
  if (!i)
    throw new Error("The amount of data is too big to be stored in a QR Code");
  if (!t)
    t = i;
  else if (t < i)
    throw new Error(
      `
The chosen QR Code version cannot contain this amount of data.
Minimum version required to store current data is: ` + i + `.
`
    );
  const a = C1(t, n, o), s = Xn.getSymbolSize(t), l = new f1(s);
  return v1(l, t), _1(l), S1(l, t), ur(l, n, 0), t >= 7 && w1(l, t), b1(l, a), isNaN(r) && (r = Ir.getBestMask(
    l,
    ur.bind(null, l, n)
  )), Ir.applyMask(r, l), ur(l, n, r), {
    modules: l,
    version: t,
    errorCorrectionLevel: n,
    maskPattern: r,
    segments: o
  };
}
za.create = function(t, n) {
  if (typeof t > "u" || t === "")
    throw new Error("No input text");
  let r = lr.M, o, i;
  return typeof n < "u" && (r = lr.from(n.errorCorrectionLevel, lr.M), o = kn.from(n.version), i = Ir.from(n.maskPattern), n.toSJISFunc && Xn.setToSJISFunction(n.toSJISFunc)), E1(t, o, r, i);
};
var es = {};
var uo = {};
(function(e) {
  function t(n) {
    if (typeof n == "number" && (n = n.toString()), typeof n != "string")
      throw new Error("Color should be defined as hex string");
    let r = n.slice().replace("#", "").split("");
    if (r.length < 3 || r.length === 5 || r.length > 8)
      throw new Error("Invalid hex color: " + n);
    (r.length === 3 || r.length === 4) && (r = Array.prototype.concat.apply([], r.map(function(i) {
      return [i, i];
    }))), r.length === 6 && r.push("F", "F");
    const o = parseInt(r.join(""), 16);
    return {
      r: o >> 24 & 255,
      g: o >> 16 & 255,
      b: o >> 8 & 255,
      a: o & 255,
      hex: "#" + r.slice(0, 6).join("")
    };
  }
  e.getOptions = function(r) {
    r || (r = {}), r.color || (r.color = {});
    const o = typeof r.margin > "u" || r.margin === null || r.margin < 0 ? 4 : r.margin, i = r.width && r.width >= 21 ? r.width : void 0, a = r.scale || 4;
    return {
      width: i,
      scale: i ? 4 : a,
      margin: o,
      color: {
        dark: t(r.color.dark || "#000000ff"),
        light: t(r.color.light || "#ffffffff")
      },
      type: r.type,
      rendererOpts: r.rendererOpts || {}
    };
  }, e.getScale = function(r, o) {
    return o.width && o.width >= r + o.margin * 2 ? o.width / (r + o.margin * 2) : o.scale;
  }, e.getImageWidth = function(r, o) {
    const i = e.getScale(r, o);
    return Math.floor((r + o.margin * 2) * i);
  }, e.qrToImageData = function(r, o, i) {
    const a = o.modules.size, s = o.modules.data, l = e.getScale(a, i), c = Math.floor((a + i.margin * 2) * l), d = i.margin * l, m = [i.color.light, i.color.dark];
    for (let f2 = 0; f2 < c; f2++)
      for (let p = 0; p < c; p++) {
        let y = (f2 * c + p) * 4, _ = i.color.light;
        if (f2 >= d && p >= d && f2 < c - d && p < c - d) {
          const b = Math.floor((f2 - d) / l), h2 = Math.floor((p - d) / l);
          _ = m[s[b * a + h2] ? 1 : 0];
        }
        r[y++] = _.r, r[y++] = _.g, r[y++] = _.b, r[y] = _.a;
      }
  };
})(uo);
(function(e) {
  const t = uo;
  function n(o, i, a) {
    o.clearRect(0, 0, i.width, i.height), i.style || (i.style = {}), i.height = a, i.width = a, i.style.height = a + "px", i.style.width = a + "px";
  }
  function r() {
    try {
      return document.createElement("canvas");
    } catch {
      throw new Error("You need to specify a canvas element");
    }
  }
  e.render = function(i, a, s) {
    let l = s, c = a;
    typeof l > "u" && (!a || !a.getContext) && (l = a, a = void 0), a || (c = r()), l = t.getOptions(l);
    const d = t.getImageWidth(i.modules.size, l), m = c.getContext("2d"), f2 = m.createImageData(d, d);
    return t.qrToImageData(f2.data, i, l), n(m, c, d), m.putImageData(f2, 0, 0), c;
  }, e.renderToDataURL = function(i, a, s) {
    let l = s;
    typeof l > "u" && (!a || !a.getContext) && (l = a, a = void 0), l || (l = {});
    const c = e.render(i, a, l), d = l.type || "image/png", m = l.rendererOpts || {};
    return c.toDataURL(d, m.quality);
  };
})(es);
var ts = {};
var T1 = uo;
function mi(e, t) {
  const n = e.a / 255, r = t + '="' + e.hex + '"';
  return n < 1 ? r + " " + t + '-opacity="' + n.toFixed(2).slice(1) + '"' : r;
}
function dr(e, t, n) {
  let r = e + t;
  return typeof n < "u" && (r += " " + n), r;
}
function I1(e, t, n) {
  let r = "", o = 0, i = false, a = 0;
  for (let s = 0; s < e.length; s++) {
    const l = Math.floor(s % t), c = Math.floor(s / t);
    !l && !i && (i = true), e[s] ? (a++, s > 0 && l > 0 && e[s - 1] || (r += i ? dr("M", l + n, 0.5 + c + n) : dr("m", o, 0), o = 0, i = false), l + 1 < t && e[s + 1] || (r += dr("h", a), a = 0)) : o++;
  }
  return r;
}
ts.render = function(t, n, r) {
  const o = T1.getOptions(n), i = t.modules.size, a = t.modules.data, s = i + o.margin * 2, l = o.color.light.a ? "<path " + mi(o.color.light, "fill") + ' d="M0 0h' + s + "v" + s + 'H0z"/>' : "", c = "<path " + mi(o.color.dark, "stroke") + ' d="' + I1(a, i, o.margin) + '"/>', d = 'viewBox="0 0 ' + s + " " + s + '"', f2 = '<svg xmlns="http://www.w3.org/2000/svg" ' + (o.width ? 'width="' + o.width + '" height="' + o.width + '" ' : "") + d + ' shape-rendering="crispEdges">' + l + c + `</svg>
`;
  return typeof r == "function" && r(null, f2), f2;
};
var P1 = zC;
var kr = za;
var ns = es;
var k1 = ts;
function fo(e, t, n, r, o) {
  const i = [].slice.call(arguments, 1), a = i.length, s = typeof i[a - 1] == "function";
  if (!s && !P1())
    throw new Error("Callback required as last argument");
  if (s) {
    if (a < 2)
      throw new Error("Too few arguments provided");
    a === 2 ? (o = n, n = t, t = r = void 0) : a === 3 && (t.getContext && typeof o > "u" ? (o = r, r = void 0) : (o = r, r = n, n = t, t = void 0));
  } else {
    if (a < 1)
      throw new Error("Too few arguments provided");
    return a === 1 ? (n = t, t = r = void 0) : a === 2 && !t.getContext && (r = n, n = t, t = void 0), new Promise(function(l, c) {
      try {
        const d = kr.create(n, r);
        l(e(d, t, r));
      } catch (d) {
        c(d);
      }
    });
  }
  try {
    const l = kr.create(n, r);
    o(null, e(l, t, r));
  } catch (l) {
    o(l);
  }
}
Qt.create = kr.create;
Qt.toCanvas = fo.bind(null, ns.render);
Qt.toDataURL = fo.bind(null, ns.renderToDataURL);
Qt.toString = fo.bind(null, function(e, t, n) {
  return k1.render(e, n);
});
var M1 = { key: 0 };
var N1 = ["src"];
var U1 = { "data-amplify-copy-tooltip": "" };
var F1 = createBaseVNode("svg", {
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, [
  createBaseVNode("path", { d: "M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM15 5H8C6.9 5 6.01 5.9 6.01 7L6 21C6 22.1 6.89 23 7.99 23H19C20.1 23 21 22.1 21 21V11L15 5ZM8 21V7H14V12H19V21H8Z" })
], -1);
var O1 = defineComponent({
  __name: "setup-totp",
  setup(e) {
    const t = new ConsoleLogger("SetupTotp-logger"), n = he(), { updateForm: r, submitForm: o, toSignIn: i, totpSecretCode: a, username: s, QRFields: l } = n, { error: c, isPending: d } = toRefs(n), { totpIssuer: m = "AWSCognito", totpUsername: f2 = s } = l ?? {}, p = yl(m, f2, a), y = reactive({
      qrCodeImageSource: "",
      isLoading: true
    }), { getCopyText: _, getCopiedText: b, getBackToSignInText: h2, getConfirmText: S } = Se, v = ref(_());
    function w() {
      a && navigator.clipboard.writeText(a), v.value = b();
    }
    onMounted(async () => {
      try {
        y.qrCodeImageSource = await Qt.toDataURL(p);
      } catch (O) {
        t.error(O);
      } finally {
        y.isLoading = false;
      }
    });
    const E = computed(() => h2()), I = computed(() => S()), P = (O) => {
      const { name: $, value: B } = O.target;
      r({ name: $, value: B });
    }, k = (O) => {
      o(ke(O));
    }, U = () => {
      i();
    };
    return (O, $) => {
      const B = Re, z = me, se = Me, ye = _e, we = Ie, de = Ne, ge = Pe;
      return renderSlot(O.$slots, "confirmSetupTotpI", normalizeProps(guardReactiveProps(O.$attrs)), () => [
        createVNode(z, normalizeProps(guardReactiveProps(O.$attrs)), {
          default: withCtx(() => [
            createVNode(ge, {
              "data-amplify-authenticator-setup-totp": "",
              onInput: P,
              onSubmit: withModifiers(k, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(de, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(d)
                }, {
                  default: withCtx(() => [
                    createVNode(z, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        renderSlot(O.$slots, "header", {}, () => [
                          createVNode(B, {
                            class: "amplify-heading",
                            level: 3
                          }, {
                            default: withCtx(() => [
                              createTextVNode(" Setup TOTP ")
                            ]),
                            _: 1
                          })
                        ]),
                        createVNode(z, { class: "amplify-flex amplify-authenticator__column" }, {
                          default: withCtx(() => [
                            y.isLoading ? (openBlock(), createElementBlock("p", M1, "Loading...")) : (openBlock(), createElementBlock("img", {
                              key: 1,
                              class: "amplify-image",
                              "data-amplify-qrcode": "",
                              src: y.qrCodeImageSource,
                              alt: "qr code",
                              width: "228",
                              height: "228"
                            }, null, 8, N1)),
                            createVNode(z, {
                              class: "amplify-flex",
                              "data-amplify-copy": ""
                            }, {
                              default: withCtx(() => [
                                createBaseVNode("div", null, toDisplayString(unref(a)), 1),
                                createVNode(z, {
                                  "data-amplify-copy-svg": "",
                                  onClick: w
                                }, {
                                  default: withCtx(() => [
                                    createBaseVNode("div", U1, toDisplayString(v.value), 1),
                                    F1
                                  ]),
                                  _: 1
                                })
                              ]),
                              _: 1
                            }),
                            createVNode(Fe, { route: "setupTotp" })
                          ]),
                          _: 1
                        }),
                        createVNode(we, { class: "amplify-flex amplify-authenticator__column" }, {
                          default: withCtx(() => [
                            unref(c) ? (openBlock(), createBlock(se, { key: 0 }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(unref(F)(unref(c))), 1)
                              ]),
                              _: 1
                            })) : createCommentVNode("", true),
                            createVNode(ye, {
                              class: "amplify-field-group__control amplify-authenticator__font",
                              fullwidth: false,
                              loading: false,
                              variation: "primary",
                              type: "submit",
                              disabled: unref(d)
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(unref(I)), 1)
                              ]),
                              _: 1
                            }, 8, ["disabled"]),
                            createVNode(ye, {
                              class: "amplify-field-group__control amplify-authenticator__font",
                              fullwidth: false,
                              size: "small",
                              variation: "link",
                              style: { "font-weight": "normal" },
                              type: "button",
                              onClick: withModifiers(U, ["prevent"])
                            }, {
                              default: withCtx(() => [
                                createTextVNode(toDisplayString(unref(E)), 1)
                              ]),
                              _: 1
                            }, 8, ["onClick"]),
                            renderSlot(O.$slots, "footer")
                          ]),
                          _: 3
                        })
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var rs = defineComponent({
  __name: "authenticator-force-new-password-form-fields",
  setup(e) {
    return (t, n) => (openBlock(), createBlock(Fe, { route: "forceNewPassword" }));
  }
});
var os = defineComponent({
  __name: "force-new-password",
  setup(e) {
    const t = he(), { submitForm: n, toSignIn: r, updateBlur: o, updateForm: i } = t, { error: a, isPending: s } = toRefs(t), { getChangePasswordText: l, getChangingText: c, getBackToSignInText: d } = Se, m = computed(() => l()), f2 = computed(() => c()), p = computed(() => d()), y = () => {
      r();
    }, _ = (v) => {
      b(v);
    }, b = (v) => {
      n(ke(v));
    }, h2 = (v) => {
      const { name: w, value: E } = v.target;
      i({ name: w, value: E });
    };
    function S(v) {
      const { name: w } = v.target;
      o({ name: w });
    }
    return (v, w) => {
      const E = Re, I = me, P = Me, k = _e, U = Ie, O = Ne, $ = Pe;
      return renderSlot(v.$slots, "forceNewPasswordI", normalizeProps(guardReactiveProps(v.$attrs)), () => [
        createVNode(I, normalizeProps(guardReactiveProps(v.$attrs)), {
          default: withCtx(() => [
            createVNode($, {
              "data-amplify-authenticator-forcenewpassword": "",
              onInput: h2,
              onBlurCapture: S,
              onSubmit: withModifiers(_, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(O, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(s)
                }, {
                  default: withCtx(() => [
                    renderSlot(v.$slots, "header", {}, () => [
                      createVNode(E, {
                        level: 3,
                        class: "amplify-heading"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(m)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(I, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        renderSlot(v.$slots, "force-new-password-form-fields", {}, () => [
                          createVNode(rs)
                        ])
                      ]),
                      _: 3
                    }),
                    createVNode(U, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(a) ? (openBlock(), createBlock(P, {
                          key: 0,
                          "data-ui-error": ""
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(a))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(k, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          loading: false,
                          variation: "primary",
                          style: { "font-weight": "normal" },
                          disabled: unref(s)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(s) ? unref(f2) + "…" : unref(m)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(k, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          size: "small",
                          variation: "link",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(y, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(p)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(v.$slots, "footer", {
                          onHaveAccountClicked: y,
                          onForceNewPasswordSubmit: _
                        })
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var is = defineComponent({
  __name: "forgot-password",
  setup(e) {
    const t = he(), { submitForm: n, toSignIn: r, updateForm: o } = t, { error: i, isPending: a } = toRefs(t), { getBackToSignInText: s, getResetYourPasswordText: l, getSendCodeText: c } = Se, d = computed(() => s()), m = computed(() => l()), f2 = computed(() => c()), p = (b) => {
      n(ke(b));
    }, y = (b) => {
      const { name: h2, value: S } = b.target;
      o({ name: h2, value: S });
    }, _ = () => {
      r();
    };
    return (b, h2) => {
      const S = Re, v = Ne, w = Me, E = _e, I = Ie, P = me, k = Pe;
      return renderSlot(b.$slots, "forgotPasswordSlotI", normalizeProps(guardReactiveProps(b.$attrs)), () => [
        createVNode(k, mergeProps(b.$attrs, {
          "data-amplify-authenticator-forgotpassword": "",
          onInput: y,
          onSubmit: withModifiers(p, ["prevent"])
        }), {
          default: withCtx(() => [
            createVNode(P, { class: "amplify-flex amplify-authenticator__column" }, {
              default: withCtx(() => [
                renderSlot(b.$slots, "header", {}, () => [
                  createVNode(S, {
                    class: "amplify-heading",
                    level: 3
                  }, {
                    default: withCtx(() => [
                      createTextVNode(toDisplayString(unref(m)), 1)
                    ]),
                    _: 1
                  })
                ]),
                createVNode(v, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(a)
                }, {
                  default: withCtx(() => [
                    createVNode(Fe, { route: "forgotPassword" })
                  ]),
                  _: 1
                }, 8, ["disabled"]),
                createVNode(I, { class: "amplify-flex amplify-authenticator__column" }, {
                  default: withCtx(() => [
                    unref(i) ? (openBlock(), createBlock(w, { key: 0 }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(F)(unref(i))), 1)
                      ]),
                      _: 1
                    })) : createCommentVNode("", true),
                    createVNode(E, {
                      class: "amplify-field-group__control amplify-authenticator__font",
                      fullwidth: false,
                      variation: "primary",
                      type: "submit",
                      disabled: unref(a)
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(f2)), 1)
                      ]),
                      _: 1
                    }, 8, ["disabled"]),
                    createVNode(E, {
                      class: "amplify-field-group__control amplify-authenticator__font",
                      fullwidth: false,
                      size: "small",
                      variation: "link",
                      style: { "font-weight": "normal" },
                      type: "button",
                      onClick: withModifiers(_, ["prevent"])
                    }, {
                      default: withCtx(() => [
                        createTextVNode(toDisplayString(unref(d)), 1)
                      ]),
                      _: 1
                    }, 8, ["onClick"]),
                    renderSlot(b.$slots, "footer", {
                      onBackToSignInClicked: _,
                      onResetPasswordSubmit: p
                    })
                  ]),
                  _: 3
                })
              ]),
              _: 3
            })
          ]),
          _: 3
        }, 16, ["onSubmit"])
      ]);
    };
  }
});
var as = defineComponent({
  __name: "confirm-reset-password",
  setup(e) {
    const t = he(), { resendCode: n, submitForm: r, updateBlur: o, updateForm: i } = t, { error: a, isPending: s } = toRefs(t), { getResendCodeText: l, getResetYourPasswordText: c, getSubmitText: d } = Se, m = computed(() => l()), f2 = computed(() => c()), p = computed(() => d()), y = (v) => {
      _(v);
    }, _ = (v) => {
      r(ke(v));
    }, b = () => {
      n();
    }, h2 = (v) => {
      const { name: w, value: E } = v.target;
      i({ name: w, value: E });
    };
    function S(v) {
      const { name: w } = v.target;
      o({ name: w });
    }
    return (v, w) => {
      const E = Re, I = me, P = Me, k = _e, U = Ie, O = Ne, $ = Pe;
      return renderSlot(v.$slots, "confirmResetPasswordSlotI", normalizeProps(guardReactiveProps(v.$attrs)), () => [
        createVNode(I, normalizeProps(guardReactiveProps(v.$attrs)), {
          default: withCtx(() => [
            createVNode($, {
              "data-amplify-authenticator-confirmResetpassword": "",
              onInput: h2,
              onBlurCapture: S,
              onSubmit: withModifiers(y, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(O, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(s)
                }, {
                  default: withCtx(() => [
                    renderSlot(v.$slots, "header", {}, () => [
                      createVNode(E, {
                        class: "amplify-heading",
                        level: 3
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(f2)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(I, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        createVNode(Fe, { route: "confirmResetPassword" })
                      ]),
                      _: 1
                    }),
                    createVNode(U, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(a) ? (openBlock(), createBlock(P, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(a))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(k, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          variation: "primary",
                          fullwidth: false,
                          type: "submit",
                          disabled: unref(s)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(p)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(k, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          variation: "link",
                          fullwidth: false,
                          size: "small",
                          type: "button",
                          onClick: withModifiers(b, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(m)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(v.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var ss = defineComponent({
  __name: "verify-user",
  setup(e) {
    const t = he(), { isPending: n, unverifiedUserAttributes: r, error: o } = toRefs(t), { skipVerification: i, submitForm: a, updateForm: s } = t, { getAccountRecoveryInfoText: l, getSkipText: c, getVerifyText: d, getVerifyContactText: m } = Se, f2 = computed(() => l()), p = computed(() => c()), y = computed(() => d()), _ = computed(() => m()), b = (w) => {
      const { name: E, value: I } = w.target;
      s({ name: E, value: I });
    }, h2 = (w) => {
      S(w);
    }, S = (w) => {
      a(ke(w));
    }, v = () => {
      i();
    };
    return (w, E) => {
      const I = Re, P = Zt, k = ao, U = Jt, O = me, $ = Me, B = _e, z = Ie, se = Ne, ye = Pe;
      return renderSlot(w.$slots, "verifyUserSlotI", {}, () => [
        createVNode(O, null, {
          default: withCtx(() => [
            createVNode(ye, {
              onInput: b,
              onSubmit: withModifiers(h2, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(se, {
                  disabled: unref(n),
                  class: "amplify-flex amplify-authenticator__column"
                }, {
                  default: withCtx(() => [
                    renderSlot(w.$slots, "header", {}, () => [
                      createVNode(I, {
                        class: "amplify-heading",
                        level: 3
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(f2)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(O, { class: "amplify-flex amplify-field amplify-radiogroupfield amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        createVNode(P, {
                          class: "amplify-visually-hidden amplify-label",
                          id: "amplify-field-493c"
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(_)), 1)
                          ]),
                          _: 1
                        }),
                        createVNode(O, {
                          class: "amplify-flex amplify-field amplify-radiogroupfield amplify-authenticator__column",
                          "aria-labelledby": "amplify-field-493c"
                        }, {
                          default: withCtx(() => [
                            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(r), (we, de, ge) => (openBlock(), createElementBlock(Fragment, { key: we }, [
                              we ? (openBlock(), createBlock(P, {
                                key: 0,
                                class: "amplify-flex amplify-radio",
                                "data-amplify-verify-label": ""
                              }, {
                                default: withCtx(() => [
                                  createVNode(k, { class: "amplify-text amplify-radio__label" }, {
                                    default: withCtx(() => [
                                      createTextVNode(toDisplayString(unref(F)(unref(zt)[de].label)) + ": " + toDisplayString(unref(gl)(unref(zt)[de].label, we)), 1)
                                    ]),
                                    _: 2
                                  }, 1024),
                                  createVNode(U, {
                                    class: "amplify-input amplify-field-group__control amplify-visually-hidden amplify-radio__input",
                                    "aria-invalid": "false",
                                    "data-amplify-verify-input": "",
                                    name: "unverifiedAttr",
                                    type: "radio",
                                    checked: ge === 0,
                                    value: de
                                  }, null, 8, ["checked", "value"]),
                                  createVNode(k, {
                                    class: "amplify-flex amplify-radio__button",
                                    "aria-hidden": "true"
                                  })
                                ]),
                                _: 2
                              }, 1024)) : createCommentVNode("", true)
                            ], 64))), 128))
                          ]),
                          _: 1
                        })
                      ]),
                      _: 1
                    }),
                    createVNode(z, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(o) ? (openBlock(), createBlock($, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(o))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(B, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          variation: "primary",
                          type: "submit",
                          disabled: unref(n)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(y)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(B, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          size: "small",
                          variation: "link",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(v, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(p)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(w.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        })
      ]);
    };
  }
});
var ls = defineComponent({
  __name: "confirm-verify-user",
  setup(e) {
    const t = he(), { error: n, isPending: r } = toRefs(t), { skipVerification: o, submitForm: i, updateForm: a } = t, { getAccountRecoveryInfoText: s, getSkipText: l, getSubmitText: c } = Se, d = computed(() => s()), m = computed(() => l()), f2 = computed(() => c()), p = (h2) => {
      const { name: S, value: v } = h2.target;
      a({ name: S, value: v });
    }, y = (h2) => {
      _(h2);
    }, _ = (h2) => {
      i(ke(h2));
    }, b = () => {
      o();
    };
    return (h2, S) => {
      const v = Re, w = me, E = Me, I = _e, P = Ie, k = Ne, U = Pe;
      return renderSlot(h2.$slots, "confirmVerifyUserSlotI", normalizeProps(guardReactiveProps(h2.$attrs)), () => [
        createVNode(w, normalizeProps(guardReactiveProps(h2.$attrs)), {
          default: withCtx(() => [
            createVNode(U, {
              onInput: p,
              onSubmit: withModifiers(y, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(k, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(r)
                }, {
                  default: withCtx(() => [
                    renderSlot(h2.$slots, "header", {}, () => [
                      createVNode(v, {
                        level: 3,
                        class: "amplify-heading"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(d)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(w, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        createVNode(Fe, { route: "confirmVerifyUser" })
                      ]),
                      _: 1
                    }),
                    createVNode(P, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(n) ? (openBlock(), createBlock(E, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(n))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(I, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          variation: "primary",
                          type: "submit",
                          disabled: unref(r)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(f2)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(I, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          size: "small",
                          variation: "link",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(b, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(m)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(h2.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var cs = defineComponent({
  __name: "select-mfa-type",
  setup(e) {
    const t = Math.floor(Math.random() * 999999), n = he(), { submitForm: r, toSignIn: o, updateForm: i } = n, { error: a, isPending: s, challengeName: l, allowedMfaTypes: c } = toRefs(n), d = computed(() => l.value), { getBackToSignInText: m, getConfirmText: f2, getSelectMfaTypeByChallengeName: p, getMfaTypeLabelByValue: y, getSelectMfaTypeText: _ } = Se, b = computed(() => p(d.value)), h2 = computed(() => m()), S = computed(() => f2()), v = computed(() => _()), w = (P) => {
      const { name: k, value: U } = P.target;
      i({ name: k, value: U });
    }, E = (P) => {
      r(ke(P));
    }, I = () => {
      o();
    };
    return (P, k) => {
      const U = Re, O = Zt, $ = ao, B = Jt, z = me, se = Me, ye = _e, we = Ie, de = Ne, ge = Pe;
      return renderSlot(P.$slots, "selectMfaTypeSlotI", normalizeProps(guardReactiveProps(P.$attrs)), () => [
        createVNode(z, normalizeProps(guardReactiveProps(P.$attrs)), {
          default: withCtx(() => [
            createVNode(ge, {
              "data-amplify-authenticator-selectmfatype": "",
              onInput: w,
              onSubmit: withModifiers(E, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(de, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(s)
                }, {
                  default: withCtx(() => [
                    renderSlot(P.$slots, "header", {}, () => [
                      createVNode(U, {
                        level: 3,
                        class: "amplify-heading"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(b)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(z, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        createVNode(O, {
                          class: "amplify-visually-hidden amplify-label",
                          id: `amplify-field-${unref(t)}`
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(v)), 1)
                          ]),
                          _: 1
                        }, 8, ["id"]),
                        createVNode(z, {
                          class: "amplify-flex amplify-field amplify-radiogroupfield amplify-authenticator__column",
                          "aria-labelledby": `amplify-field-${unref(t)}`
                        }, {
                          default: withCtx(() => [
                            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(c), (fe, it) => (openBlock(), createBlock(O, {
                              key: fe,
                              class: "amplify-flex amplify-radio",
                              "data-amplify-selectmfatype-label": ""
                            }, {
                              default: withCtx(() => [
                                createVNode($, { class: "amplify-text amplify-radio__label" }, {
                                  default: withCtx(() => [
                                    createTextVNode(toDisplayString(unref(y)(fe)), 1)
                                  ]),
                                  _: 2
                                }, 1024),
                                createVNode(B, {
                                  class: "amplify-input amplify-field-group__control amplify-visually-hidden amplify-radio__input",
                                  "aria-invalid": "false",
                                  "data-amplify-selectmfatype-input": "",
                                  name: "mfa_type",
                                  type: "radio",
                                  value: fe,
                                  checked: it === 0
                                }, null, 8, ["value", "checked"]),
                                createVNode($, {
                                  class: "amplify-flex amplify-radio__button",
                                  "aria-hidden": "true"
                                })
                              ]),
                              _: 2
                            }, 1024))), 128))
                          ]),
                          _: 1
                        }, 8, ["aria-labelledby"])
                      ]),
                      _: 1
                    }),
                    createVNode(we, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(a) ? (openBlock(), createBlock(se, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(a))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(ye, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          loading: false,
                          variation: "primary",
                          style: { "font-weight": "normal" },
                          disabled: unref(s)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(S)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(ye, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          size: "small",
                          variation: "link",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(I, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(h2)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(P.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var us = defineComponent({
  __name: "setup-email",
  setup(e) {
    const t = he(), { submitForm: n, toSignIn: r, updateForm: o } = t, { error: i, isPending: a } = toRefs(t), { getBackToSignInText: s, getConfirmText: l, getSetupEmailText: c } = Se, d = computed(() => c()), m = computed(() => s()), f2 = computed(() => l()), p = (b) => {
      const { name: h2, value: S } = b.target;
      o({ name: h2, value: S });
    }, y = (b) => {
      n(ke(b));
    }, _ = () => {
      r();
    };
    return (b, h2) => {
      const S = Re, v = me, w = Me, E = _e, I = Ie, P = Ne, k = Pe;
      return renderSlot(b.$slots, "setupEmailSlotI", normalizeProps(guardReactiveProps(b.$attrs)), () => [
        createVNode(v, normalizeProps(guardReactiveProps(b.$attrs)), {
          default: withCtx(() => [
            createVNode(k, {
              "data-amplify-authenticator-setupemail": "",
              onInput: p,
              onSubmit: withModifiers(y, ["prevent"])
            }, {
              default: withCtx(() => [
                createVNode(P, {
                  class: "amplify-flex amplify-authenticator__column",
                  disabled: unref(a)
                }, {
                  default: withCtx(() => [
                    renderSlot(b.$slots, "header", {}, () => [
                      createVNode(S, {
                        level: 3,
                        class: "amplify-heading"
                      }, {
                        default: withCtx(() => [
                          createTextVNode(toDisplayString(unref(d)), 1)
                        ]),
                        _: 1
                      })
                    ]),
                    createVNode(v, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        createVNode(Fe, { route: "setupEmail" })
                      ]),
                      _: 1
                    }),
                    createVNode(I, { class: "amplify-flex amplify-authenticator__column" }, {
                      default: withCtx(() => [
                        unref(i) ? (openBlock(), createBlock(w, { key: 0 }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(F)(unref(i))), 1)
                          ]),
                          _: 1
                        })) : createCommentVNode("", true),
                        createVNode(E, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          loading: false,
                          variation: "primary",
                          style: { "font-weight": "normal" },
                          disabled: unref(a)
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(f2)), 1)
                          ]),
                          _: 1
                        }, 8, ["disabled"]),
                        createVNode(E, {
                          class: "amplify-field-group__control amplify-authenticator__font",
                          fullwidth: false,
                          size: "small",
                          variation: "link",
                          style: { "font-weight": "normal" },
                          type: "button",
                          onClick: withModifiers(_, ["prevent"])
                        }, {
                          default: withCtx(() => [
                            createTextVNode(toDisplayString(unref(m)), 1)
                          ]),
                          _: 1
                        }, 8, ["onClick"]),
                        renderSlot(b.$slots, "footer")
                      ]),
                      _: 3
                    })
                  ]),
                  _: 3
                }, 8, ["disabled"])
              ]),
              _: 3
            }, 8, ["onSubmit"])
          ]),
          _: 3
        }, 16)
      ]);
    };
  }
});
var $1 = ["data-variation"];
var R1 = { "data-amplify-container": "" };
var x1 = ["data-amplify-router-content"];
var D1 = {
  key: 1,
  "data-amplify-router-content": ""
};
var L1 = defineComponent({
  __name: "authenticator",
  props: {
    hideSignUp: { type: Boolean },
    initialState: null,
    loginMechanisms: null,
    services: null,
    signUpAttributes: null,
    variation: { default: "default" },
    socialProviders: null,
    formFields: null
  },
  setup(e) {
    const t = e, { initialState: n, loginMechanisms: r, variation: o, services: i, signUpAttributes: a, socialProviders: s, hideSignUp: l, formFields: c } = toRefs(t);
    let d;
    const m = ref(false), { service: f2, send: p, state: y } = oo(), _ = f2.subscribe((R) => {
      R.matches("setup") && !m.value && (p({
        type: "INIT",
        data: {
          /**
           * There's a type inference bug with prop refs that incorrectly assume
           * they can be undefined. Adding `!` until this is resolved from Vue's end.
           *
           * https://github.com/vuejs/core/issues/6420
           */
          initialState: n.value,
          loginMechanisms: r.value,
          socialProviders: s.value,
          signUpAttributes: a.value,
          services: i.value,
          formFields: c.value
        }
      }), m.value = true);
    }).unsubscribe, b = he(), { route: h2, signOut: S, toSignIn: v, toSignUp: w, user: E } = toRefs(b);
    onMounted(() => {
      d = Jb({
        componentName: "Authenticator",
        packageName: "vue",
        version: DC
      });
    }), onUnmounted(() => {
      d(), _();
    });
    const I = ref(), P = ref(), k = ref(), U = ref(), O = ref(), $ = ref(), B = ref(), z = ref(), se = ref(), ye = ref(), we = ref(), de = ref(), { getSignInTabText: ge, getSignUpTabText: fe } = Se, it = computed(() => ge()), be = computed(() => fe()), It = computed(() => h2.value === "signIn" || h2.value === "signUp"), er = computed(() => [
      "confirmResetPassword",
      "confirmSignIn",
      "confirmSignUp",
      "confirmVerifyUser",
      "forceNewPassword",
      "forgotPassword",
      "selectMfaType",
      "setupEmail",
      "setupTotp",
      "signIn",
      "signUp",
      "verifyUser"
    ].includes(h2.value));
    return (R, Xe) => {
      const po = xC, ds = $C;
      return openBlock(), createElementBlock(Fragment, null, [
        unref(er) ? (openBlock(), createElementBlock("div", mergeProps({ key: 0 }, R.$attrs, {
          "data-amplify-authenticator": "",
          "data-variation": unref(o)
        }), [
          createBaseVNode("div", R1, [
            renderSlot(R.$slots, "header"),
            createBaseVNode("div", {
              "data-amplify-router": "",
              "data-amplify-router-content": unref(It) ? void 0 : ""
            }, [
              unref(It) && !unref(l) ? (openBlock(), createBlock(ds, { key: 0 }, {
                default: withCtx(() => [
                  createVNode(po, {
                    active: unref(h2) === "signIn",
                    id: "signIn",
                    label: unref(it),
                    onClick: unref(v)
                  }, null, 8, ["active", "label", "onClick"]),
                  createVNode(po, {
                    active: unref(h2) === "signUp",
                    id: "signUp",
                    label: unref(be),
                    onClick: unref(w)
                  }, null, 8, ["active", "label", "onClick"])
                ]),
                _: 1
              })) : createCommentVNode("", true),
              unref(It) ? (openBlock(), createElementBlock("div", D1, [
                unref(h2) === "signIn" ? (openBlock(), createBlock(Ra, {
                  key: 0,
                  id: "signIn-panel",
                  role: "tabpanel",
                  class: "amplify-tabs__panel amplify-tabs__panel--active",
                  "aria-labelledby": "signIn-tab",
                  ref_key: "signInComponent",
                  ref: I
                }, {
                  signInSlotI: withCtx(() => [
                    renderSlot(R.$slots, "sign-in")
                  ]),
                  form: withCtx(({ info: tr, onSignInSubmit: fs, onForgotPasswordClicked: ps, onInput: ms }) => [
                    renderSlot(R.$slots, "sign-in-form", {
                      info: tr,
                      onInput: ms,
                      onSignInSubmit: fs,
                      onForgotPasswordClicked: ps
                    })
                  ]),
                  header: withCtx(() => [
                    renderSlot(R.$slots, "sign-in-header")
                  ]),
                  footer: withCtx(() => [
                    renderSlot(R.$slots, "sign-in-footer")
                  ]),
                  _: 3
                }, 512)) : createCommentVNode("", true),
                unref(h2) === "signUp" && !unref(l) ? (openBlock(), createBlock(Da, {
                  key: 1,
                  id: "signUp-panel",
                  class: "amplify-tabs__panel amplify-tabs__panel--active",
                  role: "tabpanel",
                  "aria-labelledby": "signUp-tab",
                  ref_key: "signUpComponent",
                  ref: P
                }, {
                  signUpSlotI: withCtx(() => [
                    renderSlot(R.$slots, "sign-up")
                  ]),
                  header: withCtx(() => [
                    renderSlot(R.$slots, "sign-up-header")
                  ]),
                  "signup-fields": withCtx(({ info: tr }) => [
                    renderSlot(R.$slots, "sign-up-fields", { info: tr })
                  ]),
                  footer: withCtx(() => [
                    renderSlot(R.$slots, "sign-up-footer")
                  ]),
                  _: 3
                }, 512)) : createCommentVNode("", true)
              ])) : createCommentVNode("", true),
              unref(h2) === "confirmSignUp" ? (openBlock(), createBlock(La, {
                key: 2,
                ref_key: "confirmSignUpComponent",
                ref: k
              }, {
                confirmSignUpSlotI: withCtx(() => [
                  renderSlot(R.$slots, "confirm-sign-up")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "confirm-sign-up-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "confirm-sign-up-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "forgotPassword" ? (openBlock(), createBlock(is, {
                key: 3,
                ref_key: "ForgotPasswordComponent",
                ref: B
              }, {
                forgotPasswordSlotI: withCtx(() => [
                  renderSlot(R.$slots, "forgot-password")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "forgot-password-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "forgot-password-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "confirmResetPassword" ? (openBlock(), createBlock(as, {
                key: 4,
                ref_key: "confirmResetPasswordComponent",
                ref: z
              }, {
                confirmResetPasswordSlotI: withCtx(() => [
                  renderSlot(R.$slots, "confirm-reset-password")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "confirm-reset-password-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "confirm-reset-password-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "confirmSignIn" ? (openBlock(), createBlock(Ba, {
                key: 5,
                ref_key: "confirmSignInComponent",
                ref: U
              }, {
                confirmSignInSlotI: withCtx(() => [
                  renderSlot(R.$slots, "confirm-sign-in")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "confirm-sign-in-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "confirm-sign-in-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "setupTotp" ? (openBlock(), createBlock(O1, {
                key: 6,
                ref_key: "confirmSetupTotpComponent",
                ref: O
              }, {
                confirmSetupTotpI: withCtx(() => [
                  renderSlot(R.$slots, "setup-totp")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "setup-totp-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "setup-totp-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "forceNewPassword" ? (openBlock(), createBlock(os, {
                key: 7,
                ref_key: "forceNewPasswordComponent",
                ref: $
              }, {
                forceNewPasswordI: withCtx(() => [
                  renderSlot(R.$slots, "force-new-password")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "force-new-password-header")
                ]),
                "force-new-password-form-fields": withCtx(() => [
                  renderSlot(R.$slots, "force-new-password-form-fields")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "force-new-password-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "verifyUser" ? (openBlock(), createBlock(ss, {
                key: 8,
                ref_key: "verifyUserComponent",
                ref: se
              }, {
                verifyUserSlotI: withCtx(() => [
                  renderSlot(R.$slots, "verify-user")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "verify-user-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "verify-user-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "confirmVerifyUser" ? (openBlock(), createBlock(ls, {
                key: 9,
                ref_key: "confirmVerifyUserComponent",
                ref: ye
              }, {
                confirmVerifyUserSlotI: withCtx(() => [
                  renderSlot(R.$slots, "confirm-verify-user")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "confirm-verify-user-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "confirm-verify-user-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "selectMfaType" ? (openBlock(), createBlock(cs, {
                key: 10,
                ref_key: "selectMfaTypeComponent",
                ref: we
              }, {
                selectMfaTypeSlotI: withCtx(() => [
                  renderSlot(R.$slots, "select-mfa-type")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "select-mfa-type-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "select-mfa-type-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true),
              unref(h2) === "setupEmail" ? (openBlock(), createBlock(us, {
                key: 11,
                ref_key: "setupEmailComponent",
                ref: de
              }, {
                setupEmailSlotI: withCtx(() => [
                  renderSlot(R.$slots, "setup-email")
                ]),
                header: withCtx(() => [
                  renderSlot(R.$slots, "setup-email-header")
                ]),
                footer: withCtx(() => [
                  renderSlot(R.$slots, "setup-email-footer")
                ]),
                _: 3
              }, 512)) : createCommentVNode("", true)
            ], 8, x1),
            renderSlot(R.$slots, "footer")
          ])
        ], 16, $1)) : createCommentVNode("", true),
        unref(h2) === "authenticated" ? renderSlot(R.$slots, "default", {
          key: 1,
          user: unref(E),
          state: unref(y),
          signOut: unref(S),
          send: unref(p)
        }) : createCommentVNode("", true)
      ], 64);
    };
  }
});
var B1 = defineComponent({
  props: {
    info: {
      type: Object
    }
  },
  setup(e) {
    return () => e.info;
  }
});
var z1 = defineComponent({
  __name: "amplify-text-field",
  props: {
    label: { default: "" },
    id: { default: "" },
    autocomplete: { default: "" },
    placeholder: { default: "" },
    required: { type: Boolean, default: true },
    disabled: { type: Boolean, default: false },
    name: { default: "" },
    type: { default: "text" },
    hideLabel: { type: Boolean, default: true }
  },
  setup(e) {
    const t = e, { label: n, id: r, autocomplete: o, placeholder: i, required: a, name: s, type: l } = toRefs(t);
    return (c, d) => {
      const m = Zt, f2 = Jt, p = me;
      return openBlock(), createElementBlock(Fragment, null, [
        createVNode(m, {
          class: normalizeClass(["amplify-label", { "amplify-visually-hidden": e.hideLabel }]),
          for: unref(r)
        }, {
          default: withCtx(() => [
            createTextVNode(toDisplayString(unref(n)), 1)
          ]),
          _: 1
        }, 8, ["class", "for"]),
        createVNode(p, { class: "amplify-field-group__field-wrapper" }, {
          default: withCtx(() => [
            createVNode(f2, {
              class: "amplify-input amplify-field-group__control",
              id: unref(r),
              "aria-invalid": "false",
              autocomplete: unref(o),
              placeholder: unref(i),
              required: unref(a),
              name: unref(s),
              disabled: e.disabled,
              type: unref(l)
            }, null, 8, ["id", "autocomplete", "placeholder", "required", "name", "disabled", "type"])
          ]),
          _: 1
        })
      ], 64);
    };
  }
});
var G1 = { class: "amplify-flex amplify-field amplify-checkboxfield" };
var W1 = { class: "amplify-flex amplify-checkbox" };
var V1 = { class: "amplify-visually-hidden" };
var j1 = ["data-error", "data-checked"];
var H1 = ["data-checked"];
var K1 = createBaseVNode("path", { d: "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" }, null, -1);
var Y1 = [
  K1
];
var q1 = { class: "amplify-text amplify-checkbox__label" };
var J1 = {
  key: 0,
  class: "amplify-text amplify-field__error-message"
};
var Z1 = defineComponent({
  __name: "amplify-check-box",
  props: {
    errorMessage: { default: "" }
  },
  setup(e) {
    const t = e, n = ref(false), r = ref(F("I agree with the Terms and Conditions")), { errorMessage: o } = toRefs(t);
    return (i, a) => (openBlock(), createElementBlock("div", G1, [
      createBaseVNode("label", W1, [
        createBaseVNode("span", V1, [
          createBaseVNode("input", {
            onClick: a[0] || (a[0] = (s) => n.value = !n.value),
            class: "amplify-input amplify-field-group__control amplify-checkbox__input",
            "aria-invalid": "false",
            type: "checkbox",
            name: "acknowledgement",
            value: "yes"
          })
        ]),
        createBaseVNode("span", {
          class: normalizeClass(["amplify-flex amplify-checkbox__button", {
            "amplify-checkbox__button--error": !n.value
          }]),
          "aria-hidden": "true",
          "data-focus": "false",
          "data-error": !n.value,
          "data-checked": n.value
        }, [
          (openBlock(), createElementBlock("svg", {
            xmlns: "http://www.w3.org/2000/svg",
            class: normalizeClass(["amplify-icon amplify-checkbox__icon", {
              "amplify-checkbox__icon--checked": n.value
            }]),
            viewBox: "0 0 24 24",
            fill: "currentColor",
            "data-checked": n.value
          }, Y1, 10, H1))
        ], 10, j1),
        createBaseVNode("span", q1, toDisplayString(r.value), 1)
      ]),
      n.value ? createCommentVNode("", true) : (openBlock(), createElementBlock("p", J1, toDisplayString(unref(o)), 1))
    ]));
  }
});
var oA = {
  install: (e) => {
    e.component("SignIn", Ra), e.component("SignUp", Da), e.component("FederatedSignIn", io), e.component("Authenticator", L1), e.component("RenderInfo", B1), e.component("PasswordControl", Oa), e.component("ForceNewPassword", os), e.component("ForgotPassword", is), e.component("ConfirmResetPassword", as), e.component("ConfirmSignUp", La), e.component("ConfirmSignIn", Ba), e.component("VerifyUser", ss), e.component("ConfirmVerifyUser", ls), e.component("SelectMfaType", cs), e.component("SetupEmail", us), e.component("AmplifyTextField", z1), e.component("AmplifyCheckBox", Z1), e.component("AmplifyButton", _e), e.component("BaseFormField", $a), e.component("BaseFormFields", Fe), e.component(
      "AuthenticatorSignUpFormFields",
      xa
    ), e.component(
      "AuthenticatorForceNewPasswordFormFields",
      rs
    );
  }
};
export {
  _e as AmplifyButton,
  Z1 as AmplifyCheckBox,
  z1 as AmplifyTextField,
  L1 as Authenticator,
  rs as AuthenticatorForceNewPasswordFormFields,
  xa as AuthenticatorSignUpFormFields,
  as as ConfirmResetPassword,
  Ba as ConfirmSignIn,
  La as ConfirmSignUp,
  ls as ConfirmVerifyUser,
  io as FederatedSignIn,
  os as ForceNewPassword,
  is as ForgotPassword,
  Oa as PasswordControl,
  B1 as RenderInfo,
  cs as SelectMfaType,
  us as SetupEmail,
  Ra as SignIn,
  Da as SignUp,
  ss as VerifyUser,
  oA as default,
  rA as translations,
  he as useAuthenticator
};
/*! Bundled license information:

js-cookie/dist/js.cookie.mjs:
  (*! js-cookie v3.0.5 | MIT *)

@aws-amplify/core/dist/esm/Mutex/Mutex.mjs:
  (*!
   * The MIT License (MIT)
   *
   * Copyright (c) 2016 Christian Speckner <cnspeckn@googlemail.com>
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   *)

@aws-amplify/ui-vue/dist/index.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=@aws-amplify_ui-vue.js.map
